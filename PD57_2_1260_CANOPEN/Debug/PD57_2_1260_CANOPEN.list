
PD57_2_1260_CANOPEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08005da0  08005da0  00006da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006304  08006304  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006304  08006304  00007304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800630c  0800630c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800630c  0800630c  0000730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006310  08006310  00007310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006314  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000060  08006374  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006374  000082a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da51  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe4  00000000  00000000  00015ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00017ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b2  00000000  00000000  000184e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026456  00000000  00000000  00018c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5ad  00000000  00000000  0003f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eba8d  00000000  00000000  0004c695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138122  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  00138168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0013afbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d88 	.word	0x08005d88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005d88 	.word	0x08005d88

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 fa84 	bl	8001ac2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f8ad 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f96f 	bl	80008a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c2:	f000 f93d 	bl	8000840 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80005c6:	f000 f905 	bl	80007d4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */


  // Start UART receive interrupt
  HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	494b      	ldr	r1, [pc, #300]	@ (80006fc <main+0x14c>)
 80005ce:	484c      	ldr	r0, [pc, #304]	@ (8000700 <main+0x150>)
 80005d0:	f003 fc75 	bl	8003ebe <HAL_UART_Receive_IT>
  // Prompt user for input
  char prompt[] = "Enter an integer: \r\n";
 80005d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000704 <main+0x154>)
 80005d6:	f107 0408 	add.w	r4, r7, #8
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e4:	6020      	str	r0, [r4, #0]
 80005e6:	3404      	adds	r4, #4
 80005e8:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)prompt, strlen(prompt), HAL_MAX_DELAY);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe0e 	bl	8000210 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	f107 0108 	add.w	r1, r7, #8
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	483f      	ldr	r0, [pc, #252]	@ (8000700 <main+0x150>)
 8000602:	f003 fbd3 	bl	8003dac <HAL_UART_Transmit>

  // motor control

  if (Motor_Init(&hcan1, &huart3) != HAL_OK) {
 8000606:	493e      	ldr	r1, [pc, #248]	@ (8000700 <main+0x150>)
 8000608:	483f      	ldr	r0, [pc, #252]	@ (8000708 <main+0x158>)
 800060a:	f000 fd0b 	bl	8001024 <Motor_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <main+0x68>
     Error_Handler();
 8000614:	f000 fb0e 	bl	8000c34 <Error_Handler>
   }

   Debug_Print(&huart3, "Starting CANopen Motor Control\r\n");
 8000618:	493c      	ldr	r1, [pc, #240]	@ (800070c <main+0x15c>)
 800061a:	4839      	ldr	r0, [pc, #228]	@ (8000700 <main+0x150>)
 800061c:	f000 fb24 	bl	8000c68 <Debug_Print>

   if (Motor_NMT_Start(&hcan1) != HAL_OK) {
 8000620:	4839      	ldr	r0, [pc, #228]	@ (8000708 <main+0x158>)
 8000622:	f000 fd3b 	bl	800109c <Motor_NMT_Start>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <main+0x80>
     Error_Handler();
 800062c:	f000 fb02 	bl	8000c34 <Error_Handler>
   }

   if (Motor_ClearFault(&hcan1, &huart3) != HAL_OK) {
 8000630:	4933      	ldr	r1, [pc, #204]	@ (8000700 <main+0x150>)
 8000632:	4835      	ldr	r0, [pc, #212]	@ (8000708 <main+0x158>)
 8000634:	f000 fd7c 	bl	8001130 <Motor_ClearFault>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <main+0x92>
     Error_Handler();
 800063e:	f000 faf9 	bl	8000c34 <Error_Handler>
   }

   if (Motor_ResetState(&hcan1, &huart3) != HAL_OK) {
 8000642:	492f      	ldr	r1, [pc, #188]	@ (8000700 <main+0x150>)
 8000644:	4830      	ldr	r0, [pc, #192]	@ (8000708 <main+0x158>)
 8000646:	f000 fdd5 	bl	80011f4 <Motor_ResetState>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <main+0xa4>
     Error_Handler();
 8000650:	f000 faf0 	bl	8000c34 <Error_Handler>
   }

   int32_t position;
   if (Motor_ReadPosition(&hcan1, &huart3, &position) != HAL_OK) {
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	461a      	mov	r2, r3
 8000658:	4929      	ldr	r1, [pc, #164]	@ (8000700 <main+0x150>)
 800065a:	482b      	ldr	r0, [pc, #172]	@ (8000708 <main+0x158>)
 800065c:	f000 fdf2 	bl	8001244 <Motor_ReadPosition>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <main+0xba>
     Error_Handler();
 8000666:	f000 fae5 	bl	8000c34 <Error_Handler>
   }

   if (Motor_Home(&hcan1, &huart3) != HAL_OK) {
 800066a:	4925      	ldr	r1, [pc, #148]	@ (8000700 <main+0x150>)
 800066c:	4826      	ldr	r0, [pc, #152]	@ (8000708 <main+0x158>)
 800066e:	f000 fe1d 	bl	80012ac <Motor_Home>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <main+0xd0>
     Debug_Print(&huart3, "Homing Failed, proceeding anyway\r\n");
 8000678:	4925      	ldr	r1, [pc, #148]	@ (8000710 <main+0x160>)
 800067a:	4821      	ldr	r0, [pc, #132]	@ (8000700 <main+0x150>)
 800067c:	f000 faf4 	bl	8000c68 <Debug_Print>
   }

   if (Motor_SetProfilePositionMode(&hcan1, &huart3) != HAL_OK) {
 8000680:	491f      	ldr	r1, [pc, #124]	@ (8000700 <main+0x150>)
 8000682:	4821      	ldr	r0, [pc, #132]	@ (8000708 <main+0x158>)
 8000684:	f000 fefa 	bl	800147c <Motor_SetProfilePositionMode>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0xe2>
     Error_Handler();
 800068e:	f000 fad1 	bl	8000c34 <Error_Handler>
   }

   if (Motor_ConfigureMotion(&hcan1, &huart3, SPEED) != HAL_OK) { // max 50000 inc/s per datasheet for 200 steps/rev w 64 microsteps
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <main+0x164>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	4919      	ldr	r1, [pc, #100]	@ (8000700 <main+0x150>)
 800069a:	481b      	ldr	r0, [pc, #108]	@ (8000708 <main+0x158>)
 800069c:	f000 ff26 	bl	80014ec <Motor_ConfigureMotion>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0xfa>
     Error_Handler();
 80006a6:	f000 fac5 	bl	8000c34 <Error_Handler>
   }

   if (Motor_SetTargetPosition(&hcan1, &huart3, TARGET_POSITION) != HAL_OK) {
 80006aa:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 80006ae:	4914      	ldr	r1, [pc, #80]	@ (8000700 <main+0x150>)
 80006b0:	4815      	ldr	r0, [pc, #84]	@ (8000708 <main+0x158>)
 80006b2:	f000 ff67 	bl	8001584 <Motor_SetTargetPosition>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <main+0x110>
     Error_Handler();
 80006bc:	f000 faba 	bl	8000c34 <Error_Handler>
   }

   if (Motor_StartMotion(&hcan1, &huart3) != HAL_OK) {
 80006c0:	490f      	ldr	r1, [pc, #60]	@ (8000700 <main+0x150>)
 80006c2:	4811      	ldr	r0, [pc, #68]	@ (8000708 <main+0x158>)
 80006c4:	f000 ff80 	bl	80015c8 <Motor_StartMotion>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <main+0x122>
     Error_Handler();
 80006ce:	f000 fab1 	bl	8000c34 <Error_Handler>
   }

   if (Motor_PollMotion(&hcan1, &huart3) != HAL_OK) {
 80006d2:	490b      	ldr	r1, [pc, #44]	@ (8000700 <main+0x150>)
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <main+0x158>)
 80006d6:	f001 f80b 	bl	80016f0 <Motor_PollMotion>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <main+0x134>
     Error_Handler();
 80006e0:	f000 faa8 	bl	8000c34 <Error_Handler>
   }

   if (Motor_Stop(&hcan1, &huart3) != HAL_OK) {
 80006e4:	4906      	ldr	r1, [pc, #24]	@ (8000700 <main+0x150>)
 80006e6:	4808      	ldr	r0, [pc, #32]	@ (8000708 <main+0x158>)
 80006e8:	f001 f82c 	bl	8001744 <Motor_Stop>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <main+0x148>
     Error_Handler();
 80006f2:	f000 fa9f 	bl	8000c34 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <main+0x148>
 80006fc:	2000012c 	.word	0x2000012c
 8000700:	200000a4 	.word	0x200000a4
 8000704:	08005de8 	.word	0x08005de8
 8000708:	2000007c 	.word	0x2000007c
 800070c:	08005da0 	.word	0x08005da0
 8000710:	08005dc4 	.word	0x08005dc4
 8000714:	20000000 	.word	0x20000000

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	@ 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	@ 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f004 feae 	bl	8005488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800073c:	f002 fa1e 	bl	8002b7c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <SystemClock_Config+0xb4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	4a21      	ldr	r2, [pc, #132]	@ (80007cc <SystemClock_Config+0xb4>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <SystemClock_Config+0xb4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <SystemClock_Config+0xb8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000760:	4a1b      	ldr	r2, [pc, #108]	@ (80007d0 <SystemClock_Config+0xb8>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <SystemClock_Config+0xb8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fa07 	bl	8002b9c <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000794:	f000 fa4e 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fc96 	bl	80030e4 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007be:	f000 fa39 	bl	8000c34 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_CAN1_Init+0x64>)
 80007da:	4a18      	ldr	r2, [pc, #96]	@ (800083c <MX_CAN1_Init+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_CAN1_Init+0x64>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_CAN1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_CAN1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_CAN1_Init+0x64>)
 80007f2:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80007f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_CAN1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_CAN1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_CAN1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_CAN1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_CAN1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_CAN1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_CAN1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_CAN1_Init+0x64>)
 8000824:	f001 f9ce 	bl	8001bc4 <HAL_CAN_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800082e:	f000 fa01 	bl	8000c34 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000007c 	.word	0x2000007c
 800083c:	40006400 	.word	0x40006400

08000840 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	@ (800089c <MX_USART3_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USART3_UART_Init+0x58>)
 8000884:	f003 fa44 	bl	8003d10 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f9d1 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000a4 	.word	0x200000a4
 800089c:	40004800 	.word	0x40004800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	@ 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4ba4      	ldr	r3, [pc, #656]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4aa3      	ldr	r2, [pc, #652]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4ba1      	ldr	r3, [pc, #644]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	4b9e      	ldr	r3, [pc, #632]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a9d      	ldr	r2, [pc, #628]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b9b      	ldr	r3, [pc, #620]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b98      	ldr	r3, [pc, #608]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a97      	ldr	r2, [pc, #604]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b95      	ldr	r3, [pc, #596]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b92      	ldr	r3, [pc, #584]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a91      	ldr	r2, [pc, #580]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b8f      	ldr	r3, [pc, #572]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b8c      	ldr	r3, [pc, #560]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a8b      	ldr	r2, [pc, #556]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b89      	ldr	r3, [pc, #548]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	4b86      	ldr	r3, [pc, #536]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a85      	ldr	r2, [pc, #532]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b83      	ldr	r3, [pc, #524]	@ (8000b48 <MX_GPIO_Init+0x2a8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f244 0181 	movw	r1, #16513	@ 0x4081
 800094c:	487f      	ldr	r0, [pc, #508]	@ (8000b4c <MX_GPIO_Init+0x2ac>)
 800094e:	f002 f8c9 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	@ 0x40
 8000956:	487e      	ldr	r0, [pc, #504]	@ (8000b50 <MX_GPIO_Init+0x2b0>)
 8000958:	f002 f8c4 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4878      	ldr	r0, [pc, #480]	@ (8000b54 <MX_GPIO_Init+0x2b4>)
 8000974:	f001 ff0a 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000978:	2332      	movs	r3, #50	@ 0x32
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000988:	230b      	movs	r3, #11
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4870      	ldr	r0, [pc, #448]	@ (8000b54 <MX_GPIO_Init+0x2b4>)
 8000994:	f001 fefa 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000998:	2382      	movs	r3, #130	@ 0x82
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a8:	230b      	movs	r3, #11
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4869      	ldr	r0, [pc, #420]	@ (8000b58 <MX_GPIO_Init+0x2b8>)
 80009b4:	f001 feea 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b8:	2304      	movs	r3, #4
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c8:	2307      	movs	r3, #7
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4861      	ldr	r0, [pc, #388]	@ (8000b58 <MX_GPIO_Init+0x2b8>)
 80009d4:	f001 feda 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4856      	ldr	r0, [pc, #344]	@ (8000b4c <MX_GPIO_Init+0x2ac>)
 80009f2:	f001 fecb 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a08:	230b      	movs	r3, #11
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	484e      	ldr	r0, [pc, #312]	@ (8000b4c <MX_GPIO_Init+0x2ac>)
 8000a14:	f001 feba 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a18:	2340      	movs	r3, #64	@ 0x40
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4848      	ldr	r0, [pc, #288]	@ (8000b50 <MX_GPIO_Init+0x2b0>)
 8000a30:	f001 feac 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4842      	ldr	r0, [pc, #264]	@ (8000b50 <MX_GPIO_Init+0x2b0>)
 8000a48:	f001 fea0 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	483a      	ldr	r0, [pc, #232]	@ (8000b54 <MX_GPIO_Init+0x2b4>)
 8000a6a:	f001 fe8f 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a6e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a80:	230a      	movs	r3, #10
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4833      	ldr	r0, [pc, #204]	@ (8000b58 <MX_GPIO_Init+0x2b8>)
 8000a8c:	f001 fe7e 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	482c      	ldr	r0, [pc, #176]	@ (8000b58 <MX_GPIO_Init+0x2b8>)
 8000aa6:	f001 fe71 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000abc:	2301      	movs	r3, #1
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4824      	ldr	r0, [pc, #144]	@ (8000b58 <MX_GPIO_Init+0x2b8>)
 8000ac8:	f001 fe60 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000acc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ade:	230b      	movs	r3, #11
 8000ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4819      	ldr	r0, [pc, #100]	@ (8000b50 <MX_GPIO_Init+0x2b0>)
 8000aea:	f001 fe4f 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aee:	2310      	movs	r3, #16
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4810      	ldr	r0, [pc, #64]	@ (8000b4c <MX_GPIO_Init+0x2ac>)
 8000b0a:	f001 fe3f 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b14:	2312      	movs	r3, #18
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b20:	2304      	movs	r3, #4
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <MX_GPIO_Init+0x2ac>)
 8000b2c:	f001 fe2e 	bl	800278c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2028      	movs	r0, #40	@ 0x28
 8000b36:	f001 fd60 	bl	80025fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b3a:	2028      	movs	r0, #40	@ 0x28
 8000b3c:	f001 fd79 	bl	8002632 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	@ 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020000 	.word	0x40020000

08000b5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b6c:	d105      	bne.n	8000b7a <HAL_GPIO_EXTI_Callback+0x1e>
	{
	case GPIO_PIN_13: // u cant make EXTI same pin on  other port so no need for port specification
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_SET); // on
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
 8000b6e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b72:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b74:	f001 ffcf 	bl	8002b16 <HAL_GPIO_TogglePin>
		break;
 8000b78:	e000      	b.n	8000b7c <HAL_GPIO_EXTI_Callback+0x20>
	default:
		break;
 8000b7a:	bf00      	nop
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020400 	.word	0x40020400

08000b88 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <HAL_UART_RxCpltCallback+0x94>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d13c      	bne.n	8000c14 <HAL_UART_RxCpltCallback+0x8c>
    {
        if (rx_buffer[rx_index] == '\r' || rx_buffer[rx_index] == '\n')
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <HAL_UART_RxCpltCallback+0x9c>)
 8000ba2:	5c9b      	ldrb	r3, [r3, r2]
 8000ba4:	2b0d      	cmp	r3, #13
 8000ba6:	d006      	beq.n	8000bb6 <HAL_UART_RxCpltCallback+0x2e>
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <HAL_UART_RxCpltCallback+0x9c>)
 8000bb0:	5c9b      	ldrb	r3, [r3, r2]
 8000bb2:	2b0a      	cmp	r3, #10
 8000bb4:	d117      	bne.n	8000be6 <HAL_UART_RxCpltCallback+0x5e>
        {
            rx_buffer[rx_index] = '\0'; // Null-terminate
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_UART_RxCpltCallback+0x9c>)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	5499      	strb	r1, [r3, r2]
            // Parse the received string to an integer
            user_input = atoi((char*)rx_buffer);
 8000bc2:	4818      	ldr	r0, [pc, #96]	@ (8000c24 <HAL_UART_RxCpltCallback+0x9c>)
 8000bc4:	f004 fba4 	bl	8005310 <atoi>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_UART_RxCpltCallback+0xa0>)
 8000bcc:	6013      	str	r3, [r2, #0]
            rx_complete = 1;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <HAL_UART_RxCpltCallback+0xa4>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8000bda:	2220      	movs	r2, #32
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <HAL_UART_RxCpltCallback+0x9c>)
 8000be0:	f004 fc52 	bl	8005488 <memset>
 8000be4:	e00c      	b.n	8000c00 <HAL_UART_RxCpltCallback+0x78>
        }
        else
        {
            rx_index++;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000bf0:	701a      	strb	r2, [r3, #0]
            if (rx_index >= sizeof(rx_buffer)) rx_index = 0; // Prevent overflow
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b1f      	cmp	r3, #31
 8000bf8:	d902      	bls.n	8000c00 <HAL_UART_RxCpltCallback+0x78>
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
        }
        // Restart interrupt for next byte
        HAL_UART_Receive_IT(&huart3, rx_buffer + rx_index, 1);
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <HAL_UART_RxCpltCallback+0x98>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <HAL_UART_RxCpltCallback+0x9c>)
 8000c08:	4413      	add	r3, r2
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4808      	ldr	r0, [pc, #32]	@ (8000c30 <HAL_UART_RxCpltCallback+0xa8>)
 8000c10:	f003 f955 	bl	8003ebe <HAL_UART_Receive_IT>
    }
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	2000014c 	.word	0x2000014c
 8000c24:	2000012c 	.word	0x2000012c
 8000c28:	20000150 	.word	0x20000150
 8000c2c:	20000154 	.word	0x20000154
 8000c30:	200000a4 	.word	0x200000a4

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
 8000c3c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <Error_Handler+0x30>)
 8000c42:	f001 ff68 	bl	8002b16 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000c46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c4a:	f000 ff97 	bl	8001b7c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
 8000c4e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c52:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <Error_Handler+0x30>)
 8000c54:	f001 ff5f 	bl	8002b16 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000c58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c5c:	f000 ff8e 	bl	8001b7c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
 8000c60:	bf00      	nop
 8000c62:	e7eb      	b.n	8000c3c <Error_Handler+0x8>
 8000c64:	40020400 	.word	0x40020400

08000c68 <Debug_Print>:
// motor_control.c
#include "motor_control.h"
#include <string.h>
#include <stdio.h>

void Debug_Print(UART_HandleTypeDef *huart, const char *msg) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(huart, (uint8_t *)msg, strlen(msg), 100);
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f7ff facc 	bl	8000210 <strlen>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	2364      	movs	r3, #100	@ 0x64
 8000c7e:	6839      	ldr	r1, [r7, #0]
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f003 f893 	bl	8003dac <HAL_UART_Transmit>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <CANopen_SendFrame>:

static HAL_StatusTypeDef CANopen_SendFrame(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, uint32_t id, uint8_t *data, uint8_t len) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b09a      	sub	sp, #104	@ 0x68
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  TxHeader.StdId = id;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxHeader.ExtId = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TxHeader.IDE = CAN_ID_STD;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	653b      	str	r3, [r7, #80]	@ 0x50
  TxHeader.RTR = CAN_RTR_DATA;
 8000caa:	2300      	movs	r3, #0
 8000cac:	657b      	str	r3, [r7, #84]	@ 0x54
  TxHeader.DLC = len;
 8000cae:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000cb2:	65bb      	str	r3, [r7, #88]	@ 0x58

  HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
 8000cb4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000cb8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f001 f99e 	bl	8002000 <HAL_CAN_AddTxMessage>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if (ret != HAL_OK) {
 8000cca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d012      	beq.n	8000cf8 <CANopen_SendFrame+0x68>
    char buf[48];
    snprintf(buf, sizeof(buf), "CAN Tx Error: %lu\r\n", HAL_CAN_GetError(hcan));
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f001 fbaa 	bl	800242c <HAL_CAN_GetError>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f107 0014 	add.w	r0, r7, #20
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <CANopen_SendFrame+0x98>)
 8000ce0:	2130      	movs	r1, #48	@ 0x30
 8000ce2:	f004 fb9d 	bl	8005420 <sniprintf>
    Debug_Print(huart, buf); // Use huart parameter
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	68b8      	ldr	r0, [r7, #8]
 8000cee:	f7ff ffbb 	bl	8000c68 <Debug_Print>
    return ret;
 8000cf2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cf6:	e013      	b.n	8000d20 <CANopen_SendFrame+0x90>
  }

  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f000 ff34 	bl	8001b64 <HAL_GetTick>
 8000cfc:	6638      	str	r0, [r7, #96]	@ 0x60
  while (HAL_CAN_IsTxMessagePending(hcan, TxMailbox) && (HAL_GetTick() - tickstart < 100)) {}
 8000cfe:	bf00      	nop
 8000d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d02:	4619      	mov	r1, r3
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f001 fa4b 	bl	80021a0 <HAL_CAN_IsTxMessagePending>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <CANopen_SendFrame+0x8e>
 8000d10:	f000 ff28 	bl	8001b64 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b63      	cmp	r3, #99	@ 0x63
 8000d1c:	d9f0      	bls.n	8000d00 <CANopen_SendFrame+0x70>
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3768      	adds	r7, #104	@ 0x68
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	08005e00 	.word	0x08005e00

08000d2c <CANopen_SDO_Write8>:

static HAL_StatusTypeDef CANopen_SDO_Write8(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, uint16_t index, uint8_t subidx, int8_t value) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80fb      	strh	r3, [r7, #6]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	717b      	strb	r3, [r7, #5]
  uint8_t sdo[8] = {0x2F, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx, (uint8_t)value, 0x00, 0x00, 0x00};
 8000d42:	232f      	movs	r3, #47	@ 0x2f
 8000d44:	743b      	strb	r3, [r7, #16]
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	747b      	strb	r3, [r7, #17]
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	74bb      	strb	r3, [r7, #18]
 8000d56:	797b      	ldrb	r3, [r7, #5]
 8000d58:	74fb      	strb	r3, [r7, #19]
 8000d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d5e:	753b      	strb	r3, [r7, #20]
 8000d60:	2300      	movs	r3, #0
 8000d62:	757b      	strb	r3, [r7, #21]
 8000d64:	2300      	movs	r3, #0
 8000d66:	75bb      	strb	r3, [r7, #22]
 8000d68:	2300      	movs	r3, #0
 8000d6a:	75fb      	strb	r3, [r7, #23]
  return CANopen_SendFrame(hcan, huart, SDO_CLIENT_TX, sdo, 8);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2208      	movs	r2, #8
 8000d72:	9200      	str	r2, [sp, #0]
 8000d74:	f240 6201 	movw	r2, #1537	@ 0x601
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff ff88 	bl	8000c90 <CANopen_SendFrame>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <CANopen_SDO_Write16>:

static HAL_StatusTypeDef CANopen_SDO_Write16(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, uint16_t index, uint8_t subidx, uint16_t value) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b088      	sub	sp, #32
 8000d8e:	af02      	add	r7, sp, #8
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	4611      	mov	r1, r2
 8000d96:	461a      	mov	r2, r3
 8000d98:	460b      	mov	r3, r1
 8000d9a:	80fb      	strh	r3, [r7, #6]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	717b      	strb	r3, [r7, #5]
  uint8_t sdo[8] = {0x2B, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8000da0:	232b      	movs	r3, #43	@ 0x2b
 8000da2:	743b      	strb	r3, [r7, #16]
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	747b      	strb	r3, [r7, #17]
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	74bb      	strb	r3, [r7, #18]
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	74fb      	strb	r3, [r7, #19]
                    (uint8_t)(value & 0xFF), (uint8_t)(value >> 8), 0x00, 0x00};
 8000db8:	8c3b      	ldrh	r3, [r7, #32]
 8000dba:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x2B, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8000dbc:	753b      	strb	r3, [r7, #20]
                    (uint8_t)(value & 0xFF), (uint8_t)(value >> 8), 0x00, 0x00};
 8000dbe:	8c3b      	ldrh	r3, [r7, #32]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x2B, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8000dc6:	757b      	strb	r3, [r7, #21]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	75bb      	strb	r3, [r7, #22]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	75fb      	strb	r3, [r7, #23]
  return CANopen_SendFrame(hcan, huart, SDO_CLIENT_TX, sdo, 8);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	9200      	str	r2, [sp, #0]
 8000dd8:	f240 6201 	movw	r2, #1537	@ 0x601
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff ff56 	bl	8000c90 <CANopen_SendFrame>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <CANopen_SDO_Write32>:

static HAL_StatusTypeDef CANopen_SDO_Write32(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, uint16_t index, uint8_t subidx, uint32_t value) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b088      	sub	sp, #32
 8000df2:	af02      	add	r7, sp, #8
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	4613      	mov	r3, r2
 8000e02:	717b      	strb	r3, [r7, #5]
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8000e04:	2323      	movs	r3, #35	@ 0x23
 8000e06:	743b      	strb	r3, [r7, #16]
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	747b      	strb	r3, [r7, #17]
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	74bb      	strb	r3, [r7, #18]
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	74fb      	strb	r3, [r7, #19]
                    (uint8_t)(value & 0xFF), (uint8_t)((value >> 8) & 0xFF),
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
 8000e1e:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8000e20:	753b      	strb	r3, [r7, #20]
                    (uint8_t)(value & 0xFF), (uint8_t)((value >> 8) & 0xFF),
 8000e22:	6a3b      	ldr	r3, [r7, #32]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8000e28:	757b      	strb	r3, [r7, #21]
                    (uint8_t)((value >> 16) & 0xFF), (uint8_t)(value >> 24)};
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	0c1b      	lsrs	r3, r3, #16
 8000e2e:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8000e30:	75bb      	strb	r3, [r7, #22]
                    (uint8_t)((value >> 16) & 0xFF), (uint8_t)(value >> 24)};
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	0e1b      	lsrs	r3, r3, #24
 8000e36:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8000e38:	75fb      	strb	r3, [r7, #23]
  return CANopen_SendFrame(hcan, huart, SDO_CLIENT_TX, sdo, 8);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2208      	movs	r2, #8
 8000e40:	9200      	str	r2, [sp, #0]
 8000e42:	f240 6201 	movw	r2, #1537	@ 0x601
 8000e46:	68b9      	ldr	r1, [r7, #8]
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff ff21 	bl	8000c90 <CANopen_SendFrame>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <CANopen_SDO_Read16>:

static uint16_t CANopen_SDO_Read16(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, uint16_t index, uint8_t subidx) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b092      	sub	sp, #72	@ 0x48
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	460b      	mov	r3, r1
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	717b      	strb	r3, [r7, #5]
  uint8_t req[8] = {0x40, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx, 0x00, 0x00, 0x00, 0x00};
 8000e6e:	2340      	movs	r3, #64	@ 0x40
 8000e70:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	0a1b      	lsrs	r3, r3, #8
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000e88:	797b      	ldrb	r3, [r7, #5]
 8000e8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (CANopen_SendFrame(hcan, huart, SDO_CLIENT_TX, req, 8) != HAL_OK) {
 8000ea6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000eaa:	2208      	movs	r2, #8
 8000eac:	9200      	str	r2, [sp, #0]
 8000eae:	f240 6201 	movw	r2, #1537	@ 0x601
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff feeb 	bl	8000c90 <CANopen_SendFrame>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <CANopen_SDO_Read16+0x76>
    Debug_Print(huart, "SDO Read Send Failed\r\n");
 8000ec0:	491c      	ldr	r1, [pc, #112]	@ (8000f34 <CANopen_SDO_Read16+0xdc>)
 8000ec2:	68b8      	ldr	r0, [r7, #8]
 8000ec4:	f7ff fed0 	bl	8000c68 <Debug_Print>
    return 0xFFFF;
 8000ec8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ecc:	e02d      	b.n	8000f2a <CANopen_SDO_Read16+0xd2>
  }

  CAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[8];
  uint32_t tickstart = HAL_GetTick();
 8000ece:	f000 fe49 	bl	8001b64 <HAL_GetTick>
 8000ed2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  while ((HAL_GetTick() - tickstart < 500)) {
 8000ed4:	e01b      	b.n	8000f0e <CANopen_SDO_Read16+0xb6>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	f107 0218 	add.w	r2, r7, #24
 8000ede:	2100      	movs	r1, #0
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f001 f981 	bl	80021e8 <HAL_CAN_GetRxMessage>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d110      	bne.n	8000f0e <CANopen_SDO_Read16+0xb6>
      if (RxHeader.StdId == SDO_SERVER_RX && RxData[0] == 0x4B) {
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f240 5281 	movw	r2, #1409	@ 0x581
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10b      	bne.n	8000f0e <CANopen_SDO_Read16+0xb6>
 8000ef6:	7c3b      	ldrb	r3, [r7, #16]
 8000ef8:	2b4b      	cmp	r3, #75	@ 0x4b
 8000efa:	d108      	bne.n	8000f0e <CANopen_SDO_Read16+0xb6>
        return (RxData[4] | (RxData[5] << 8));
 8000efc:	7d3b      	ldrb	r3, [r7, #20]
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	7d7b      	ldrb	r3, [r7, #21]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	e00d      	b.n	8000f2a <CANopen_SDO_Read16+0xd2>
  while ((HAL_GetTick() - tickstart < 500)) {
 8000f0e:	f000 fe29 	bl	8001b64 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f1c:	d3db      	bcc.n	8000ed6 <CANopen_SDO_Read16+0x7e>
      }
    }
  }
  Debug_Print(huart, "SDO Read Timeout\r\n"); // Use huart parameter
 8000f1e:	4906      	ldr	r1, [pc, #24]	@ (8000f38 <CANopen_SDO_Read16+0xe0>)
 8000f20:	68b8      	ldr	r0, [r7, #8]
 8000f22:	f7ff fea1 	bl	8000c68 <Debug_Print>
  return 0xFFFF;
 8000f26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3740      	adds	r7, #64	@ 0x40
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	08005e14 	.word	0x08005e14
 8000f38:	08005e2c 	.word	0x08005e2c

08000f3c <CANopen_SDO_Read32>:

static uint32_t CANopen_SDO_Read32(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, uint16_t index, uint8_t subidx) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b092      	sub	sp, #72	@ 0x48
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	717b      	strb	r3, [r7, #5]
  uint8_t req[8] = {0x40, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx, 0x00, 0x00, 0x00, 0x00};
 8000f52:	2340      	movs	r3, #64	@ 0x40
 8000f54:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000f6c:	797b      	ldrb	r3, [r7, #5]
 8000f6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (CANopen_SendFrame(hcan, huart, SDO_CLIENT_TX, req, 8) != HAL_OK) {
 8000f8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f8e:	2208      	movs	r2, #8
 8000f90:	9200      	str	r2, [sp, #0]
 8000f92:	f240 6201 	movw	r2, #1537	@ 0x601
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f7ff fe79 	bl	8000c90 <CANopen_SendFrame>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <CANopen_SDO_Read32+0x76>
    Debug_Print(huart, "SDO Read32 Send Failed\r\n");
 8000fa4:	491d      	ldr	r1, [pc, #116]	@ (800101c <CANopen_SDO_Read32+0xe0>)
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	f7ff fe5e 	bl	8000c68 <Debug_Print>
    return 0xFFFFFFFF;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	e030      	b.n	8001014 <CANopen_SDO_Read32+0xd8>
  }

  CAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[8];
  uint32_t tickstart = HAL_GetTick();
 8000fb2:	f000 fdd7 	bl	8001b64 <HAL_GetTick>
 8000fb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  while ((HAL_GetTick() - tickstart < 500)) {
 8000fb8:	e01e      	b.n	8000ff8 <CANopen_SDO_Read32+0xbc>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	f107 0218 	add.w	r2, r7, #24
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f001 f90f 	bl	80021e8 <HAL_CAN_GetRxMessage>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d113      	bne.n	8000ff8 <CANopen_SDO_Read32+0xbc>
      if (RxHeader.StdId == SDO_SERVER_RX && RxData[0] == 0x43) {
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	f240 5281 	movw	r2, #1409	@ 0x581
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d10e      	bne.n	8000ff8 <CANopen_SDO_Read32+0xbc>
 8000fda:	7c3b      	ldrb	r3, [r7, #16]
 8000fdc:	2b43      	cmp	r3, #67	@ 0x43
 8000fde:	d10b      	bne.n	8000ff8 <CANopen_SDO_Read32+0xbc>
        return (RxData[4] | (RxData[5] << 8) | (RxData[6] << 16) | (RxData[7] << 24));
 8000fe0:	7d3b      	ldrb	r3, [r7, #20]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	7d7b      	ldrb	r3, [r7, #21]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	7dbb      	ldrb	r3, [r7, #22]
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	061b      	lsls	r3, r3, #24
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	e00d      	b.n	8001014 <CANopen_SDO_Read32+0xd8>
  while ((HAL_GetTick() - tickstart < 500)) {
 8000ff8:	f000 fdb4 	bl	8001b64 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001006:	d3d8      	bcc.n	8000fba <CANopen_SDO_Read32+0x7e>
      }
    }
  }
  Debug_Print(huart, "SDO Read32 Timeout\r\n"); // Use huart parameter
 8001008:	4905      	ldr	r1, [pc, #20]	@ (8001020 <CANopen_SDO_Read32+0xe4>)
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f7ff fe2c 	bl	8000c68 <Debug_Print>
  return 0xFFFFFFFF;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001014:	4618      	mov	r0, r3
 8001016:	3740      	adds	r7, #64	@ 0x40
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08005e40 	.word	0x08005e40
 8001020:	08005e5c 	.word	0x08005e5c

08001024 <Motor_Init>:

HAL_StatusTypeDef Motor_Init(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  // Start CAN
  if (HAL_CAN_Start(hcan) != HAL_OK) {
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 ffa2 	bl	8001f78 <HAL_CAN_Start>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <Motor_Init+0x22>
    Debug_Print(huart, "CAN Start Failed\r\n");
 800103a:	4916      	ldr	r1, [pc, #88]	@ (8001094 <Motor_Init+0x70>)
 800103c:	6838      	ldr	r0, [r7, #0]
 800103e:	f7ff fe13 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e021      	b.n	800108a <Motor_Init+0x66>
  }

  // CAN filter: Accept all IDs
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800104e:	2301      	movs	r3, #1
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  sFilterConfig.FilterIdHigh = 0x0000;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterIdLow = 0x0000;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8001066:	2301      	movs	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fea3 	bl	8001dbc <HAL_CAN_ConfigFilter>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <Motor_Init+0x64>
    Debug_Print(huart, "CAN Filter Config Failed\r\n");
 800107c:	4906      	ldr	r1, [pc, #24]	@ (8001098 <Motor_Init+0x74>)
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f7ff fdf2 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <Motor_Init+0x66>
  }

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	08005e74 	.word	0x08005e74
 8001098:	08005e88 	.word	0x08005e88

0800109c <Motor_NMT_Start>:

HAL_StatusTypeDef Motor_NMT_Start(CAN_HandleTypeDef *hcan) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	6078      	str	r0, [r7, #4]
  uint8_t nmt[2] = {0x01, CANOPEN_NODE_ID};
 80010a4:	f240 1301 	movw	r3, #257	@ 0x101
 80010a8:	81bb      	strh	r3, [r7, #12]
  return CANopen_SendFrame(hcan, NULL, COB_ID_NMT, nmt, 2); // No UART needed for NMT
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2202      	movs	r2, #2
 80010b0:	9200      	str	r2, [sp, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fdea 	bl	8000c90 <CANopen_SendFrame>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <Motor_CheckStatus>:

HAL_StatusTypeDef Motor_CheckStatus(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, uint16_t *status) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b090      	sub	sp, #64	@ 0x40
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  *status = CANopen_SDO_Read16(hcan, huart, OD_STATUSWORD, 0x00);
 80010d4:	2300      	movs	r3, #0
 80010d6:	f246 0241 	movw	r2, #24641	@ 0x6041
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff febb 	bl	8000e58 <CANopen_SDO_Read16>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	801a      	strh	r2, [r3, #0]
  char buf[48];
  snprintf(buf, sizeof(buf), "Statusword: 0x%04X\r\n", *status);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	f107 0010 	add.w	r0, r7, #16
 80010f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <Motor_CheckStatus+0x60>)
 80010f4:	2130      	movs	r1, #48	@ 0x30
 80010f6:	f004 f993 	bl	8005420 <sniprintf>
  Debug_Print(huart, buf);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4619      	mov	r1, r3
 8001100:	68b8      	ldr	r0, [r7, #8]
 8001102:	f7ff fdb1 	bl	8000c68 <Debug_Print>
  if (*status == 0xFFFF) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800110e:	4293      	cmp	r3, r2
 8001110:	d105      	bne.n	800111e <Motor_CheckStatus+0x56>
    Debug_Print(huart, "SDO Read Failed: No response\r\n");
 8001112:	4906      	ldr	r1, [pc, #24]	@ (800112c <Motor_CheckStatus+0x64>)
 8001114:	68b8      	ldr	r0, [r7, #8]
 8001116:	f7ff fda7 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <Motor_CheckStatus+0x58>
  }
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3740      	adds	r7, #64	@ 0x40
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08005ea4 	.word	0x08005ea4
 800112c:	08005ebc 	.word	0x08005ebc

08001130 <Motor_ClearFault>:

HAL_StatusTypeDef Motor_ClearFault(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b092      	sub	sp, #72	@ 0x48
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint16_t status;
  if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 800113a:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 800113e:	461a      	mov	r2, r3
 8001140:	6839      	ldr	r1, [r7, #0]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffc0 	bl	80010c8 <Motor_CheckStatus>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <Motor_ClearFault+0x22>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e046      	b.n	80011e0 <Motor_ClearFault+0xb0>
  }
  if (status & 0x08) {
 8001152:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	d040      	beq.n	80011de <Motor_ClearFault+0xae>
    uint32_t error_code = CANopen_SDO_Read32(hcan,huart, OD_ERROR_CODE, 0x00);
 800115c:	2300      	movs	r3, #0
 800115e:	f246 023f 	movw	r2, #24639	@ 0x603f
 8001162:	6839      	ldr	r1, [r7, #0]
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fee9 	bl	8000f3c <CANopen_SDO_Read32>
 800116a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    char buf[48];
    snprintf(buf, sizeof(buf), "Fault Code: 0x%08lX\r\n", error_code);
 800116c:	f107 0008 	add.w	r0, r7, #8
 8001170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001172:	4a1d      	ldr	r2, [pc, #116]	@ (80011e8 <Motor_ClearFault+0xb8>)
 8001174:	2130      	movs	r1, #48	@ 0x30
 8001176:	f004 f953 	bl	8005420 <sniprintf>
    Debug_Print(huart, buf);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f7ff fd71 	bl	8000c68 <Debug_Print>
    if (CANopen_SDO_Write16(hcan, huart, OD_CONTROLWORD, 0x00, 0x0080) != HAL_OK) {
 8001186:	2380      	movs	r3, #128	@ 0x80
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	f246 0240 	movw	r2, #24640	@ 0x6040
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fdf9 	bl	8000d8a <CANopen_SDO_Write16>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <Motor_ClearFault+0x7a>
          Debug_Print(huart, "Reset Fault Failed\r\n");
 800119e:	4913      	ldr	r1, [pc, #76]	@ (80011ec <Motor_ClearFault+0xbc>)
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f7ff fd61 	bl	8000c68 <Debug_Print>
          return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e01a      	b.n	80011e0 <Motor_ClearFault+0xb0>
        }
    HAL_Delay(200);
 80011aa:	20c8      	movs	r0, #200	@ 0xc8
 80011ac:	f000 fce6 	bl	8001b7c <HAL_Delay>
    if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 80011b0:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80011b4:	461a      	mov	r2, r3
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff85 	bl	80010c8 <Motor_CheckStatus>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <Motor_ClearFault+0x98>
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e00b      	b.n	80011e0 <Motor_ClearFault+0xb0>
    }
    if (status & 0x08) {
 80011c8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <Motor_ClearFault+0xae>
      Debug_Print(huart, "Fault persists\r\n");
 80011d2:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <Motor_ClearFault+0xc0>)
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f7ff fd47 	bl	8000c68 <Debug_Print>
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <Motor_ClearFault+0xb0>
    }
  }
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3740      	adds	r7, #64	@ 0x40
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08005edc 	.word	0x08005edc
 80011ec:	08005ef4 	.word	0x08005ef4
 80011f0:	08005f0c 	.word	0x08005f0c

080011f4 <Motor_ResetState>:

HAL_StatusTypeDef Motor_ResetState(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x0000) != HAL_OK) {
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	f246 0240 	movw	r2, #24640	@ 0x6040
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fdbd 	bl	8000d8a <CANopen_SDO_Write16>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <Motor_ResetState+0x2e>
    Debug_Print(huart, "Disable Voltage Failed\r\n");
 8001216:	490a      	ldr	r1, [pc, #40]	@ (8001240 <Motor_ResetState+0x4c>)
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f7ff fd25 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00a      	b.n	8001238 <Motor_ResetState+0x44>
  }
  HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	@ 0x64
 8001224:	f000 fcaa 	bl	8001b7c <HAL_Delay>
  uint16_t status;
  return Motor_CheckStatus(hcan, huart, &status);
 8001228:	f107 030e 	add.w	r3, r7, #14
 800122c:	461a      	mov	r2, r3
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff49 	bl	80010c8 <Motor_CheckStatus>
 8001236:	4603      	mov	r3, r0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	08005f20 	.word	0x08005f20

08001244 <Motor_ReadPosition>:

HAL_StatusTypeDef Motor_ReadPosition(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, int32_t *position) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b090      	sub	sp, #64	@ 0x40
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  *position = (int32_t)CANopen_SDO_Read32(hcan,huart, OD_ACTUAL_POSITION, 0x00);
 8001250:	2300      	movs	r3, #0
 8001252:	f246 0264 	movw	r2, #24676	@ 0x6064
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f7ff fe6f 	bl	8000f3c <CANopen_SDO_Read32>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
  char buf[48];
  snprintf(buf, sizeof(buf), "Current Position: %ld steps\r\n", *position);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f107 0010 	add.w	r0, r7, #16
 800126e:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <Motor_ReadPosition+0x60>)
 8001270:	2130      	movs	r1, #48	@ 0x30
 8001272:	f004 f8d5 	bl	8005420 <sniprintf>
  Debug_Print(huart, buf);
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f7ff fcf3 	bl	8000c68 <Debug_Print>
  if (*position == 0xFFFFFFFF) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128a:	d105      	bne.n	8001298 <Motor_ReadPosition+0x54>
    Debug_Print(huart, "Read Position Failed\r\n");
 800128c:	4906      	ldr	r1, [pc, #24]	@ (80012a8 <Motor_ReadPosition+0x64>)
 800128e:	68b8      	ldr	r0, [r7, #8]
 8001290:	f7ff fcea 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <Motor_ReadPosition+0x56>
  }
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3740      	adds	r7, #64	@ 0x40
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08005f3c 	.word	0x08005f3c
 80012a8:	08005f5c 	.word	0x08005f5c

080012ac <Motor_Home>:

HAL_StatusTypeDef Motor_Home(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  Debug_Print(huart, "Starting Homing\r\n");
 80012b6:	4968      	ldr	r1, [pc, #416]	@ (8001458 <Motor_Home+0x1ac>)
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f7ff fcd5 	bl	8000c68 <Debug_Print>
  if (CANopen_SDO_Write8(hcan,huart, OD_HOMING_METHOD, 0x00, 35) != HAL_OK) {
 80012be:	2323      	movs	r3, #35	@ 0x23
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	f246 0298 	movw	r2, #24728	@ 0x6098
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fd2e 	bl	8000d2c <CANopen_SDO_Write8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <Motor_Home+0x36>
    Debug_Print(huart, "Set Homing Method Failed\r\n");
 80012d6:	4961      	ldr	r1, [pc, #388]	@ (800145c <Motor_Home+0x1b0>)
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f7ff fcc5 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0b5      	b.n	800144e <Motor_Home+0x1a2>
  }
  HAL_Delay(50);
 80012e2:	2032      	movs	r0, #50	@ 0x32
 80012e4:	f000 fc4a 	bl	8001b7c <HAL_Delay>
  if (CANopen_SDO_Write8(hcan,huart, OD_MODE_OPERATION, 0x00, 0x06) != HAL_OK) {
 80012e8:	2306      	movs	r3, #6
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	f246 0260 	movw	r2, #24672	@ 0x6060
 80012f2:	6839      	ldr	r1, [r7, #0]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fd19 	bl	8000d2c <CANopen_SDO_Write8>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <Motor_Home+0x60>
    Debug_Print(huart, "Set Homing Mode Failed\r\n");
 8001300:	4957      	ldr	r1, [pc, #348]	@ (8001460 <Motor_Home+0x1b4>)
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff fcb0 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e0a0      	b.n	800144e <Motor_Home+0x1a2>
  }
  HAL_Delay(100);
 800130c:	2064      	movs	r0, #100	@ 0x64
 800130e:	f000 fc35 	bl	8001b7c <HAL_Delay>
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x0006) != HAL_OK) {
 8001312:	2306      	movs	r3, #6
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	f246 0240 	movw	r2, #24640	@ 0x6040
 800131c:	6839      	ldr	r1, [r7, #0]
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fd33 	bl	8000d8a <CANopen_SDO_Write16>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <Motor_Home+0x8a>
    Debug_Print(huart, "Homing Switch On Failed\r\n");
 800132a:	494e      	ldr	r1, [pc, #312]	@ (8001464 <Motor_Home+0x1b8>)
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff fc9b 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e08b      	b.n	800144e <Motor_Home+0x1a2>
  }
  HAL_Delay(100);
 8001336:	2064      	movs	r0, #100	@ 0x64
 8001338:	f000 fc20 	bl	8001b7c <HAL_Delay>
  uint16_t status;
  if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 800133c:	f107 030e 	add.w	r3, r7, #14
 8001340:	461a      	mov	r2, r3
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff febf 	bl	80010c8 <Motor_CheckStatus>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <Motor_Home+0xa8>
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e07c      	b.n	800144e <Motor_Home+0x1a2>
  }
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x0007) != HAL_OK) {
 8001354:	2307      	movs	r3, #7
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	f246 0240 	movw	r2, #24640	@ 0x6040
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fd12 	bl	8000d8a <CANopen_SDO_Write16>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <Motor_Home+0xcc>
    Debug_Print(huart, "Homing Switched On Failed\r\n");
 800136c:	493e      	ldr	r1, [pc, #248]	@ (8001468 <Motor_Home+0x1bc>)
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f7ff fc7a 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e06a      	b.n	800144e <Motor_Home+0x1a2>
  }
  HAL_Delay(100);
 8001378:	2064      	movs	r0, #100	@ 0x64
 800137a:	f000 fbff 	bl	8001b7c <HAL_Delay>
  if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 800137e:	f107 030e 	add.w	r3, r7, #14
 8001382:	461a      	mov	r2, r3
 8001384:	6839      	ldr	r1, [r7, #0]
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fe9e 	bl	80010c8 <Motor_CheckStatus>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <Motor_Home+0xea>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e05b      	b.n	800144e <Motor_Home+0x1a2>
  }
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x000F) != HAL_OK) {
 8001396:	230f      	movs	r3, #15
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2300      	movs	r3, #0
 800139c:	f246 0240 	movw	r2, #24640	@ 0x6040
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fcf1 	bl	8000d8a <CANopen_SDO_Write16>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <Motor_Home+0x10e>
    Debug_Print(huart, "Enable Homing Failed\r\n");
 80013ae:	492f      	ldr	r1, [pc, #188]	@ (800146c <Motor_Home+0x1c0>)
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff fc59 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e049      	b.n	800144e <Motor_Home+0x1a2>
  }
  HAL_Delay(100);
 80013ba:	2064      	movs	r0, #100	@ 0x64
 80013bc:	f000 fbde 	bl	8001b7c <HAL_Delay>
  if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 80013c0:	f107 030e 	add.w	r3, r7, #14
 80013c4:	461a      	mov	r2, r3
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fe7d 	bl	80010c8 <Motor_CheckStatus>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <Motor_Home+0x12c>
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e03a      	b.n	800144e <Motor_Home+0x1a2>
  }
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x001F) != HAL_OK) {
 80013d8:	231f      	movs	r3, #31
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2300      	movs	r3, #0
 80013de:	f246 0240 	movw	r2, #24640	@ 0x6040
 80013e2:	6839      	ldr	r1, [r7, #0]
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fcd0 	bl	8000d8a <CANopen_SDO_Write16>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <Motor_Home+0x150>
    Debug_Print(huart, "Start Homing Failed\r\n");
 80013f0:	491f      	ldr	r1, [pc, #124]	@ (8001470 <Motor_Home+0x1c4>)
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f7ff fc38 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e028      	b.n	800144e <Motor_Home+0x1a2>
  }
  HAL_Delay(100);
 80013fc:	2064      	movs	r0, #100	@ 0x64
 80013fe:	f000 fbbd 	bl	8001b7c <HAL_Delay>

  // Check homing completion (method 35: position = 0)
  int32_t position;
  if (Motor_ReadPosition(hcan, huart, &position) != HAL_OK) {
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	461a      	mov	r2, r3
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff1a 	bl	8001244 <Motor_ReadPosition>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <Motor_Home+0x16e>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e019      	b.n	800144e <Motor_Home+0x1a2>
  }
  if (position != 0) {
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <Motor_Home+0x180>
    Debug_Print(huart, "Homing Failed: Position not zero\r\n");
 8001420:	4914      	ldr	r1, [pc, #80]	@ (8001474 <Motor_Home+0x1c8>)
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f7ff fc20 	bl	8000c68 <Debug_Print>
    return HAL_OK; // Proceed anyway
 8001428:	2300      	movs	r3, #0
 800142a:	e010      	b.n	800144e <Motor_Home+0x1a2>
  }
  Debug_Print(huart, "Homing Successful\r\n");
 800142c:	4912      	ldr	r1, [pc, #72]	@ (8001478 <Motor_Home+0x1cc>)
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f7ff fc1a 	bl	8000c68 <Debug_Print>
  if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 8001434:	f107 030e 	add.w	r3, r7, #14
 8001438:	461a      	mov	r2, r3
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fe43 	bl	80010c8 <Motor_CheckStatus>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <Motor_Home+0x1a0>
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <Motor_Home+0x1a2>
  }
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	08005f74 	.word	0x08005f74
 800145c:	08005f88 	.word	0x08005f88
 8001460:	08005fa4 	.word	0x08005fa4
 8001464:	08005fc0 	.word	0x08005fc0
 8001468:	08005fdc 	.word	0x08005fdc
 800146c:	08005ff8 	.word	0x08005ff8
 8001470:	08006010 	.word	0x08006010
 8001474:	08006028 	.word	0x08006028
 8001478:	0800604c 	.word	0x0800604c

0800147c <Motor_SetProfilePositionMode>:

HAL_StatusTypeDef Motor_SetProfilePositionMode(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af02      	add	r7, sp, #8
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  if (CANopen_SDO_Write32(hcan,huart, OD_LIMIT_SWITCHES, 0x00, 0x00000003) != HAL_OK) {
 8001486:	2303      	movs	r3, #3
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	f242 0205 	movw	r2, #8197	@ 0x2005
 8001490:	6839      	ldr	r1, [r7, #0]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fcab 	bl	8000dee <CANopen_SDO_Write32>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <Motor_SetProfilePositionMode+0x2e>
    Debug_Print(huart, "Set Limit Switches Failed\r\n");
 800149e:	4911      	ldr	r1, [pc, #68]	@ (80014e4 <Motor_SetProfilePositionMode+0x68>)
 80014a0:	6838      	ldr	r0, [r7, #0]
 80014a2:	f7ff fbe1 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e018      	b.n	80014dc <Motor_SetProfilePositionMode+0x60>
  }
  HAL_Delay(50);
 80014aa:	2032      	movs	r0, #50	@ 0x32
 80014ac:	f000 fb66 	bl	8001b7c <HAL_Delay>
  if (CANopen_SDO_Write8(hcan,huart, OD_MODE_OPERATION, 0x00, 0x01) != HAL_OK) {
 80014b0:	2301      	movs	r3, #1
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	f246 0260 	movw	r2, #24672	@ 0x6060
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fc35 	bl	8000d2c <CANopen_SDO_Write8>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <Motor_SetProfilePositionMode+0x58>
    Debug_Print(huart, "Set Mode Failed\r\n");
 80014c8:	4907      	ldr	r1, [pc, #28]	@ (80014e8 <Motor_SetProfilePositionMode+0x6c>)
 80014ca:	6838      	ldr	r0, [r7, #0]
 80014cc:	f7ff fbcc 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e003      	b.n	80014dc <Motor_SetProfilePositionMode+0x60>
  }
  HAL_Delay(100);
 80014d4:	2064      	movs	r0, #100	@ 0x64
 80014d6:	f000 fb51 	bl	8001b7c <HAL_Delay>
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	08006060 	.word	0x08006060
 80014e8:	0800607c 	.word	0x0800607c

080014ec <Motor_ConfigureMotion>:

HAL_StatusTypeDef Motor_ConfigureMotion(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, uint32_t velocity) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  if (CANopen_SDO_Write32(hcan,huart, OD_PROFILE_VELOCITY, 0x00, velocity) != HAL_OK) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2300      	movs	r3, #0
 80014fe:	f246 0281 	movw	r2, #24705	@ 0x6081
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f7ff fc72 	bl	8000dee <CANopen_SDO_Write32>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <Motor_ConfigureMotion+0x30>
    Debug_Print(huart, "Set Velocity Failed\r\n");
 8001510:	4919      	ldr	r1, [pc, #100]	@ (8001578 <Motor_ConfigureMotion+0x8c>)
 8001512:	68b8      	ldr	r0, [r7, #8]
 8001514:	f7ff fba8 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e029      	b.n	8001570 <Motor_ConfigureMotion+0x84>
  }
  if (CANopen_SDO_Write32(hcan,huart, OD_PROFILE_ACCEL, 0x00, 500) != HAL_OK) {
 800151c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2300      	movs	r3, #0
 8001524:	f246 0283 	movw	r2, #24707	@ 0x6083
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fc5f 	bl	8000dee <CANopen_SDO_Write32>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <Motor_ConfigureMotion+0x56>
	// Note: Adjust acceleration to balance smooth motion and responsiveness. Typical values are 100–10000 inc/s², depending on your application.
    Debug_Print(huart, "Set Acceleration Failed\r\n");
 8001536:	4911      	ldr	r1, [pc, #68]	@ (800157c <Motor_ConfigureMotion+0x90>)
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff fb95 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e016      	b.n	8001570 <Motor_ConfigureMotion+0x84>
  }
  if (CANopen_SDO_Write32(hcan,huart, OD_PROFILE_DECEL, 0x00, 500) != HAL_OK) {
 8001542:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	f246 0284 	movw	r2, #24708	@ 0x6084
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff fc4c 	bl	8000dee <CANopen_SDO_Write32>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <Motor_ConfigureMotion+0x7c>
	// Deceleration often matches acceleration for symmetry, but you can adjust independently.
    Debug_Print(huart, "Set Deceleration Failed\r\n");
 800155c:	4908      	ldr	r1, [pc, #32]	@ (8001580 <Motor_ConfigureMotion+0x94>)
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7ff fb82 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e003      	b.n	8001570 <Motor_ConfigureMotion+0x84>
  }
  HAL_Delay(50);
 8001568:	2032      	movs	r0, #50	@ 0x32
 800156a:	f000 fb07 	bl	8001b7c <HAL_Delay>
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	08006090 	.word	0x08006090
 800157c:	080060a8 	.word	0x080060a8
 8001580:	080060c4 	.word	0x080060c4

08001584 <Motor_SetTargetPosition>:

HAL_StatusTypeDef Motor_SetTargetPosition(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart, int32_t position) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  if (CANopen_SDO_Write32(hcan,huart, OD_TARGET_POSITION, 0x00, position) != HAL_OK) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	f246 027a 	movw	r2, #24698	@ 0x607a
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7ff fc26 	bl	8000dee <CANopen_SDO_Write32>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <Motor_SetTargetPosition+0x30>
    Debug_Print(huart, "Set Position Failed\r\n");
 80015a8:	4906      	ldr	r1, [pc, #24]	@ (80015c4 <Motor_SetTargetPosition+0x40>)
 80015aa:	68b8      	ldr	r0, [r7, #8]
 80015ac:	f7ff fb5c 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e003      	b.n	80015bc <Motor_SetTargetPosition+0x38>
  }
  HAL_Delay(50);
 80015b4:	2032      	movs	r0, #50	@ 0x32
 80015b6:	f000 fae1 	bl	8001b7c <HAL_Delay>
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	080060e0 	.word	0x080060e0

080015c8 <Motor_StartMotion>:

HAL_StatusTypeDef Motor_StartMotion(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  Debug_Print(huart, "Starting CiA 402 Transition\r\n");
 80015d2:	4941      	ldr	r1, [pc, #260]	@ (80016d8 <Motor_StartMotion+0x110>)
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7ff fb47 	bl	8000c68 <Debug_Print>
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x0006) != HAL_OK) {
 80015da:	2306      	movs	r3, #6
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2300      	movs	r3, #0
 80015e0:	f246 0240 	movw	r2, #24640	@ 0x6040
 80015e4:	6839      	ldr	r1, [r7, #0]
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fbcf 	bl	8000d8a <CANopen_SDO_Write16>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <Motor_StartMotion+0x36>
    Debug_Print(huart, "Switch On Failed\r\n");
 80015f2:	493a      	ldr	r1, [pc, #232]	@ (80016dc <Motor_StartMotion+0x114>)
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff fb37 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e067      	b.n	80016ce <Motor_StartMotion+0x106>
  }
  HAL_Delay(100);
 80015fe:	2064      	movs	r0, #100	@ 0x64
 8001600:	f000 fabc 	bl	8001b7c <HAL_Delay>
  uint16_t status;
  if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 8001604:	f107 030e 	add.w	r3, r7, #14
 8001608:	461a      	mov	r2, r3
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd5b 	bl	80010c8 <Motor_CheckStatus>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <Motor_StartMotion+0x54>
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e058      	b.n	80016ce <Motor_StartMotion+0x106>
  }
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x0007) != HAL_OK) {
 800161c:	2307      	movs	r3, #7
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	f246 0240 	movw	r2, #24640	@ 0x6040
 8001626:	6839      	ldr	r1, [r7, #0]
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fbae 	bl	8000d8a <CANopen_SDO_Write16>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <Motor_StartMotion+0x78>
    Debug_Print(huart, "Switched On Failed\r\n");
 8001634:	492a      	ldr	r1, [pc, #168]	@ (80016e0 <Motor_StartMotion+0x118>)
 8001636:	6838      	ldr	r0, [r7, #0]
 8001638:	f7ff fb16 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e046      	b.n	80016ce <Motor_StartMotion+0x106>
  }
  HAL_Delay(100);
 8001640:	2064      	movs	r0, #100	@ 0x64
 8001642:	f000 fa9b 	bl	8001b7c <HAL_Delay>
  if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 8001646:	f107 030e 	add.w	r3, r7, #14
 800164a:	461a      	mov	r2, r3
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fd3a 	bl	80010c8 <Motor_CheckStatus>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <Motor_StartMotion+0x96>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e037      	b.n	80016ce <Motor_StartMotion+0x106>
  }
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x000F) != HAL_OK) {
 800165e:	230f      	movs	r3, #15
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	f246 0240 	movw	r2, #24640	@ 0x6040
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fb8d 	bl	8000d8a <CANopen_SDO_Write16>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <Motor_StartMotion+0xba>
    Debug_Print(huart, "Enable Operation Failed\r\n");
 8001676:	491b      	ldr	r1, [pc, #108]	@ (80016e4 <Motor_StartMotion+0x11c>)
 8001678:	6838      	ldr	r0, [r7, #0]
 800167a:	f7ff faf5 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e025      	b.n	80016ce <Motor_StartMotion+0x106>
  }
  HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f000 fa7a 	bl	8001b7c <HAL_Delay>
  if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 8001688:	f107 030e 	add.w	r3, r7, #14
 800168c:	461a      	mov	r2, r3
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fd19 	bl	80010c8 <Motor_CheckStatus>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <Motor_StartMotion+0xd8>
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e016      	b.n	80016ce <Motor_StartMotion+0x106>
  }
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x001F) != HAL_OK) {
 80016a0:	231f      	movs	r3, #31
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	f246 0240 	movw	r2, #24640	@ 0x6040
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fb6c 	bl	8000d8a <CANopen_SDO_Write16>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <Motor_StartMotion+0xfc>
    Debug_Print(huart, "Start Motion Failed\r\n");
 80016b8:	490b      	ldr	r1, [pc, #44]	@ (80016e8 <Motor_StartMotion+0x120>)
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f7ff fad4 	bl	8000c68 <Debug_Print>
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e004      	b.n	80016ce <Motor_StartMotion+0x106>
  }
  Debug_Print(huart, "Motion Command Sent\r\n");
 80016c4:	4909      	ldr	r1, [pc, #36]	@ (80016ec <Motor_StartMotion+0x124>)
 80016c6:	6838      	ldr	r0, [r7, #0]
 80016c8:	f7ff face 	bl	8000c68 <Debug_Print>
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	080060f8 	.word	0x080060f8
 80016dc:	08006118 	.word	0x08006118
 80016e0:	0800612c 	.word	0x0800612c
 80016e4:	08006144 	.word	0x08006144
 80016e8:	08006160 	.word	0x08006160
 80016ec:	08006178 	.word	0x08006178

080016f0 <Motor_PollMotion>:

HAL_StatusTypeDef Motor_PollMotion(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint16_t status;
  int32_t position;
  do {
    if (Motor_CheckStatus(hcan, huart, &status) != HAL_OK) {
 80016fa:	f107 030e 	add.w	r3, r7, #14
 80016fe:	461a      	mov	r2, r3
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fce0 	bl	80010c8 <Motor_CheckStatus>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <Motor_PollMotion+0x22>
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e014      	b.n	800173c <Motor_PollMotion+0x4c>
    }
    if (Motor_ReadPosition(hcan, huart, &position) != HAL_OK) {
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	461a      	mov	r2, r3
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fd92 	bl	8001244 <Motor_ReadPosition>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <Motor_PollMotion+0x3a>
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e008      	b.n	800173c <Motor_PollMotion+0x4c>
    }
    HAL_Delay(100);
 800172a:	2064      	movs	r0, #100	@ 0x64
 800172c:	f000 fa26 	bl	8001b7c <HAL_Delay>
  } while (!(status & 0x0400));  // Bit 10: Target reached
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0df      	beq.n	80016fa <Motor_PollMotion+0xa>
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <Motor_Stop>:

HAL_StatusTypeDef Motor_Stop(CAN_HandleTypeDef *hcan, UART_HandleTypeDef *huart) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af02      	add	r7, sp, #8
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x0002) != HAL_OK) {
 800174e:	2302      	movs	r3, #2
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	f246 0240 	movw	r2, #24640	@ 0x6040
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fb15 	bl	8000d8a <CANopen_SDO_Write16>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <Motor_Stop+0x2e>
    Debug_Print(huart, "Quick Stop Failed\r\n");
 8001766:	4912      	ldr	r1, [pc, #72]	@ (80017b0 <Motor_Stop+0x6c>)
 8001768:	6838      	ldr	r0, [r7, #0]
 800176a:	f7ff fa7d 	bl	8000c68 <Debug_Print>
    return HAL_OK; // Non-critical
 800176e:	2300      	movs	r3, #0
 8001770:	e019      	b.n	80017a6 <Motor_Stop+0x62>
  }
  HAL_Delay(200);
 8001772:	20c8      	movs	r0, #200	@ 0xc8
 8001774:	f000 fa02 	bl	8001b7c <HAL_Delay>
  if (CANopen_SDO_Write16(hcan,huart, OD_CONTROLWORD, 0x00, 0x0000) != HAL_OK) {
 8001778:	2300      	movs	r3, #0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	f246 0240 	movw	r2, #24640	@ 0x6040
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fb00 	bl	8000d8a <CANopen_SDO_Write16>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <Motor_Stop+0x58>
    Debug_Print(huart, "Disable Voltage Failed\r\n");
 8001790:	4908      	ldr	r1, [pc, #32]	@ (80017b4 <Motor_Stop+0x70>)
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f7ff fa68 	bl	8000c68 <Debug_Print>
    return HAL_OK; // Non-critical
 8001798:	2300      	movs	r3, #0
 800179a:	e004      	b.n	80017a6 <Motor_Stop+0x62>
  }
  Debug_Print(huart, "Motion Complete\r\n");
 800179c:	4906      	ldr	r1, [pc, #24]	@ (80017b8 <Motor_Stop+0x74>)
 800179e:	6838      	ldr	r0, [r7, #0]
 80017a0:	f7ff fa62 	bl	8000c68 <Debug_Print>
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	08006190 	.word	0x08006190
 80017b4:	08005f20 	.word	0x08005f20
 80017b8:	080061a4 	.word	0x080061a4

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_MspInit+0x44>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <HAL_MspInit+0x44>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_MspInit+0x44>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_MspInit+0x44>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <HAL_MspInit+0x44>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_MspInit+0x44>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <HAL_CAN_MspInit+0x7c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d127      	bne.n	8001876 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <HAL_CAN_MspInit+0x80>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a16      	ldr	r2, [pc, #88]	@ (8001884 <HAL_CAN_MspInit+0x80>)
 800182c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <HAL_CAN_MspInit+0x80>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_CAN_MspInit+0x80>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a10      	ldr	r2, [pc, #64]	@ (8001884 <HAL_CAN_MspInit+0x80>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <HAL_CAN_MspInit+0x80>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001856:	2303      	movs	r3, #3
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001866:	2309      	movs	r3, #9
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <HAL_CAN_MspInit+0x84>)
 8001872:	f000 ff8b 	bl	800278c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	@ 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40006400 	.word	0x40006400
 8001884:	40023800 	.word	0x40023800
 8001888:	40020c00 	.word	0x40020c00

0800188c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b0aa      	sub	sp, #168	@ 0xa8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2284      	movs	r2, #132	@ 0x84
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fdeb 	bl	8005488 <memset>
  if(huart->Instance==USART3)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a26      	ldr	r2, [pc, #152]	@ (8001950 <HAL_UART_MspInit+0xc4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d144      	bne.n	8001946 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fe30 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018d6:	f7ff f9ad 	bl	8000c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018da:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <HAL_UART_MspInit+0xc8>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <HAL_UART_MspInit+0xc8>)
 80018e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <HAL_UART_MspInit+0xc8>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <HAL_UART_MspInit+0xc8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a17      	ldr	r2, [pc, #92]	@ (8001954 <HAL_UART_MspInit+0xc8>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_UART_MspInit+0xc8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800190a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800190e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001924:	2307      	movs	r3, #7
 8001926:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800192e:	4619      	mov	r1, r3
 8001930:	4809      	ldr	r0, [pc, #36]	@ (8001958 <HAL_UART_MspInit+0xcc>)
 8001932:	f000 ff2b 	bl	800278c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2027      	movs	r0, #39	@ 0x27
 800193c:	f000 fe5d 	bl	80025fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001940:	2027      	movs	r0, #39	@ 0x27
 8001942:	f000 fe76 	bl	8002632 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001946:	bf00      	nop
 8001948:	37a8      	adds	r7, #168	@ 0xa8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40004800 	.word	0x40004800
 8001954:	40023800 	.word	0x40023800
 8001958:	40020c00 	.word	0x40020c00

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <NMI_Handler+0x4>

08001964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <UsageFault_Handler+0x4>

08001984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b2:	f000 f8c3 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <USART3_IRQHandler+0x10>)
 80019c2:	f002 fac1 	bl	8003f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000a4 	.word	0x200000a4

080019d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80019d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019d8:	f001 f8b8 	bl	8002b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f003 fd42 	bl	8005498 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20050000 	.word	0x20050000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	20000158 	.word	0x20000158
 8001a48:	200002a8 	.word	0x200002a8

08001a4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <SystemInit+0x20>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <SystemInit+0x20>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a74:	f7ff ffea 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a78:	480c      	ldr	r0, [pc, #48]	@ (8001aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a7a:	490d      	ldr	r1, [pc, #52]	@ (8001ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a90:	4c0a      	ldr	r4, [pc, #40]	@ (8001abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f003 fd01 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa2:	f7fe fd85 	bl	80005b0 <main>
  bx  lr    
 8001aa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ab4:	08006314 	.word	0x08006314
  ldr r2, =_sbss
 8001ab8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001abc:	200002a8 	.word	0x200002a8

08001ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC_IRQHandler>

08001ac2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	f000 fd8c 	bl	80025e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f000 f805 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad2:	f7ff fe73 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fda7 	bl	800264e <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f000 fd6f 	bl	80025fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	@ (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000004 	.word	0x20000004
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	20000008 	.word	0x20000008

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c
 8001b60:	2000015c 	.word	0x2000015c

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000015c 	.word	0x2000015c

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0ed      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fe0e 	bl	8001804 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf8:	f7ff ffb4 	bl	8001b64 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bfe:	e012      	b.n	8001c26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c00:	f7ff ffb0 	bl	8001b64 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	d90b      	bls.n	8001c26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0c5      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0e5      	beq.n	8001c00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0202 	bic.w	r2, r2, #2
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c44:	f7ff ff8e 	bl	8001b64 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c4a:	e012      	b.n	8001c72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c4c:	f7ff ff8a 	bl	8001b64 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d90b      	bls.n	8001c72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2205      	movs	r2, #5
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e09f      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e5      	bne.n	8001c4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7e1b      	ldrb	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e007      	b.n	8001caa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7e5b      	ldrb	r3, [r3, #25]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e007      	b.n	8001cd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e9b      	ldrb	r3, [r3, #26]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d108      	bne.n	8001cee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0220 	bic.w	r2, r2, #32
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7edb      	ldrb	r3, [r3, #27]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d108      	bne.n	8001d18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0210 	bic.w	r2, r2, #16
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0210 	orr.w	r2, r2, #16
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7f1b      	ldrb	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d108      	bne.n	8001d42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0208 	orr.w	r2, r2, #8
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e007      	b.n	8001d52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0208 	bic.w	r2, r2, #8
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7f5b      	ldrb	r3, [r3, #29]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0204 	orr.w	r2, r2, #4
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e007      	b.n	8001d7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0204 	bic.w	r2, r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	ea42 0103 	orr.w	r1, r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dcc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d003      	beq.n	8001ddc <HAL_CAN_ConfigFilter+0x20>
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	f040 80be 	bne.w	8001f58 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ddc:	4b65      	ldr	r3, [pc, #404]	@ (8001f74 <HAL_CAN_ConfigFilter+0x1b8>)
 8001dde:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001df6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d123      	bne.n	8001e86 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	401a      	ands	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	3248      	adds	r2, #72	@ 0x48
 8001e66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	3348      	adds	r3, #72	@ 0x48
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d122      	bne.n	8001ed4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	3248      	adds	r2, #72	@ 0x48
 8001eb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ec8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eca:	6939      	ldr	r1, [r7, #16]
 8001ecc:	3348      	adds	r3, #72	@ 0x48
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001eee:	e007      	b.n	8001f00 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001f1a:	e007      	b.n	8001f2c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f4a:	f023 0201 	bic.w	r2, r3, #1
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e006      	b.n	8001f66 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
  }
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40006400 	.word	0x40006400

08001f78 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d12e      	bne.n	8001fea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff fdde 	bl	8001b64 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001faa:	e012      	b.n	8001fd2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fac:	f7ff fdda 	bl	8001b64 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b0a      	cmp	r3, #10
 8001fb8:	d90b      	bls.n	8001fd2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2205      	movs	r2, #5
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e012      	b.n	8001ff8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e5      	bne.n	8001fac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e006      	b.n	8001ff8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
  }
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002014:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d003      	beq.n	800202c <HAL_CAN_AddTxMessage+0x2c>
 8002024:	7ffb      	ldrb	r3, [r7, #31]
 8002026:	2b02      	cmp	r3, #2
 8002028:	f040 80ad 	bne.w	8002186 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10a      	bne.n	800204c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8095 	beq.w	8002176 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	0e1b      	lsrs	r3, r3, #24
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002056:	2201      	movs	r2, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10d      	bne.n	8002084 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	6809      	ldr	r1, [r1, #0]
 8002076:	431a      	orrs	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3318      	adds	r3, #24
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	440b      	add	r3, r1
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e00f      	b.n	80020a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800208e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002098:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3318      	adds	r3, #24
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	440b      	add	r3, r1
 80020a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3318      	adds	r3, #24
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	440b      	add	r3, r1
 80020b4:	3304      	adds	r3, #4
 80020b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	7d1b      	ldrb	r3, [r3, #20]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d111      	bne.n	80020e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3318      	adds	r3, #24
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	4413      	add	r3, r2
 80020cc:	3304      	adds	r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	6811      	ldr	r1, [r2, #0]
 80020d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3318      	adds	r3, #24
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	440b      	add	r3, r1
 80020e0:	3304      	adds	r3, #4
 80020e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3307      	adds	r3, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	061a      	lsls	r2, r3, #24
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3306      	adds	r3, #6
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3305      	adds	r3, #5
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	4313      	orrs	r3, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	3204      	adds	r2, #4
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	4610      	mov	r0, r2
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	6811      	ldr	r1, [r2, #0]
 800210c:	ea43 0200 	orr.w	r2, r3, r0
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	440b      	add	r3, r1
 8002116:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800211a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3303      	adds	r3, #3
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	061a      	lsls	r2, r3, #24
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3302      	adds	r3, #2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3301      	adds	r3, #1
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	4313      	orrs	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	4610      	mov	r0, r2
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	6811      	ldr	r1, [r2, #0]
 8002142:	ea43 0200 	orr.w	r2, r3, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	440b      	add	r3, r1
 800214c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002150:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3318      	adds	r3, #24
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	6811      	ldr	r1, [r2, #0]
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3318      	adds	r3, #24
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	440b      	add	r3, r1
 8002170:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e00e      	b.n	8002194 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e006      	b.n	8002194 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
  }
}
 8002194:	4618      	mov	r0, r3
 8002196:	3724      	adds	r7, #36	@ 0x24
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80021b6:	7afb      	ldrb	r3, [r7, #11]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d002      	beq.n	80021c2 <HAL_CAN_IsTxMessagePending+0x22>
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d10b      	bne.n	80021da <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	069b      	lsls	r3, r3, #26
 80021cc:	401a      	ands	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	069b      	lsls	r3, r3, #26
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d001      	beq.n	80021da <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80021d6:	2301      	movs	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d003      	beq.n	800220c <HAL_CAN_GetRxMessage+0x24>
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b02      	cmp	r3, #2
 8002208:	f040 8103 	bne.w	8002412 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10e      	bne.n	8002230 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d116      	bne.n	800224e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0f7      	b.n	8002420 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0e8      	b.n	8002420 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	331b      	adds	r3, #27
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	4413      	add	r3, r2
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0204 	and.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	331b      	adds	r3, #27
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0d5b      	lsrs	r3, r3, #21
 800227c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e00b      	b.n	800229e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	331b      	adds	r3, #27
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	331b      	adds	r3, #27
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0202 	and.w	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	331b      	adds	r3, #27
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2208      	movs	r2, #8
 80022d0:	611a      	str	r2, [r3, #16]
 80022d2:	e00b      	b.n	80022ec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	331b      	adds	r3, #27
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	331b      	adds	r3, #27
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	331b      	adds	r3, #27
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	4413      	add	r3, r2
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4413      	add	r3, r2
 8002326:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	4413      	add	r3, r2
 800233c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0a1a      	lsrs	r2, r3, #8
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	4413      	add	r3, r2
 8002356:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0c1a      	lsrs	r2, r3, #16
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	3302      	adds	r3, #2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	4413      	add	r3, r2
 8002370:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0e1a      	lsrs	r2, r3, #24
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	3303      	adds	r3, #3
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3304      	adds	r3, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0a1a      	lsrs	r2, r3, #8
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	3305      	adds	r3, #5
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0c1a      	lsrs	r2, r3, #16
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3306      	adds	r3, #6
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e1a      	lsrs	r2, r3, #24
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3307      	adds	r3, #7
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d108      	bne.n	80023fe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0220 	orr.w	r2, r2, #32
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	e007      	b.n	800240e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0220 	orr.w	r2, r2, #32
 800240c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e006      	b.n	8002420 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <__NVIC_SetPriorityGrouping+0x40>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 800246e:	4313      	orrs	r3, r2
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <__NVIC_SetPriorityGrouping+0x40>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	05fa0000 	.word	0x05fa0000

0800248c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002490:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0307 	and.w	r3, r3, #7
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db0b      	blt.n	80024d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	4907      	ldr	r1, [pc, #28]	@ (80024e0 <__NVIC_EnableIRQ+0x38>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2001      	movs	r0, #1
 80024ca:	fa00 f202 	lsl.w	r2, r0, r2
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e100 	.word	0xe000e100

080024e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db0a      	blt.n	800250e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	490c      	ldr	r1, [pc, #48]	@ (8002530 <__NVIC_SetPriority+0x4c>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	440b      	add	r3, r1
 8002508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800250c:	e00a      	b.n	8002524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4908      	ldr	r1, [pc, #32]	@ (8002534 <__NVIC_SetPriority+0x50>)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3b04      	subs	r3, #4
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	440b      	add	r3, r1
 8002522:	761a      	strb	r2, [r3, #24]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f1c3 0307 	rsb	r3, r3, #7
 8002552:	2b04      	cmp	r3, #4
 8002554:	bf28      	it	cs
 8002556:	2304      	movcs	r3, #4
 8002558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3304      	adds	r3, #4
 800255e:	2b06      	cmp	r3, #6
 8002560:	d902      	bls.n	8002568 <NVIC_EncodePriority+0x30>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3b03      	subs	r3, #3
 8002566:	e000      	b.n	800256a <NVIC_EncodePriority+0x32>
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	f04f 32ff 	mov.w	r2, #4294967295
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002580:	f04f 31ff 	mov.w	r1, #4294967295
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43d9      	mvns	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	4313      	orrs	r3, r2
         );
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	@ 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025b0:	d301      	bcc.n	80025b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00f      	b.n	80025d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b6:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <SysTick_Config+0x40>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025be:	210f      	movs	r1, #15
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
 80025c4:	f7ff ff8e 	bl	80024e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <SysTick_Config+0x40>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ce:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <SysTick_Config+0x40>)
 80025d0:	2207      	movs	r2, #7
 80025d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	e000e010 	.word	0xe000e010

080025e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff29 	bl	8002444 <__NVIC_SetPriorityGrouping>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800260c:	f7ff ff3e 	bl	800248c <__NVIC_GetPriorityGrouping>
 8002610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	6978      	ldr	r0, [r7, #20]
 8002618:	f7ff ff8e 	bl	8002538 <NVIC_EncodePriority>
 800261c:	4602      	mov	r2, r0
 800261e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff5d 	bl	80024e4 <__NVIC_SetPriority>
}
 800262a:	bf00      	nop
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff31 	bl	80024a8 <__NVIC_EnableIRQ>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffa2 	bl	80025a0 <SysTick_Config>
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff fa76 	bl	8001b64 <HAL_GetTick>
 8002678:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d008      	beq.n	8002698 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2280      	movs	r2, #128	@ 0x80
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e052      	b.n	800273e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0216 	bic.w	r2, r2, #22
 80026a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <HAL_DMA_Abort+0x62>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0208 	bic.w	r2, r2, #8
 80026d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e8:	e013      	b.n	8002712 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ea:	f7ff fa3b 	bl	8001b64 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d90c      	bls.n	8002712 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2203      	movs	r2, #3
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e015      	b.n	800273e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e4      	bne.n	80026ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002724:	223f      	movs	r2, #63	@ 0x3f
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d004      	beq.n	8002764 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2280      	movs	r2, #128	@ 0x80
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e00c      	b.n	800277e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2205      	movs	r2, #5
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	@ 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e175      	b.n	8002a98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8164 	bne.w	8002a92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x56>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80be 	beq.w	8002a92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b66      	ldr	r3, [pc, #408]	@ (8002ab0 <HAL_GPIO_Init+0x324>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	4a65      	ldr	r2, [pc, #404]	@ (8002ab0 <HAL_GPIO_Init+0x324>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002920:	6453      	str	r3, [r2, #68]	@ 0x44
 8002922:	4b63      	ldr	r3, [pc, #396]	@ (8002ab0 <HAL_GPIO_Init+0x324>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800292e:	4a61      	ldr	r2, [pc, #388]	@ (8002ab4 <HAL_GPIO_Init+0x328>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	220f      	movs	r2, #15
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a58      	ldr	r2, [pc, #352]	@ (8002ab8 <HAL_GPIO_Init+0x32c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d037      	beq.n	80029ca <HAL_GPIO_Init+0x23e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a57      	ldr	r2, [pc, #348]	@ (8002abc <HAL_GPIO_Init+0x330>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_GPIO_Init+0x23a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a56      	ldr	r2, [pc, #344]	@ (8002ac0 <HAL_GPIO_Init+0x334>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d02b      	beq.n	80029c2 <HAL_GPIO_Init+0x236>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a55      	ldr	r2, [pc, #340]	@ (8002ac4 <HAL_GPIO_Init+0x338>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d025      	beq.n	80029be <HAL_GPIO_Init+0x232>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a54      	ldr	r2, [pc, #336]	@ (8002ac8 <HAL_GPIO_Init+0x33c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01f      	beq.n	80029ba <HAL_GPIO_Init+0x22e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a53      	ldr	r2, [pc, #332]	@ (8002acc <HAL_GPIO_Init+0x340>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d019      	beq.n	80029b6 <HAL_GPIO_Init+0x22a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a52      	ldr	r2, [pc, #328]	@ (8002ad0 <HAL_GPIO_Init+0x344>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_GPIO_Init+0x226>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a51      	ldr	r2, [pc, #324]	@ (8002ad4 <HAL_GPIO_Init+0x348>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00d      	beq.n	80029ae <HAL_GPIO_Init+0x222>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a50      	ldr	r2, [pc, #320]	@ (8002ad8 <HAL_GPIO_Init+0x34c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x21e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4f      	ldr	r2, [pc, #316]	@ (8002adc <HAL_GPIO_Init+0x350>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_GPIO_Init+0x21a>
 80029a2:	2309      	movs	r3, #9
 80029a4:	e012      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029a6:	230a      	movs	r3, #10
 80029a8:	e010      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029aa:	2308      	movs	r3, #8
 80029ac:	e00e      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ae:	2307      	movs	r3, #7
 80029b0:	e00c      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029b2:	2306      	movs	r3, #6
 80029b4:	e00a      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029b6:	2305      	movs	r3, #5
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ba:	2304      	movs	r3, #4
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ca:	2300      	movs	r3, #0
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029dc:	4935      	ldr	r1, [pc, #212]	@ (8002ab4 <HAL_GPIO_Init+0x328>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0e:	4a34      	ldr	r2, [pc, #208]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a14:	4b32      	ldr	r3, [pc, #200]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a38:	4a29      	ldr	r2, [pc, #164]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f67f ae86 	bls.w	80027ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3724      	adds	r7, #36	@ 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020c00 	.word	0x40020c00
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40021400 	.word	0x40021400
 8002ad0:	40021800 	.word	0x40021800
 8002ad4:	40021c00 	.word	0x40021c00
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40022400 	.word	0x40022400
 8002ae0:	40013c00 	.word	0x40013c00

08002ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
 8002af0:	4613      	mov	r3, r2
 8002af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002af4:	787b      	ldrb	r3, [r7, #1]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b00:	e003      	b.n	8002b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	041a      	lsls	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	619a      	str	r2, [r3, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b28:	887a      	ldrh	r2, [r7, #2]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	041a      	lsls	r2, r3, #16
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43d9      	mvns	r1, r3
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	400b      	ands	r3, r1
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b62:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fff6 	bl	8000b5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40007000 	.word	0x40007000

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e291      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc0:	4b96      	ldr	r3, [pc, #600]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d00c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bcc:	4b93      	ldr	r3, [pc, #588]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d112      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
 8002bd8:	4b90      	ldr	r3, [pc, #576]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	4b8d      	ldr	r3, [pc, #564]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d06c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x130>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d168      	bne.n	8002ccc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e26b      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x7a>
 8002c08:	4b84      	ldr	r3, [pc, #528]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a83      	ldr	r2, [pc, #524]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e02e      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x9c>
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7e      	ldr	r2, [pc, #504]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc0>
 8002c42:	4b76      	ldr	r3, [pc, #472]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a75      	ldr	r2, [pc, #468]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b73      	ldr	r3, [pc, #460]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a72      	ldr	r2, [pc, #456]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6e      	ldr	r2, [pc, #440]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b6c      	ldr	r3, [pc, #432]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6b      	ldr	r2, [pc, #428]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe ff72 	bl	8001b64 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe ff6e 	bl	8001b64 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	@ 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e21f      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b61      	ldr	r3, [pc, #388]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe8>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe ff5e 	bl	8001b64 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe ff5a 	bl	8001b64 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	@ 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e20b      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b57      	ldr	r3, [pc, #348]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x110>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d069      	beq.n	8002dae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cda:	4b50      	ldr	r3, [pc, #320]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x190>
 8002cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e1df      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	493d      	ldr	r1, [pc, #244]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	e040      	b.n	8002dae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	4b39      	ldr	r3, [pc, #228]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a38      	ldr	r2, [pc, #224]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe ff10 	bl	8001b64 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe ff0c 	bl	8001b64 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1bd      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	4b30      	ldr	r3, [pc, #192]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b2d      	ldr	r3, [pc, #180]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4929      	ldr	r1, [pc, #164]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
 8002d7a:	e018      	b.n	8002dae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7c:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a26      	ldr	r2, [pc, #152]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe feec 	bl	8001b64 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fee8 	bl	8001b64 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e199      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d038      	beq.n	8002e2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b16      	ldr	r3, [pc, #88]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc6:	4a15      	ldr	r2, [pc, #84]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe fec9 	bl	8001b64 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fec5 	bl	8001b64 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e176      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x23a>
 8002df4:	e01a      	b.n	8002e2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfa:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe feaf 	bl	8001b64 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe feab 	bl	8001b64 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d903      	bls.n	8002e20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e15c      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
 8002e1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b91      	ldr	r3, [pc, #580]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a4 	beq.w	8002f82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b88      	ldr	r3, [pc, #544]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4a87      	ldr	r2, [pc, #540]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e52:	4b85      	ldr	r3, [pc, #532]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e62:	4b82      	ldr	r3, [pc, #520]	@ (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7e      	ldr	r2, [pc, #504]	@ (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe fe73 	bl	8001b64 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fe fe6f 	bl	8001b64 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	@ 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e120      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e94:	4b75      	ldr	r3, [pc, #468]	@ (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x31a>
 8002ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eac:	4a6e      	ldr	r2, [pc, #440]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb4:	e02d      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x33c>
 8002ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec2:	4a69      	ldr	r2, [pc, #420]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eca:	4b67      	ldr	r3, [pc, #412]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ece:	4a66      	ldr	r2, [pc, #408]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed6:	e01c      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x35e>
 8002ee0:	4b61      	ldr	r3, [pc, #388]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee4:	4a60      	ldr	r2, [pc, #384]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eec:	4b5e      	ldr	r3, [pc, #376]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002efa:	4b5b      	ldr	r3, [pc, #364]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	4a5a      	ldr	r2, [pc, #360]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f06:	4b58      	ldr	r3, [pc, #352]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0a:	4a57      	ldr	r2, [pc, #348]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d015      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fe23 	bl	8001b64 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe fe1f 	bl	8001b64 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0ce      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b4b      	ldr	r3, [pc, #300]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCC_OscConfig+0x386>
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fe fe0d 	bl	8001b64 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe fe09 	bl	8001b64 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0b8      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	4b40      	ldr	r3, [pc, #256]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b3c      	ldr	r3, [pc, #240]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80a4 	beq.w	80030d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	4b36      	ldr	r3, [pc, #216]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d06b      	beq.n	8003070 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d149      	bne.n	8003034 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a30      	ldr	r2, [pc, #192]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fdda 	bl	8001b64 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fdd6 	bl	8001b64 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e087      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	019b      	lsls	r3, r3, #6
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	3b01      	subs	r3, #1
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ffe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a18      	ldr	r2, [pc, #96]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe fdaa 	bl	8001b64 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fda6 	bl	8001b64 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e057      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x478>
 8003032:	e04f      	b.n	80030d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0b      	ldr	r2, [pc, #44]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 800303a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800303e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fd90 	bl	8001b64 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe fd8c 	bl	8001b64 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e03d      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <HAL_RCC_OscConfig+0x4cc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x4ac>
 8003066:	e035      	b.n	80030d4 <HAL_RCC_OscConfig+0x538>
 8003068:	40023800 	.word	0x40023800
 800306c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003070:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <HAL_RCC_OscConfig+0x544>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d028      	beq.n	80030d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d121      	bne.n	80030d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d11a      	bne.n	80030d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d111      	bne.n	80030d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	3b01      	subs	r3, #1
 80030ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800

080030e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0d0      	b.n	800329e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b67      	ldr	r3, [pc, #412]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 020f 	bic.w	r2, r3, #15
 8003112:	4965      	ldr	r1, [pc, #404]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800314e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003166:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d040      	beq.n	8003208 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d115      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b41      	ldr	r3, [pc, #260]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e073      	b.n	800329e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06b      	b.n	800329e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b39      	ldr	r3, [pc, #228]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4936      	ldr	r1, [pc, #216]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d8:	f7fe fcc4 	bl	8001b64 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe fcc0 	bl	8001b64 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e053      	b.n	800329e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b27      	ldr	r3, [pc, #156]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d210      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 020f 	bic.w	r2, r3, #15
 800321e:	4922      	ldr	r1, [pc, #136]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x1cc>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1d4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fc20 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	080061b8 	.word	0x080061b8
 80032b4:	20000004 	.word	0x20000004
 80032b8:	20000008 	.word	0x20000008

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b094      	sub	sp, #80	@ 0x50
 80032c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c8:	2300      	movs	r3, #0
 80032ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032cc:	2300      	movs	r3, #0
 80032ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d4:	4b79      	ldr	r3, [pc, #484]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d00d      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x40>
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	f200 80e1 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ee:	e0db      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b73      	ldr	r3, [pc, #460]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032f4:	e0db      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b73      	ldr	r3, [pc, #460]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032fa:	e0d8      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4b6f      	ldr	r3, [pc, #444]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003304:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003306:	4b6d      	ldr	r3, [pc, #436]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d063      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	2200      	movs	r2, #0
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800331c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003324:	633b      	str	r3, [r7, #48]	@ 0x30
 8003326:	2300      	movs	r3, #0
 8003328:	637b      	str	r3, [r7, #52]	@ 0x34
 800332a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003340:	0150      	lsls	r0, r2, #5
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4621      	mov	r1, r4
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	6139      	str	r1, [r7, #16]
 800334c:	4629      	mov	r1, r5
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003360:	4659      	mov	r1, fp
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800336a:	4651      	mov	r1, sl
 800336c:	018a      	lsls	r2, r1, #6
 800336e:	4651      	mov	r1, sl
 8003370:	ebb2 0801 	subs.w	r8, r2, r1
 8003374:	4659      	mov	r1, fp
 8003376:	eb63 0901 	sbc.w	r9, r3, r1
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800338a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338e:	4690      	mov	r8, r2
 8003390:	4699      	mov	r9, r3
 8003392:	4623      	mov	r3, r4
 8003394:	eb18 0303 	adds.w	r3, r8, r3
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	462b      	mov	r3, r5
 800339c:	eb49 0303 	adc.w	r3, r9, r3
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ae:	4629      	mov	r1, r5
 80033b0:	024b      	lsls	r3, r1, #9
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b8:	4621      	mov	r1, r4
 80033ba:	024a      	lsls	r2, r1, #9
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033cc:	f7fc ff78 	bl	80002c0 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d8:	e058      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033da:	4b38      	ldr	r3, [pc, #224]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	2200      	movs	r2, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	4611      	mov	r1, r2
 80033e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033f4:	4642      	mov	r2, r8
 80033f6:	464b      	mov	r3, r9
 80033f8:	f04f 0000 	mov.w	r0, #0
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	0159      	lsls	r1, r3, #5
 8003402:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003406:	0150      	lsls	r0, r2, #5
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4641      	mov	r1, r8
 800340e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003412:	4649      	mov	r1, r9
 8003414:	eb63 0b01 	sbc.w	fp, r3, r1
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003424:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003428:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800342c:	ebb2 040a 	subs.w	r4, r2, sl
 8003430:	eb63 050b 	sbc.w	r5, r3, fp
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	00eb      	lsls	r3, r5, #3
 800343e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003442:	00e2      	lsls	r2, r4, #3
 8003444:	4614      	mov	r4, r2
 8003446:	461d      	mov	r5, r3
 8003448:	4643      	mov	r3, r8
 800344a:	18e3      	adds	r3, r4, r3
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	464b      	mov	r3, r9
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003462:	4629      	mov	r1, r5
 8003464:	028b      	lsls	r3, r1, #10
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800346c:	4621      	mov	r1, r4
 800346e:	028a      	lsls	r2, r1, #10
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	61fa      	str	r2, [r7, #28]
 800347c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003480:	f7fc ff1e 	bl	80002c0 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800348c:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800349c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800349e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3750      	adds	r7, #80	@ 0x50
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	007a1200 	.word	0x007a1200

080034c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034e4:	f7ff fff0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	@ (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	080061c8 	.word	0x080061c8

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800350c:	f7ff ffdc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0b5b      	lsrs	r3, r3, #13
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	@ (800352c <HAL_RCC_GetPCLK2Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	080061c8 	.word	0x080061c8

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003558:	4b69      	ldr	r3, [pc, #420]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a68      	ldr	r2, [pc, #416]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003562:	6093      	str	r3, [r2, #8]
 8003564:	4b66      	ldr	r3, [pc, #408]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356c:	4964      	ldr	r1, [pc, #400]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800357a:	2301      	movs	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d017      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800358a:	4b5d      	ldr	r3, [pc, #372]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003590:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	4959      	ldr	r1, [pc, #356]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035a8:	d101      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d017      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	494a      	ldr	r1, [pc, #296]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e4:	d101      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 808b 	beq.w	800372a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003614:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	4a39      	ldr	r2, [pc, #228]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003620:	4b37      	ldr	r3, [pc, #220]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800362c:	4b35      	ldr	r3, [pc, #212]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a34      	ldr	r2, [pc, #208]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fe fa94 	bl	8001b64 <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fe fa90 	bl	8001b64 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	@ 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e357      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003652:	4b2c      	ldr	r3, [pc, #176]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800365e:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003666:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d035      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	429a      	cmp	r2, r3
 800367a:	d02e      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800367c:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003684:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003686:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368a:	4a1d      	ldr	r2, [pc, #116]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003690:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800369e:	4a18      	ldr	r2, [pc, #96]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036a4:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d114      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fa58 	bl	8001b64 <HAL_GetTick>
 80036b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fe fa54 	bl	8001b64 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e319      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0ee      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e6:	d111      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036e8:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036f4:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036f6:	400b      	ands	r3, r1
 80036f8:	4901      	ldr	r1, [pc, #4]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
 80036fe:	e00b      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003700:	40023800 	.word	0x40023800
 8003704:	40007000 	.word	0x40007000
 8003708:	0ffffcff 	.word	0x0ffffcff
 800370c:	4baa      	ldr	r3, [pc, #680]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4aa9      	ldr	r2, [pc, #676]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003712:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	4ba7      	ldr	r3, [pc, #668]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003724:	49a4      	ldr	r1, [pc, #656]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	4313      	orrs	r3, r2
 8003728:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003736:	4ba0      	ldr	r3, [pc, #640]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800373c:	4a9e      	ldr	r2, [pc, #632]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003742:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003746:	4b9c      	ldr	r3, [pc, #624]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003748:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003750:	4999      	ldr	r1, [pc, #612]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003764:	4b94      	ldr	r3, [pc, #592]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003772:	4991      	ldr	r1, [pc, #580]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003786:	4b8c      	ldr	r3, [pc, #560]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003794:	4988      	ldr	r1, [pc, #544]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037a8:	4b83      	ldr	r3, [pc, #524]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b6:	4980      	ldr	r1, [pc, #512]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037ca:	4b7b      	ldr	r3, [pc, #492]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	4977      	ldr	r1, [pc, #476]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ec:	4b72      	ldr	r3, [pc, #456]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	496f      	ldr	r1, [pc, #444]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800380e:	4b6a      	ldr	r3, [pc, #424]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	f023 020c 	bic.w	r2, r3, #12
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381c:	4966      	ldr	r1, [pc, #408]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003830:	4b61      	ldr	r3, [pc, #388]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383e:	495e      	ldr	r1, [pc, #376]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003852:	4b59      	ldr	r3, [pc, #356]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003858:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003860:	4955      	ldr	r1, [pc, #340]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003874:	4b50      	ldr	r3, [pc, #320]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	494d      	ldr	r1, [pc, #308]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003896:	4b48      	ldr	r3, [pc, #288]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a4:	4944      	ldr	r1, [pc, #272]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038b8:	4b3f      	ldr	r3, [pc, #252]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	493c      	ldr	r1, [pc, #240]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038da:	4b37      	ldr	r3, [pc, #220]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	4933      	ldr	r1, [pc, #204]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038fc:	4b2e      	ldr	r3, [pc, #184]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003902:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390a:	492b      	ldr	r1, [pc, #172]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d011      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800391e:	4b26      	ldr	r3, [pc, #152]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003924:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800392c:	4922      	ldr	r1, [pc, #136]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003938:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800393c:	d101      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003964:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396c:	4912      	ldr	r1, [pc, #72]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003980:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003986:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003990:	4909      	ldr	r1, [pc, #36]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d006      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80d9 	beq.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039ac:	4b02      	ldr	r3, [pc, #8]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a01      	ldr	r2, [pc, #4]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039b6:	e001      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039b8:	40023800 	.word	0x40023800
 80039bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039be:	f7fe f8d1 	bl	8001b64 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039c6:	f7fe f8cd 	bl	8001b64 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b64      	cmp	r3, #100	@ 0x64
 80039d2:	d901      	bls.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e194      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d021      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11d      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039f8:	4b64      	ldr	r3, [pc, #400]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a06:	4b61      	ldr	r3, [pc, #388]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a0c:	0e1b      	lsrs	r3, r3, #24
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	019a      	lsls	r2, r3, #6
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	061b      	lsls	r3, r3, #24
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	071b      	lsls	r3, r3, #28
 8003a2c:	4957      	ldr	r1, [pc, #348]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d02e      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a5e:	d129      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a60:	4b4a      	ldr	r3, [pc, #296]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a6e:	4b47      	ldr	r3, [pc, #284]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a74:	0f1b      	lsrs	r3, r3, #28
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	019a      	lsls	r2, r3, #6
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	071b      	lsls	r3, r3, #28
 8003a94:	493d      	ldr	r1, [pc, #244]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aa2:	f023 021f 	bic.w	r2, r3, #31
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	4937      	ldr	r1, [pc, #220]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01d      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ac0:	4b32      	ldr	r3, [pc, #200]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ac6:	0e1b      	lsrs	r3, r3, #24
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ace:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad4:	0f1b      	lsrs	r3, r3, #28
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	019a      	lsls	r2, r3, #6
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	431a      	orrs	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	071b      	lsls	r3, r3, #28
 8003af4:	4925      	ldr	r1, [pc, #148]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d011      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	019a      	lsls	r2, r3, #6
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	041b      	lsls	r3, r3, #16
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	071b      	lsls	r3, r3, #28
 8003b24:	4919      	ldr	r1, [pc, #100]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b2c:	4b17      	ldr	r3, [pc, #92]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a16      	ldr	r2, [pc, #88]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b38:	f7fe f814 	bl	8001b64 <HAL_GetTick>
 8003b3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b40:	f7fe f810 	bl	8001b64 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	@ 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0d7      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b52:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	f040 80cd 	bne.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b72:	f7fd fff7 	bl	8001b64 <HAL_GetTick>
 8003b76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b7a:	f7fd fff3 	bl	8001b64 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b64      	cmp	r3, #100	@ 0x64
 8003b86:	d903      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0ba      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b90:	4b5e      	ldr	r3, [pc, #376]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b9c:	d0ed      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d02e      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d12a      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bc6:	4b51      	ldr	r3, [pc, #324]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	0f1b      	lsrs	r3, r3, #28
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	019a      	lsls	r2, r3, #6
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	071b      	lsls	r3, r3, #28
 8003bfa:	4944      	ldr	r1, [pc, #272]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c02:	4b42      	ldr	r3, [pc, #264]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	493d      	ldr	r1, [pc, #244]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d022      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c30:	d11d      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c32:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	0e1b      	lsrs	r3, r3, #24
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c40:	4b32      	ldr	r3, [pc, #200]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c46:	0f1b      	lsrs	r3, r3, #28
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	019a      	lsls	r2, r3, #6
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	061b      	lsls	r3, r3, #24
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	4929      	ldr	r1, [pc, #164]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d028      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c7a:	4b24      	ldr	r3, [pc, #144]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	0e1b      	lsrs	r3, r3, #24
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c88:	4b20      	ldr	r3, [pc, #128]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	0c1b      	lsrs	r3, r3, #16
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	019a      	lsls	r2, r3, #6
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	4917      	ldr	r1, [pc, #92]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	4911      	ldr	r1, [pc, #68]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd8:	f7fd ff44 	bl	8001b64 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ce0:	f7fd ff40 	bl	8001b64 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	@ 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e007      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cfe:	d1ef      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e040      	b.n	8003da4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fdaa 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	@ 0x24
 8003d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fe66 	bl	8004a28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fbff 	bl	8004560 <UART_SetConfig>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e01b      	b.n	8003da4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fee5 	bl	8004b6c <UART_CheckIdleState>
 8003da2:	4603      	mov	r3, r0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	@ 0x28
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d177      	bne.n	8003eb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_UART_Transmit+0x24>
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e070      	b.n	8003eb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2221      	movs	r2, #33	@ 0x21
 8003de0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003de2:	f7fd febf 	bl	8001b64 <HAL_GetTick>
 8003de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e00:	d108      	bne.n	8003e14 <HAL_UART_Transmit+0x68>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e003      	b.n	8003e1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e1c:	e02f      	b.n	8003e7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2180      	movs	r1, #128	@ 0x80
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fef6 	bl	8004c1a <UART_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e03b      	b.n	8003eb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	3302      	adds	r3, #2
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	e007      	b.n	8003e6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1c9      	bne.n	8003e1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	2140      	movs	r1, #64	@ 0x40
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fec0 	bl	8004c1a <UART_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e005      	b.n	8003eb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e000      	b.n	8003eb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b08a      	sub	sp, #40	@ 0x28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d132      	bne.n	8003f3c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_UART_Receive_IT+0x24>
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e02b      	b.n	8003f3e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d018      	beq.n	8003f2c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	613b      	str	r3, [r7, #16]
   return(result);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	69f9      	ldr	r1, [r7, #28]
 8003f1e:	6a3a      	ldr	r2, [r7, #32]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e6      	bne.n	8003efa <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fede 	bl	8004cf4 <UART_Start_Receive_IT>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	e000      	b.n	8003f3e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3728      	adds	r7, #40	@ 0x28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f76:	4013      	ands	r3, r2
 8003f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d115      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00f      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 82b1 	beq.w	8004508 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
      }
      return;
 8003fae:	e2ab      	b.n	8004508 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8117 	beq.w	80041e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003fc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003fca:	4b85      	ldr	r3, [pc, #532]	@ (80041e0 <HAL_UART_IRQHandler+0x298>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 810a 	beq.w	80041e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d011      	beq.n	8004004 <HAL_UART_IRQHandler+0xbc>
 8003fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d011      	beq.n	8004034 <HAL_UART_IRQHandler+0xec>
 8004010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2202      	movs	r2, #2
 8004022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402a:	f043 0204 	orr.w	r2, r3, #4
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d011      	beq.n	8004064 <HAL_UART_IRQHandler+0x11c>
 8004040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2204      	movs	r2, #4
 8004052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800405a:	f043 0202 	orr.w	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d017      	beq.n	80040a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800407c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004080:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2208      	movs	r2, #8
 800408e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004096:	f043 0208 	orr.w	r2, r3, #8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d012      	beq.n	80040d2 <HAL_UART_IRQHandler+0x18a>
 80040ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8217 	beq.w	800450c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800410c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	d005      	beq.n	800412a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800411e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004122:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04f      	beq.n	80041ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fea8 	bl	8004e80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d141      	bne.n	80041c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800415c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800416a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800416e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1d9      	bne.n	800413e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418e:	2b00      	cmp	r3, #0
 8004190:	d013      	beq.n	80041ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004196:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <HAL_UART_IRQHandler+0x29c>)
 8004198:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fad1 	bl	8002746 <HAL_DMA_Abort_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d017      	beq.n	80041da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041b4:	4610      	mov	r0, r2
 80041b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	e00f      	b.n	80041da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9ba 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	e00b      	b.n	80041da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9b6 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	e007      	b.n	80041da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f9b2 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80041d8:	e198      	b.n	800450c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041da:	bf00      	nop
    return;
 80041dc:	e196      	b.n	800450c <HAL_UART_IRQHandler+0x5c4>
 80041de:	bf00      	nop
 80041e0:	04000120 	.word	0x04000120
 80041e4:	08004f49 	.word	0x08004f49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	f040 8166 	bne.w	80044be <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 815f 	beq.w	80044be <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8158 	beq.w	80044be <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2210      	movs	r2, #16
 8004214:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004220:	2b40      	cmp	r3, #64	@ 0x40
 8004222:	f040 80d0 	bne.w	80043c6 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004232:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80ab 	beq.w	8004392 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004246:	429a      	cmp	r2, r3
 8004248:	f080 80a3 	bcs.w	8004392 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004252:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004260:	f000 8086 	beq.w	8004370 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004278:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800427c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800428e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004292:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800429a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1da      	bne.n	8004264 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e1      	bne.n	80042ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800430e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004310:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004314:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800431c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e3      	bne.n	80042ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800433e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004352:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004354:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004358:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e4      	bne.n	8004330 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f97b 	bl	8002666 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004382:	b29b      	uxth	r3, r3
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	b29b      	uxth	r3, r3
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8dc 	bl	8004548 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004390:	e0be      	b.n	8004510 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004398:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800439c:	429a      	cmp	r2, r3
 800439e:	f040 80b7 	bne.w	8004510 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ac:	f040 80b0 	bne.w	8004510 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043bc:	4619      	mov	r1, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8c2 	bl	8004548 <HAL_UARTEx_RxEventCallback>
      return;
 80043c4:	e0a4      	b.n	8004510 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8096 	beq.w	8004514 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 80043e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8091 	beq.w	8004514 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004414:	647b      	str	r3, [r7, #68]	@ 0x44
 8004416:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800441a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e4      	bne.n	80043f2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	623b      	str	r3, [r7, #32]
   return(result);
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3308      	adds	r3, #8
 8004448:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800444c:	633a      	str	r2, [r7, #48]	@ 0x30
 800444e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e3      	bne.n	8004428 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	60fb      	str	r3, [r7, #12]
   return(result);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f023 0310 	bic.w	r3, r3, #16
 8004488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	69b9      	ldr	r1, [r7, #24]
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	617b      	str	r3, [r7, #20]
   return(result);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e4      	bne.n	8004474 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f846 	bl	8004548 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044bc:	e02a      	b.n	8004514 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01c      	beq.n	8004518 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
    }
    return;
 80044e6:	e017      	b.n	8004518 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d012      	beq.n	800451a <HAL_UART_IRQHandler+0x5d2>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00c      	beq.n	800451a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fd33 	bl	8004f6c <UART_EndTransmit_IT>
    return;
 8004506:	e008      	b.n	800451a <HAL_UART_IRQHandler+0x5d2>
      return;
 8004508:	bf00      	nop
 800450a:	e006      	b.n	800451a <HAL_UART_IRQHandler+0x5d2>
    return;
 800450c:	bf00      	nop
 800450e:	e004      	b.n	800451a <HAL_UART_IRQHandler+0x5d2>
      return;
 8004510:	bf00      	nop
 8004512:	e002      	b.n	800451a <HAL_UART_IRQHandler+0x5d2>
      return;
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <HAL_UART_IRQHandler+0x5d2>
    return;
 8004518:	bf00      	nop
  }

}
 800451a:	37e8      	adds	r7, #232	@ 0xe8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4ba6      	ldr	r3, [pc, #664]	@ (8004824 <UART_SetConfig+0x2c4>)
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	6979      	ldr	r1, [r7, #20]
 8004594:	430b      	orrs	r3, r1
 8004596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a94      	ldr	r2, [pc, #592]	@ (8004828 <UART_SetConfig+0x2c8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d120      	bne.n	800461e <UART_SetConfig+0xbe>
 80045dc:	4b93      	ldr	r3, [pc, #588]	@ (800482c <UART_SetConfig+0x2cc>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d816      	bhi.n	8004618 <UART_SetConfig+0xb8>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <UART_SetConfig+0x90>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004601 	.word	0x08004601
 80045f4:	0800460d 	.word	0x0800460d
 80045f8:	08004607 	.word	0x08004607
 80045fc:	08004613 	.word	0x08004613
 8004600:	2301      	movs	r3, #1
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e150      	b.n	80048a8 <UART_SetConfig+0x348>
 8004606:	2302      	movs	r3, #2
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e14d      	b.n	80048a8 <UART_SetConfig+0x348>
 800460c:	2304      	movs	r3, #4
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e14a      	b.n	80048a8 <UART_SetConfig+0x348>
 8004612:	2308      	movs	r3, #8
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e147      	b.n	80048a8 <UART_SetConfig+0x348>
 8004618:	2310      	movs	r3, #16
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e144      	b.n	80048a8 <UART_SetConfig+0x348>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a83      	ldr	r2, [pc, #524]	@ (8004830 <UART_SetConfig+0x2d0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d132      	bne.n	800468e <UART_SetConfig+0x12e>
 8004628:	4b80      	ldr	r3, [pc, #512]	@ (800482c <UART_SetConfig+0x2cc>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d828      	bhi.n	8004688 <UART_SetConfig+0x128>
 8004636:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <UART_SetConfig+0xdc>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	08004671 	.word	0x08004671
 8004640:	08004689 	.word	0x08004689
 8004644:	08004689 	.word	0x08004689
 8004648:	08004689 	.word	0x08004689
 800464c:	0800467d 	.word	0x0800467d
 8004650:	08004689 	.word	0x08004689
 8004654:	08004689 	.word	0x08004689
 8004658:	08004689 	.word	0x08004689
 800465c:	08004677 	.word	0x08004677
 8004660:	08004689 	.word	0x08004689
 8004664:	08004689 	.word	0x08004689
 8004668:	08004689 	.word	0x08004689
 800466c:	08004683 	.word	0x08004683
 8004670:	2300      	movs	r3, #0
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e118      	b.n	80048a8 <UART_SetConfig+0x348>
 8004676:	2302      	movs	r3, #2
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e115      	b.n	80048a8 <UART_SetConfig+0x348>
 800467c:	2304      	movs	r3, #4
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e112      	b.n	80048a8 <UART_SetConfig+0x348>
 8004682:	2308      	movs	r3, #8
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e10f      	b.n	80048a8 <UART_SetConfig+0x348>
 8004688:	2310      	movs	r3, #16
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e10c      	b.n	80048a8 <UART_SetConfig+0x348>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a68      	ldr	r2, [pc, #416]	@ (8004834 <UART_SetConfig+0x2d4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d120      	bne.n	80046da <UART_SetConfig+0x17a>
 8004698:	4b64      	ldr	r3, [pc, #400]	@ (800482c <UART_SetConfig+0x2cc>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046a2:	2b30      	cmp	r3, #48	@ 0x30
 80046a4:	d013      	beq.n	80046ce <UART_SetConfig+0x16e>
 80046a6:	2b30      	cmp	r3, #48	@ 0x30
 80046a8:	d814      	bhi.n	80046d4 <UART_SetConfig+0x174>
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d009      	beq.n	80046c2 <UART_SetConfig+0x162>
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d810      	bhi.n	80046d4 <UART_SetConfig+0x174>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <UART_SetConfig+0x15c>
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d006      	beq.n	80046c8 <UART_SetConfig+0x168>
 80046ba:	e00b      	b.n	80046d4 <UART_SetConfig+0x174>
 80046bc:	2300      	movs	r3, #0
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e0f2      	b.n	80048a8 <UART_SetConfig+0x348>
 80046c2:	2302      	movs	r3, #2
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e0ef      	b.n	80048a8 <UART_SetConfig+0x348>
 80046c8:	2304      	movs	r3, #4
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e0ec      	b.n	80048a8 <UART_SetConfig+0x348>
 80046ce:	2308      	movs	r3, #8
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e0e9      	b.n	80048a8 <UART_SetConfig+0x348>
 80046d4:	2310      	movs	r3, #16
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e0e6      	b.n	80048a8 <UART_SetConfig+0x348>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a56      	ldr	r2, [pc, #344]	@ (8004838 <UART_SetConfig+0x2d8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d120      	bne.n	8004726 <UART_SetConfig+0x1c6>
 80046e4:	4b51      	ldr	r3, [pc, #324]	@ (800482c <UART_SetConfig+0x2cc>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80046f0:	d013      	beq.n	800471a <UART_SetConfig+0x1ba>
 80046f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80046f4:	d814      	bhi.n	8004720 <UART_SetConfig+0x1c0>
 80046f6:	2b80      	cmp	r3, #128	@ 0x80
 80046f8:	d009      	beq.n	800470e <UART_SetConfig+0x1ae>
 80046fa:	2b80      	cmp	r3, #128	@ 0x80
 80046fc:	d810      	bhi.n	8004720 <UART_SetConfig+0x1c0>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <UART_SetConfig+0x1a8>
 8004702:	2b40      	cmp	r3, #64	@ 0x40
 8004704:	d006      	beq.n	8004714 <UART_SetConfig+0x1b4>
 8004706:	e00b      	b.n	8004720 <UART_SetConfig+0x1c0>
 8004708:	2300      	movs	r3, #0
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e0cc      	b.n	80048a8 <UART_SetConfig+0x348>
 800470e:	2302      	movs	r3, #2
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e0c9      	b.n	80048a8 <UART_SetConfig+0x348>
 8004714:	2304      	movs	r3, #4
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e0c6      	b.n	80048a8 <UART_SetConfig+0x348>
 800471a:	2308      	movs	r3, #8
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e0c3      	b.n	80048a8 <UART_SetConfig+0x348>
 8004720:	2310      	movs	r3, #16
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e0c0      	b.n	80048a8 <UART_SetConfig+0x348>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a44      	ldr	r2, [pc, #272]	@ (800483c <UART_SetConfig+0x2dc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d125      	bne.n	800477c <UART_SetConfig+0x21c>
 8004730:	4b3e      	ldr	r3, [pc, #248]	@ (800482c <UART_SetConfig+0x2cc>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800473a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800473e:	d017      	beq.n	8004770 <UART_SetConfig+0x210>
 8004740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004744:	d817      	bhi.n	8004776 <UART_SetConfig+0x216>
 8004746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800474a:	d00b      	beq.n	8004764 <UART_SetConfig+0x204>
 800474c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004750:	d811      	bhi.n	8004776 <UART_SetConfig+0x216>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <UART_SetConfig+0x1fe>
 8004756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800475a:	d006      	beq.n	800476a <UART_SetConfig+0x20a>
 800475c:	e00b      	b.n	8004776 <UART_SetConfig+0x216>
 800475e:	2300      	movs	r3, #0
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e0a1      	b.n	80048a8 <UART_SetConfig+0x348>
 8004764:	2302      	movs	r3, #2
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e09e      	b.n	80048a8 <UART_SetConfig+0x348>
 800476a:	2304      	movs	r3, #4
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e09b      	b.n	80048a8 <UART_SetConfig+0x348>
 8004770:	2308      	movs	r3, #8
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e098      	b.n	80048a8 <UART_SetConfig+0x348>
 8004776:	2310      	movs	r3, #16
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e095      	b.n	80048a8 <UART_SetConfig+0x348>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2f      	ldr	r2, [pc, #188]	@ (8004840 <UART_SetConfig+0x2e0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d125      	bne.n	80047d2 <UART_SetConfig+0x272>
 8004786:	4b29      	ldr	r3, [pc, #164]	@ (800482c <UART_SetConfig+0x2cc>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004794:	d017      	beq.n	80047c6 <UART_SetConfig+0x266>
 8004796:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800479a:	d817      	bhi.n	80047cc <UART_SetConfig+0x26c>
 800479c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a0:	d00b      	beq.n	80047ba <UART_SetConfig+0x25a>
 80047a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a6:	d811      	bhi.n	80047cc <UART_SetConfig+0x26c>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <UART_SetConfig+0x254>
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b0:	d006      	beq.n	80047c0 <UART_SetConfig+0x260>
 80047b2:	e00b      	b.n	80047cc <UART_SetConfig+0x26c>
 80047b4:	2301      	movs	r3, #1
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e076      	b.n	80048a8 <UART_SetConfig+0x348>
 80047ba:	2302      	movs	r3, #2
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e073      	b.n	80048a8 <UART_SetConfig+0x348>
 80047c0:	2304      	movs	r3, #4
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e070      	b.n	80048a8 <UART_SetConfig+0x348>
 80047c6:	2308      	movs	r3, #8
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	e06d      	b.n	80048a8 <UART_SetConfig+0x348>
 80047cc:	2310      	movs	r3, #16
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	e06a      	b.n	80048a8 <UART_SetConfig+0x348>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004844 <UART_SetConfig+0x2e4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d138      	bne.n	800484e <UART_SetConfig+0x2ee>
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <UART_SetConfig+0x2cc>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80047e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047ea:	d017      	beq.n	800481c <UART_SetConfig+0x2bc>
 80047ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047f0:	d82a      	bhi.n	8004848 <UART_SetConfig+0x2e8>
 80047f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047f6:	d00b      	beq.n	8004810 <UART_SetConfig+0x2b0>
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047fc:	d824      	bhi.n	8004848 <UART_SetConfig+0x2e8>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <UART_SetConfig+0x2aa>
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004806:	d006      	beq.n	8004816 <UART_SetConfig+0x2b6>
 8004808:	e01e      	b.n	8004848 <UART_SetConfig+0x2e8>
 800480a:	2300      	movs	r3, #0
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e04b      	b.n	80048a8 <UART_SetConfig+0x348>
 8004810:	2302      	movs	r3, #2
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e048      	b.n	80048a8 <UART_SetConfig+0x348>
 8004816:	2304      	movs	r3, #4
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e045      	b.n	80048a8 <UART_SetConfig+0x348>
 800481c:	2308      	movs	r3, #8
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e042      	b.n	80048a8 <UART_SetConfig+0x348>
 8004822:	bf00      	nop
 8004824:	efff69f3 	.word	0xefff69f3
 8004828:	40011000 	.word	0x40011000
 800482c:	40023800 	.word	0x40023800
 8004830:	40004400 	.word	0x40004400
 8004834:	40004800 	.word	0x40004800
 8004838:	40004c00 	.word	0x40004c00
 800483c:	40005000 	.word	0x40005000
 8004840:	40011400 	.word	0x40011400
 8004844:	40007800 	.word	0x40007800
 8004848:	2310      	movs	r3, #16
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e02c      	b.n	80048a8 <UART_SetConfig+0x348>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a72      	ldr	r2, [pc, #456]	@ (8004a1c <UART_SetConfig+0x4bc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d125      	bne.n	80048a4 <UART_SetConfig+0x344>
 8004858:	4b71      	ldr	r3, [pc, #452]	@ (8004a20 <UART_SetConfig+0x4c0>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004862:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004866:	d017      	beq.n	8004898 <UART_SetConfig+0x338>
 8004868:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800486c:	d817      	bhi.n	800489e <UART_SetConfig+0x33e>
 800486e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004872:	d00b      	beq.n	800488c <UART_SetConfig+0x32c>
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004878:	d811      	bhi.n	800489e <UART_SetConfig+0x33e>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <UART_SetConfig+0x326>
 800487e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004882:	d006      	beq.n	8004892 <UART_SetConfig+0x332>
 8004884:	e00b      	b.n	800489e <UART_SetConfig+0x33e>
 8004886:	2300      	movs	r3, #0
 8004888:	77fb      	strb	r3, [r7, #31]
 800488a:	e00d      	b.n	80048a8 <UART_SetConfig+0x348>
 800488c:	2302      	movs	r3, #2
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e00a      	b.n	80048a8 <UART_SetConfig+0x348>
 8004892:	2304      	movs	r3, #4
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e007      	b.n	80048a8 <UART_SetConfig+0x348>
 8004898:	2308      	movs	r3, #8
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e004      	b.n	80048a8 <UART_SetConfig+0x348>
 800489e:	2310      	movs	r3, #16
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e001      	b.n	80048a8 <UART_SetConfig+0x348>
 80048a4:	2310      	movs	r3, #16
 80048a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b0:	d15b      	bne.n	800496a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80048b2:	7ffb      	ldrb	r3, [r7, #31]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d828      	bhi.n	800490a <UART_SetConfig+0x3aa>
 80048b8:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <UART_SetConfig+0x360>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048ed 	.word	0x080048ed
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	0800490b 	.word	0x0800490b
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	0800490b 	.word	0x0800490b
 80048d8:	0800490b 	.word	0x0800490b
 80048dc:	0800490b 	.word	0x0800490b
 80048e0:	08004903 	.word	0x08004903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7fe fdfc 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 80048e8:	61b8      	str	r0, [r7, #24]
        break;
 80048ea:	e013      	b.n	8004914 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ec:	f7fe fe0c 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 80048f0:	61b8      	str	r0, [r7, #24]
        break;
 80048f2:	e00f      	b.n	8004914 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004a24 <UART_SetConfig+0x4c4>)
 80048f6:	61bb      	str	r3, [r7, #24]
        break;
 80048f8:	e00c      	b.n	8004914 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fa:	f7fe fcdf 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 80048fe:	61b8      	str	r0, [r7, #24]
        break;
 8004900:	e008      	b.n	8004914 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004906:	61bb      	str	r3, [r7, #24]
        break;
 8004908:	e004      	b.n	8004914 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	77bb      	strb	r3, [r7, #30]
        break;
 8004912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d074      	beq.n	8004a04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	005a      	lsls	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	441a      	add	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	d916      	bls.n	8004964 <UART_SetConfig+0x404>
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800493c:	d212      	bcs.n	8004964 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f023 030f 	bic.w	r3, r3, #15
 8004946:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	b29b      	uxth	r3, r3
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	b29a      	uxth	r2, r3
 8004954:	89fb      	ldrh	r3, [r7, #14]
 8004956:	4313      	orrs	r3, r2
 8004958:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	89fa      	ldrh	r2, [r7, #14]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e04f      	b.n	8004a04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	77bb      	strb	r3, [r7, #30]
 8004968:	e04c      	b.n	8004a04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d828      	bhi.n	80049c2 <UART_SetConfig+0x462>
 8004970:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <UART_SetConfig+0x418>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	080049c3 	.word	0x080049c3
 8004988:	080049b3 	.word	0x080049b3
 800498c:	080049c3 	.word	0x080049c3
 8004990:	080049c3 	.word	0x080049c3
 8004994:	080049c3 	.word	0x080049c3
 8004998:	080049bb 	.word	0x080049bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fe fda0 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 80049a0:	61b8      	str	r0, [r7, #24]
        break;
 80049a2:	e013      	b.n	80049cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a4:	f7fe fdb0 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 80049a8:	61b8      	str	r0, [r7, #24]
        break;
 80049aa:	e00f      	b.n	80049cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004a24 <UART_SetConfig+0x4c4>)
 80049ae:	61bb      	str	r3, [r7, #24]
        break;
 80049b0:	e00c      	b.n	80049cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b2:	f7fe fc83 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 80049b6:	61b8      	str	r0, [r7, #24]
        break;
 80049b8:	e008      	b.n	80049cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049be:	61bb      	str	r3, [r7, #24]
        break;
 80049c0:	e004      	b.n	80049cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	77bb      	strb	r3, [r7, #30]
        break;
 80049ca:	bf00      	nop
    }

    if (pclk != 0U)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d018      	beq.n	8004a04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	085a      	lsrs	r2, r3, #1
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	441a      	add	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b0f      	cmp	r3, #15
 80049ea:	d909      	bls.n	8004a00 <UART_SetConfig+0x4a0>
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f2:	d205      	bcs.n	8004a00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	e001      	b.n	8004a04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a10:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40007c00 	.word	0x40007c00
 8004a20:	40023800 	.word	0x40023800
 8004a24:	00f42400 	.word	0x00f42400

08004a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b26:	d10a      	bne.n	8004b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08c      	sub	sp, #48	@ 0x30
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b7c:	f7fc fff2 	bl	8001b64 <HAL_GetTick>
 8004b80:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d12e      	bne.n	8004bee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f83b 	bl	8004c1a <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d021      	beq.n	8004bee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bbe:	623b      	str	r3, [r7, #32]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	69b9      	ldr	r1, [r7, #24]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e6      	bne.n	8004baa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e011      	b.n	8004c12 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3728      	adds	r7, #40	@ 0x28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2a:	e04f      	b.n	8004ccc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d04b      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c34:	f7fc ff96 	bl	8001b64 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d302      	bcc.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e04e      	b.n	8004cec <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d037      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b80      	cmp	r3, #128	@ 0x80
 8004c60:	d034      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d031      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d110      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2208      	movs	r2, #8
 8004c7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f8fe 	bl	8004e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2208      	movs	r2, #8
 8004c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e029      	b.n	8004cec <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca6:	d111      	bne.n	8004ccc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f8e4 	bl	8004e80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e00f      	b.n	8004cec <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d0a0      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b097      	sub	sp, #92	@ 0x5c
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d26:	d10e      	bne.n	8004d46 <UART_Start_Receive_IT+0x52>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <UART_Start_Receive_IT+0x48>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d3a:	e02d      	b.n	8004d98 <UART_Start_Receive_IT+0xa4>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	22ff      	movs	r2, #255	@ 0xff
 8004d40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d44:	e028      	b.n	8004d98 <UART_Start_Receive_IT+0xa4>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <UART_Start_Receive_IT+0x76>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d104      	bne.n	8004d60 <UART_Start_Receive_IT+0x6c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	22ff      	movs	r2, #255	@ 0xff
 8004d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d5e:	e01b      	b.n	8004d98 <UART_Start_Receive_IT+0xa4>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	227f      	movs	r2, #127	@ 0x7f
 8004d64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d68:	e016      	b.n	8004d98 <UART_Start_Receive_IT+0xa4>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d72:	d10d      	bne.n	8004d90 <UART_Start_Receive_IT+0x9c>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <UART_Start_Receive_IT+0x92>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	227f      	movs	r2, #127	@ 0x7f
 8004d80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d84:	e008      	b.n	8004d98 <UART_Start_Receive_IT+0xa4>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	223f      	movs	r2, #63	@ 0x3f
 8004d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d8e:	e003      	b.n	8004d98 <UART_Start_Receive_IT+0xa4>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2222      	movs	r2, #34	@ 0x22
 8004da4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3308      	adds	r3, #8
 8004dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004dc8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004dca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e5      	bne.n	8004da8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de4:	d107      	bne.n	8004df6 <UART_Start_Receive_IT+0x102>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a21      	ldr	r2, [pc, #132]	@ (8004e78 <UART_Start_Receive_IT+0x184>)
 8004df2:	669a      	str	r2, [r3, #104]	@ 0x68
 8004df4:	e002      	b.n	8004dfc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a20      	ldr	r2, [pc, #128]	@ (8004e7c <UART_Start_Receive_IT+0x188>)
 8004dfa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d019      	beq.n	8004e38 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e24:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e6      	bne.n	8004e04 <UART_Start_Receive_IT+0x110>
 8004e36:	e018      	b.n	8004e6a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	613b      	str	r3, [r7, #16]
   return(result);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f043 0320 	orr.w	r3, r3, #32
 8004e4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e56:	623b      	str	r3, [r7, #32]
 8004e58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	69f9      	ldr	r1, [r7, #28]
 8004e5c:	6a3a      	ldr	r2, [r7, #32]
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e6      	bne.n	8004e38 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	375c      	adds	r7, #92	@ 0x5c
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	08005169 	.word	0x08005169
 8004e7c:	08004fc1 	.word	0x08004fc1

08004e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b095      	sub	sp, #84	@ 0x54
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ea8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e6      	bne.n	8004e88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d118      	bne.n	8004f28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0310 	bic.w	r3, r3, #16
 8004f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	613b      	str	r3, [r7, #16]
   return(result);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e6      	bne.n	8004ef6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f3c:	bf00      	nop
 8004f3e:	3754      	adds	r7, #84	@ 0x54
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fae8 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e6      	bne.n	8004f74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fab4 	bl	8004520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb8:	bf00      	nop
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b09c      	sub	sp, #112	@ 0x70
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd8:	2b22      	cmp	r3, #34	@ 0x22
 8004fda:	f040 80b9 	bne.w	8005150 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fe8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004fec:	b2d9      	uxtb	r1, r3
 8004fee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	f040 809c 	bne.w	8005160 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800503c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005046:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005048:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800504c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e6      	bne.n	8005028 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3308      	adds	r3, #8
 8005060:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800506a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	667b      	str	r3, [r7, #100]	@ 0x64
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800507a:	647a      	str	r2, [r7, #68]	@ 0x44
 800507c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e5      	bne.n	800505a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d018      	beq.n	80050e2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	623b      	str	r3, [r7, #32]
   return(result);
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e6      	bne.n	80050b0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d12e      	bne.n	8005148 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f023 0310 	bic.w	r3, r3, #16
 8005104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	617b      	str	r3, [r7, #20]
   return(result);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e6      	bne.n	80050f0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b10      	cmp	r3, #16
 800512e:	d103      	bne.n	8005138 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2210      	movs	r2, #16
 8005136:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fa01 	bl	8004548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005146:	e00b      	b.n	8005160 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fb fd1d 	bl	8000b88 <HAL_UART_RxCpltCallback>
}
 800514e:	e007      	b.n	8005160 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0208 	orr.w	r2, r2, #8
 800515e:	619a      	str	r2, [r3, #24]
}
 8005160:	bf00      	nop
 8005162:	3770      	adds	r7, #112	@ 0x70
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b09c      	sub	sp, #112	@ 0x70
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005176:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005180:	2b22      	cmp	r3, #34	@ 0x22
 8005182:	f040 80b9 	bne.w	80052f8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005194:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005196:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800519a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800519e:	4013      	ands	r3, r2
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	1c9a      	adds	r2, r3, #2
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f040 809c 	bne.w	8005308 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80051de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80051f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80051f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80051fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e6      	bne.n	80051d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	663b      	str	r3, [r7, #96]	@ 0x60
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3308      	adds	r3, #8
 8005220:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005222:	643a      	str	r2, [r7, #64]	@ 0x40
 8005224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e5      	bne.n	8005202 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d018      	beq.n	800528a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	61fb      	str	r3, [r7, #28]
   return(result);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800526c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005278:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800527c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528e:	2b01      	cmp	r3, #1
 8005290:	d12e      	bne.n	80052f0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 0310 	bic.w	r3, r3, #16
 80052ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6979      	ldr	r1, [r7, #20]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	613b      	str	r3, [r7, #16]
   return(result);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e6      	bne.n	8005298 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d103      	bne.n	80052e0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2210      	movs	r2, #16
 80052de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052e6:	4619      	mov	r1, r3
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff f92d 	bl	8004548 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ee:	e00b      	b.n	8005308 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fb fc49 	bl	8000b88 <HAL_UART_RxCpltCallback>
}
 80052f6:	e007      	b.n	8005308 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	619a      	str	r2, [r3, #24]
}
 8005308:	bf00      	nop
 800530a:	3770      	adds	r7, #112	@ 0x70
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <atoi>:
 8005310:	220a      	movs	r2, #10
 8005312:	2100      	movs	r1, #0
 8005314:	f000 b87a 	b.w	800540c <strtol>

08005318 <_strtol_l.constprop.0>:
 8005318:	2b24      	cmp	r3, #36	@ 0x24
 800531a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531e:	4686      	mov	lr, r0
 8005320:	4690      	mov	r8, r2
 8005322:	d801      	bhi.n	8005328 <_strtol_l.constprop.0+0x10>
 8005324:	2b01      	cmp	r3, #1
 8005326:	d106      	bne.n	8005336 <_strtol_l.constprop.0+0x1e>
 8005328:	f000 f8b6 	bl	8005498 <__errno>
 800532c:	2316      	movs	r3, #22
 800532e:	6003      	str	r3, [r0, #0]
 8005330:	2000      	movs	r0, #0
 8005332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005336:	4834      	ldr	r0, [pc, #208]	@ (8005408 <_strtol_l.constprop.0+0xf0>)
 8005338:	460d      	mov	r5, r1
 800533a:	462a      	mov	r2, r5
 800533c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005340:	5d06      	ldrb	r6, [r0, r4]
 8005342:	f016 0608 	ands.w	r6, r6, #8
 8005346:	d1f8      	bne.n	800533a <_strtol_l.constprop.0+0x22>
 8005348:	2c2d      	cmp	r4, #45	@ 0x2d
 800534a:	d12d      	bne.n	80053a8 <_strtol_l.constprop.0+0x90>
 800534c:	782c      	ldrb	r4, [r5, #0]
 800534e:	2601      	movs	r6, #1
 8005350:	1c95      	adds	r5, r2, #2
 8005352:	f033 0210 	bics.w	r2, r3, #16
 8005356:	d109      	bne.n	800536c <_strtol_l.constprop.0+0x54>
 8005358:	2c30      	cmp	r4, #48	@ 0x30
 800535a:	d12a      	bne.n	80053b2 <_strtol_l.constprop.0+0x9a>
 800535c:	782a      	ldrb	r2, [r5, #0]
 800535e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005362:	2a58      	cmp	r2, #88	@ 0x58
 8005364:	d125      	bne.n	80053b2 <_strtol_l.constprop.0+0x9a>
 8005366:	786c      	ldrb	r4, [r5, #1]
 8005368:	2310      	movs	r3, #16
 800536a:	3502      	adds	r5, #2
 800536c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005370:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005374:	2200      	movs	r2, #0
 8005376:	fbbc f9f3 	udiv	r9, ip, r3
 800537a:	4610      	mov	r0, r2
 800537c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005380:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005384:	2f09      	cmp	r7, #9
 8005386:	d81b      	bhi.n	80053c0 <_strtol_l.constprop.0+0xa8>
 8005388:	463c      	mov	r4, r7
 800538a:	42a3      	cmp	r3, r4
 800538c:	dd27      	ble.n	80053de <_strtol_l.constprop.0+0xc6>
 800538e:	1c57      	adds	r7, r2, #1
 8005390:	d007      	beq.n	80053a2 <_strtol_l.constprop.0+0x8a>
 8005392:	4581      	cmp	r9, r0
 8005394:	d320      	bcc.n	80053d8 <_strtol_l.constprop.0+0xc0>
 8005396:	d101      	bne.n	800539c <_strtol_l.constprop.0+0x84>
 8005398:	45a2      	cmp	sl, r4
 800539a:	db1d      	blt.n	80053d8 <_strtol_l.constprop.0+0xc0>
 800539c:	fb00 4003 	mla	r0, r0, r3, r4
 80053a0:	2201      	movs	r2, #1
 80053a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053a6:	e7eb      	b.n	8005380 <_strtol_l.constprop.0+0x68>
 80053a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80053aa:	bf04      	itt	eq
 80053ac:	782c      	ldrbeq	r4, [r5, #0]
 80053ae:	1c95      	addeq	r5, r2, #2
 80053b0:	e7cf      	b.n	8005352 <_strtol_l.constprop.0+0x3a>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1da      	bne.n	800536c <_strtol_l.constprop.0+0x54>
 80053b6:	2c30      	cmp	r4, #48	@ 0x30
 80053b8:	bf0c      	ite	eq
 80053ba:	2308      	moveq	r3, #8
 80053bc:	230a      	movne	r3, #10
 80053be:	e7d5      	b.n	800536c <_strtol_l.constprop.0+0x54>
 80053c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80053c4:	2f19      	cmp	r7, #25
 80053c6:	d801      	bhi.n	80053cc <_strtol_l.constprop.0+0xb4>
 80053c8:	3c37      	subs	r4, #55	@ 0x37
 80053ca:	e7de      	b.n	800538a <_strtol_l.constprop.0+0x72>
 80053cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80053d0:	2f19      	cmp	r7, #25
 80053d2:	d804      	bhi.n	80053de <_strtol_l.constprop.0+0xc6>
 80053d4:	3c57      	subs	r4, #87	@ 0x57
 80053d6:	e7d8      	b.n	800538a <_strtol_l.constprop.0+0x72>
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	e7e1      	b.n	80053a2 <_strtol_l.constprop.0+0x8a>
 80053de:	1c53      	adds	r3, r2, #1
 80053e0:	d108      	bne.n	80053f4 <_strtol_l.constprop.0+0xdc>
 80053e2:	2322      	movs	r3, #34	@ 0x22
 80053e4:	f8ce 3000 	str.w	r3, [lr]
 80053e8:	4660      	mov	r0, ip
 80053ea:	f1b8 0f00 	cmp.w	r8, #0
 80053ee:	d0a0      	beq.n	8005332 <_strtol_l.constprop.0+0x1a>
 80053f0:	1e69      	subs	r1, r5, #1
 80053f2:	e006      	b.n	8005402 <_strtol_l.constprop.0+0xea>
 80053f4:	b106      	cbz	r6, 80053f8 <_strtol_l.constprop.0+0xe0>
 80053f6:	4240      	negs	r0, r0
 80053f8:	f1b8 0f00 	cmp.w	r8, #0
 80053fc:	d099      	beq.n	8005332 <_strtol_l.constprop.0+0x1a>
 80053fe:	2a00      	cmp	r2, #0
 8005400:	d1f6      	bne.n	80053f0 <_strtol_l.constprop.0+0xd8>
 8005402:	f8c8 1000 	str.w	r1, [r8]
 8005406:	e794      	b.n	8005332 <_strtol_l.constprop.0+0x1a>
 8005408:	080061d1 	.word	0x080061d1

0800540c <strtol>:
 800540c:	4613      	mov	r3, r2
 800540e:	460a      	mov	r2, r1
 8005410:	4601      	mov	r1, r0
 8005412:	4802      	ldr	r0, [pc, #8]	@ (800541c <strtol+0x10>)
 8005414:	6800      	ldr	r0, [r0, #0]
 8005416:	f7ff bf7f 	b.w	8005318 <_strtol_l.constprop.0>
 800541a:	bf00      	nop
 800541c:	20000010 	.word	0x20000010

08005420 <sniprintf>:
 8005420:	b40c      	push	{r2, r3}
 8005422:	b530      	push	{r4, r5, lr}
 8005424:	4b17      	ldr	r3, [pc, #92]	@ (8005484 <sniprintf+0x64>)
 8005426:	1e0c      	subs	r4, r1, #0
 8005428:	681d      	ldr	r5, [r3, #0]
 800542a:	b09d      	sub	sp, #116	@ 0x74
 800542c:	da08      	bge.n	8005440 <sniprintf+0x20>
 800542e:	238b      	movs	r3, #139	@ 0x8b
 8005430:	602b      	str	r3, [r5, #0]
 8005432:	f04f 30ff 	mov.w	r0, #4294967295
 8005436:	b01d      	add	sp, #116	@ 0x74
 8005438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800543c:	b002      	add	sp, #8
 800543e:	4770      	bx	lr
 8005440:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005444:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005448:	bf14      	ite	ne
 800544a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800544e:	4623      	moveq	r3, r4
 8005450:	9304      	str	r3, [sp, #16]
 8005452:	9307      	str	r3, [sp, #28]
 8005454:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005458:	9002      	str	r0, [sp, #8]
 800545a:	9006      	str	r0, [sp, #24]
 800545c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005460:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005462:	ab21      	add	r3, sp, #132	@ 0x84
 8005464:	a902      	add	r1, sp, #8
 8005466:	4628      	mov	r0, r5
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	f000 f995 	bl	8005798 <_svfiprintf_r>
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	bfbc      	itt	lt
 8005472:	238b      	movlt	r3, #139	@ 0x8b
 8005474:	602b      	strlt	r3, [r5, #0]
 8005476:	2c00      	cmp	r4, #0
 8005478:	d0dd      	beq.n	8005436 <sniprintf+0x16>
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e7d9      	b.n	8005436 <sniprintf+0x16>
 8005482:	bf00      	nop
 8005484:	20000010 	.word	0x20000010

08005488 <memset>:
 8005488:	4402      	add	r2, r0
 800548a:	4603      	mov	r3, r0
 800548c:	4293      	cmp	r3, r2
 800548e:	d100      	bne.n	8005492 <memset+0xa>
 8005490:	4770      	bx	lr
 8005492:	f803 1b01 	strb.w	r1, [r3], #1
 8005496:	e7f9      	b.n	800548c <memset+0x4>

08005498 <__errno>:
 8005498:	4b01      	ldr	r3, [pc, #4]	@ (80054a0 <__errno+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000010 	.word	0x20000010

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4d0d      	ldr	r5, [pc, #52]	@ (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	@ (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2600      	movs	r6, #0
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4d0b      	ldr	r5, [pc, #44]	@ (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	@ (80054e8 <__libc_init_array+0x44>)
 80054b8:	f000 fc66 	bl	8005d88 <_init>
 80054bc:	1b64      	subs	r4, r4, r5
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2600      	movs	r6, #0
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	0800630c 	.word	0x0800630c
 80054e0:	0800630c 	.word	0x0800630c
 80054e4:	0800630c 	.word	0x0800630c
 80054e8:	08006310 	.word	0x08006310

080054ec <__retarget_lock_acquire_recursive>:
 80054ec:	4770      	bx	lr

080054ee <__retarget_lock_release_recursive>:
 80054ee:	4770      	bx	lr

080054f0 <_free_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4605      	mov	r5, r0
 80054f4:	2900      	cmp	r1, #0
 80054f6:	d041      	beq.n	800557c <_free_r+0x8c>
 80054f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fc:	1f0c      	subs	r4, r1, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bfb8      	it	lt
 8005502:	18e4      	addlt	r4, r4, r3
 8005504:	f000 f8e0 	bl	80056c8 <__malloc_lock>
 8005508:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <_free_r+0x90>)
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	b933      	cbnz	r3, 800551c <_free_r+0x2c>
 800550e:	6063      	str	r3, [r4, #4]
 8005510:	6014      	str	r4, [r2, #0]
 8005512:	4628      	mov	r0, r5
 8005514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005518:	f000 b8dc 	b.w	80056d4 <__malloc_unlock>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d908      	bls.n	8005532 <_free_r+0x42>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	1821      	adds	r1, r4, r0
 8005524:	428b      	cmp	r3, r1
 8005526:	bf01      	itttt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	1809      	addeq	r1, r1, r0
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	e7ed      	b.n	800550e <_free_r+0x1e>
 8005532:	461a      	mov	r2, r3
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b10b      	cbz	r3, 800553c <_free_r+0x4c>
 8005538:	42a3      	cmp	r3, r4
 800553a:	d9fa      	bls.n	8005532 <_free_r+0x42>
 800553c:	6811      	ldr	r1, [r2, #0]
 800553e:	1850      	adds	r0, r2, r1
 8005540:	42a0      	cmp	r0, r4
 8005542:	d10b      	bne.n	800555c <_free_r+0x6c>
 8005544:	6820      	ldr	r0, [r4, #0]
 8005546:	4401      	add	r1, r0
 8005548:	1850      	adds	r0, r2, r1
 800554a:	4283      	cmp	r3, r0
 800554c:	6011      	str	r1, [r2, #0]
 800554e:	d1e0      	bne.n	8005512 <_free_r+0x22>
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	4408      	add	r0, r1
 8005558:	6010      	str	r0, [r2, #0]
 800555a:	e7da      	b.n	8005512 <_free_r+0x22>
 800555c:	d902      	bls.n	8005564 <_free_r+0x74>
 800555e:	230c      	movs	r3, #12
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	e7d6      	b.n	8005512 <_free_r+0x22>
 8005564:	6820      	ldr	r0, [r4, #0]
 8005566:	1821      	adds	r1, r4, r0
 8005568:	428b      	cmp	r3, r1
 800556a:	bf04      	itt	eq
 800556c:	6819      	ldreq	r1, [r3, #0]
 800556e:	685b      	ldreq	r3, [r3, #4]
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	bf04      	itt	eq
 8005574:	1809      	addeq	r1, r1, r0
 8005576:	6021      	streq	r1, [r4, #0]
 8005578:	6054      	str	r4, [r2, #4]
 800557a:	e7ca      	b.n	8005512 <_free_r+0x22>
 800557c:	bd38      	pop	{r3, r4, r5, pc}
 800557e:	bf00      	nop
 8005580:	200002a4 	.word	0x200002a4

08005584 <sbrk_aligned>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	4e0f      	ldr	r6, [pc, #60]	@ (80055c4 <sbrk_aligned+0x40>)
 8005588:	460c      	mov	r4, r1
 800558a:	6831      	ldr	r1, [r6, #0]
 800558c:	4605      	mov	r5, r0
 800558e:	b911      	cbnz	r1, 8005596 <sbrk_aligned+0x12>
 8005590:	f000 fba6 	bl	8005ce0 <_sbrk_r>
 8005594:	6030      	str	r0, [r6, #0]
 8005596:	4621      	mov	r1, r4
 8005598:	4628      	mov	r0, r5
 800559a:	f000 fba1 	bl	8005ce0 <_sbrk_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	d103      	bne.n	80055aa <sbrk_aligned+0x26>
 80055a2:	f04f 34ff 	mov.w	r4, #4294967295
 80055a6:	4620      	mov	r0, r4
 80055a8:	bd70      	pop	{r4, r5, r6, pc}
 80055aa:	1cc4      	adds	r4, r0, #3
 80055ac:	f024 0403 	bic.w	r4, r4, #3
 80055b0:	42a0      	cmp	r0, r4
 80055b2:	d0f8      	beq.n	80055a6 <sbrk_aligned+0x22>
 80055b4:	1a21      	subs	r1, r4, r0
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 fb92 	bl	8005ce0 <_sbrk_r>
 80055bc:	3001      	adds	r0, #1
 80055be:	d1f2      	bne.n	80055a6 <sbrk_aligned+0x22>
 80055c0:	e7ef      	b.n	80055a2 <sbrk_aligned+0x1e>
 80055c2:	bf00      	nop
 80055c4:	200002a0 	.word	0x200002a0

080055c8 <_malloc_r>:
 80055c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055cc:	1ccd      	adds	r5, r1, #3
 80055ce:	f025 0503 	bic.w	r5, r5, #3
 80055d2:	3508      	adds	r5, #8
 80055d4:	2d0c      	cmp	r5, #12
 80055d6:	bf38      	it	cc
 80055d8:	250c      	movcc	r5, #12
 80055da:	2d00      	cmp	r5, #0
 80055dc:	4606      	mov	r6, r0
 80055de:	db01      	blt.n	80055e4 <_malloc_r+0x1c>
 80055e0:	42a9      	cmp	r1, r5
 80055e2:	d904      	bls.n	80055ee <_malloc_r+0x26>
 80055e4:	230c      	movs	r3, #12
 80055e6:	6033      	str	r3, [r6, #0]
 80055e8:	2000      	movs	r0, #0
 80055ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056c4 <_malloc_r+0xfc>
 80055f2:	f000 f869 	bl	80056c8 <__malloc_lock>
 80055f6:	f8d8 3000 	ldr.w	r3, [r8]
 80055fa:	461c      	mov	r4, r3
 80055fc:	bb44      	cbnz	r4, 8005650 <_malloc_r+0x88>
 80055fe:	4629      	mov	r1, r5
 8005600:	4630      	mov	r0, r6
 8005602:	f7ff ffbf 	bl	8005584 <sbrk_aligned>
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	4604      	mov	r4, r0
 800560a:	d158      	bne.n	80056be <_malloc_r+0xf6>
 800560c:	f8d8 4000 	ldr.w	r4, [r8]
 8005610:	4627      	mov	r7, r4
 8005612:	2f00      	cmp	r7, #0
 8005614:	d143      	bne.n	800569e <_malloc_r+0xd6>
 8005616:	2c00      	cmp	r4, #0
 8005618:	d04b      	beq.n	80056b2 <_malloc_r+0xea>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	4639      	mov	r1, r7
 800561e:	4630      	mov	r0, r6
 8005620:	eb04 0903 	add.w	r9, r4, r3
 8005624:	f000 fb5c 	bl	8005ce0 <_sbrk_r>
 8005628:	4581      	cmp	r9, r0
 800562a:	d142      	bne.n	80056b2 <_malloc_r+0xea>
 800562c:	6821      	ldr	r1, [r4, #0]
 800562e:	1a6d      	subs	r5, r5, r1
 8005630:	4629      	mov	r1, r5
 8005632:	4630      	mov	r0, r6
 8005634:	f7ff ffa6 	bl	8005584 <sbrk_aligned>
 8005638:	3001      	adds	r0, #1
 800563a:	d03a      	beq.n	80056b2 <_malloc_r+0xea>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	442b      	add	r3, r5
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	f8d8 3000 	ldr.w	r3, [r8]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	bb62      	cbnz	r2, 80056a4 <_malloc_r+0xdc>
 800564a:	f8c8 7000 	str.w	r7, [r8]
 800564e:	e00f      	b.n	8005670 <_malloc_r+0xa8>
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	1b52      	subs	r2, r2, r5
 8005654:	d420      	bmi.n	8005698 <_malloc_r+0xd0>
 8005656:	2a0b      	cmp	r2, #11
 8005658:	d917      	bls.n	800568a <_malloc_r+0xc2>
 800565a:	1961      	adds	r1, r4, r5
 800565c:	42a3      	cmp	r3, r4
 800565e:	6025      	str	r5, [r4, #0]
 8005660:	bf18      	it	ne
 8005662:	6059      	strne	r1, [r3, #4]
 8005664:	6863      	ldr	r3, [r4, #4]
 8005666:	bf08      	it	eq
 8005668:	f8c8 1000 	streq.w	r1, [r8]
 800566c:	5162      	str	r2, [r4, r5]
 800566e:	604b      	str	r3, [r1, #4]
 8005670:	4630      	mov	r0, r6
 8005672:	f000 f82f 	bl	80056d4 <__malloc_unlock>
 8005676:	f104 000b 	add.w	r0, r4, #11
 800567a:	1d23      	adds	r3, r4, #4
 800567c:	f020 0007 	bic.w	r0, r0, #7
 8005680:	1ac2      	subs	r2, r0, r3
 8005682:	bf1c      	itt	ne
 8005684:	1a1b      	subne	r3, r3, r0
 8005686:	50a3      	strne	r3, [r4, r2]
 8005688:	e7af      	b.n	80055ea <_malloc_r+0x22>
 800568a:	6862      	ldr	r2, [r4, #4]
 800568c:	42a3      	cmp	r3, r4
 800568e:	bf0c      	ite	eq
 8005690:	f8c8 2000 	streq.w	r2, [r8]
 8005694:	605a      	strne	r2, [r3, #4]
 8005696:	e7eb      	b.n	8005670 <_malloc_r+0xa8>
 8005698:	4623      	mov	r3, r4
 800569a:	6864      	ldr	r4, [r4, #4]
 800569c:	e7ae      	b.n	80055fc <_malloc_r+0x34>
 800569e:	463c      	mov	r4, r7
 80056a0:	687f      	ldr	r7, [r7, #4]
 80056a2:	e7b6      	b.n	8005612 <_malloc_r+0x4a>
 80056a4:	461a      	mov	r2, r3
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	d1fb      	bne.n	80056a4 <_malloc_r+0xdc>
 80056ac:	2300      	movs	r3, #0
 80056ae:	6053      	str	r3, [r2, #4]
 80056b0:	e7de      	b.n	8005670 <_malloc_r+0xa8>
 80056b2:	230c      	movs	r3, #12
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	4630      	mov	r0, r6
 80056b8:	f000 f80c 	bl	80056d4 <__malloc_unlock>
 80056bc:	e794      	b.n	80055e8 <_malloc_r+0x20>
 80056be:	6005      	str	r5, [r0, #0]
 80056c0:	e7d6      	b.n	8005670 <_malloc_r+0xa8>
 80056c2:	bf00      	nop
 80056c4:	200002a4 	.word	0x200002a4

080056c8 <__malloc_lock>:
 80056c8:	4801      	ldr	r0, [pc, #4]	@ (80056d0 <__malloc_lock+0x8>)
 80056ca:	f7ff bf0f 	b.w	80054ec <__retarget_lock_acquire_recursive>
 80056ce:	bf00      	nop
 80056d0:	2000029c 	.word	0x2000029c

080056d4 <__malloc_unlock>:
 80056d4:	4801      	ldr	r0, [pc, #4]	@ (80056dc <__malloc_unlock+0x8>)
 80056d6:	f7ff bf0a 	b.w	80054ee <__retarget_lock_release_recursive>
 80056da:	bf00      	nop
 80056dc:	2000029c 	.word	0x2000029c

080056e0 <__ssputs_r>:
 80056e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e4:	688e      	ldr	r6, [r1, #8]
 80056e6:	461f      	mov	r7, r3
 80056e8:	42be      	cmp	r6, r7
 80056ea:	680b      	ldr	r3, [r1, #0]
 80056ec:	4682      	mov	sl, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	4690      	mov	r8, r2
 80056f2:	d82d      	bhi.n	8005750 <__ssputs_r+0x70>
 80056f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056fc:	d026      	beq.n	800574c <__ssputs_r+0x6c>
 80056fe:	6965      	ldr	r5, [r4, #20]
 8005700:	6909      	ldr	r1, [r1, #16]
 8005702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005706:	eba3 0901 	sub.w	r9, r3, r1
 800570a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800570e:	1c7b      	adds	r3, r7, #1
 8005710:	444b      	add	r3, r9
 8005712:	106d      	asrs	r5, r5, #1
 8005714:	429d      	cmp	r5, r3
 8005716:	bf38      	it	cc
 8005718:	461d      	movcc	r5, r3
 800571a:	0553      	lsls	r3, r2, #21
 800571c:	d527      	bpl.n	800576e <__ssputs_r+0x8e>
 800571e:	4629      	mov	r1, r5
 8005720:	f7ff ff52 	bl	80055c8 <_malloc_r>
 8005724:	4606      	mov	r6, r0
 8005726:	b360      	cbz	r0, 8005782 <__ssputs_r+0xa2>
 8005728:	6921      	ldr	r1, [r4, #16]
 800572a:	464a      	mov	r2, r9
 800572c:	f000 fae8 	bl	8005d00 <memcpy>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	6126      	str	r6, [r4, #16]
 800573e:	6165      	str	r5, [r4, #20]
 8005740:	444e      	add	r6, r9
 8005742:	eba5 0509 	sub.w	r5, r5, r9
 8005746:	6026      	str	r6, [r4, #0]
 8005748:	60a5      	str	r5, [r4, #8]
 800574a:	463e      	mov	r6, r7
 800574c:	42be      	cmp	r6, r7
 800574e:	d900      	bls.n	8005752 <__ssputs_r+0x72>
 8005750:	463e      	mov	r6, r7
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	4632      	mov	r2, r6
 8005756:	4641      	mov	r1, r8
 8005758:	f000 faa8 	bl	8005cac <memmove>
 800575c:	68a3      	ldr	r3, [r4, #8]
 800575e:	1b9b      	subs	r3, r3, r6
 8005760:	60a3      	str	r3, [r4, #8]
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	4433      	add	r3, r6
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	2000      	movs	r0, #0
 800576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576e:	462a      	mov	r2, r5
 8005770:	f000 fad4 	bl	8005d1c <_realloc_r>
 8005774:	4606      	mov	r6, r0
 8005776:	2800      	cmp	r0, #0
 8005778:	d1e0      	bne.n	800573c <__ssputs_r+0x5c>
 800577a:	6921      	ldr	r1, [r4, #16]
 800577c:	4650      	mov	r0, sl
 800577e:	f7ff feb7 	bl	80054f0 <_free_r>
 8005782:	230c      	movs	r3, #12
 8005784:	f8ca 3000 	str.w	r3, [sl]
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800578e:	81a3      	strh	r3, [r4, #12]
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	e7e9      	b.n	800576a <__ssputs_r+0x8a>
	...

08005798 <_svfiprintf_r>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	4698      	mov	r8, r3
 800579e:	898b      	ldrh	r3, [r1, #12]
 80057a0:	061b      	lsls	r3, r3, #24
 80057a2:	b09d      	sub	sp, #116	@ 0x74
 80057a4:	4607      	mov	r7, r0
 80057a6:	460d      	mov	r5, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	d510      	bpl.n	80057ce <_svfiprintf_r+0x36>
 80057ac:	690b      	ldr	r3, [r1, #16]
 80057ae:	b973      	cbnz	r3, 80057ce <_svfiprintf_r+0x36>
 80057b0:	2140      	movs	r1, #64	@ 0x40
 80057b2:	f7ff ff09 	bl	80055c8 <_malloc_r>
 80057b6:	6028      	str	r0, [r5, #0]
 80057b8:	6128      	str	r0, [r5, #16]
 80057ba:	b930      	cbnz	r0, 80057ca <_svfiprintf_r+0x32>
 80057bc:	230c      	movs	r3, #12
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	b01d      	add	sp, #116	@ 0x74
 80057c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	2340      	movs	r3, #64	@ 0x40
 80057cc:	616b      	str	r3, [r5, #20]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80057d2:	2320      	movs	r3, #32
 80057d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80057dc:	2330      	movs	r3, #48	@ 0x30
 80057de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800597c <_svfiprintf_r+0x1e4>
 80057e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057e6:	f04f 0901 	mov.w	r9, #1
 80057ea:	4623      	mov	r3, r4
 80057ec:	469a      	mov	sl, r3
 80057ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f2:	b10a      	cbz	r2, 80057f8 <_svfiprintf_r+0x60>
 80057f4:	2a25      	cmp	r2, #37	@ 0x25
 80057f6:	d1f9      	bne.n	80057ec <_svfiprintf_r+0x54>
 80057f8:	ebba 0b04 	subs.w	fp, sl, r4
 80057fc:	d00b      	beq.n	8005816 <_svfiprintf_r+0x7e>
 80057fe:	465b      	mov	r3, fp
 8005800:	4622      	mov	r2, r4
 8005802:	4629      	mov	r1, r5
 8005804:	4638      	mov	r0, r7
 8005806:	f7ff ff6b 	bl	80056e0 <__ssputs_r>
 800580a:	3001      	adds	r0, #1
 800580c:	f000 80a7 	beq.w	800595e <_svfiprintf_r+0x1c6>
 8005810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005812:	445a      	add	r2, fp
 8005814:	9209      	str	r2, [sp, #36]	@ 0x24
 8005816:	f89a 3000 	ldrb.w	r3, [sl]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 809f 	beq.w	800595e <_svfiprintf_r+0x1c6>
 8005820:	2300      	movs	r3, #0
 8005822:	f04f 32ff 	mov.w	r2, #4294967295
 8005826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800582a:	f10a 0a01 	add.w	sl, sl, #1
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	9307      	str	r3, [sp, #28]
 8005832:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005836:	931a      	str	r3, [sp, #104]	@ 0x68
 8005838:	4654      	mov	r4, sl
 800583a:	2205      	movs	r2, #5
 800583c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005840:	484e      	ldr	r0, [pc, #312]	@ (800597c <_svfiprintf_r+0x1e4>)
 8005842:	f7fa fced 	bl	8000220 <memchr>
 8005846:	9a04      	ldr	r2, [sp, #16]
 8005848:	b9d8      	cbnz	r0, 8005882 <_svfiprintf_r+0xea>
 800584a:	06d0      	lsls	r0, r2, #27
 800584c:	bf44      	itt	mi
 800584e:	2320      	movmi	r3, #32
 8005850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005854:	0711      	lsls	r1, r2, #28
 8005856:	bf44      	itt	mi
 8005858:	232b      	movmi	r3, #43	@ 0x2b
 800585a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800585e:	f89a 3000 	ldrb.w	r3, [sl]
 8005862:	2b2a      	cmp	r3, #42	@ 0x2a
 8005864:	d015      	beq.n	8005892 <_svfiprintf_r+0xfa>
 8005866:	9a07      	ldr	r2, [sp, #28]
 8005868:	4654      	mov	r4, sl
 800586a:	2000      	movs	r0, #0
 800586c:	f04f 0c0a 	mov.w	ip, #10
 8005870:	4621      	mov	r1, r4
 8005872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005876:	3b30      	subs	r3, #48	@ 0x30
 8005878:	2b09      	cmp	r3, #9
 800587a:	d94b      	bls.n	8005914 <_svfiprintf_r+0x17c>
 800587c:	b1b0      	cbz	r0, 80058ac <_svfiprintf_r+0x114>
 800587e:	9207      	str	r2, [sp, #28]
 8005880:	e014      	b.n	80058ac <_svfiprintf_r+0x114>
 8005882:	eba0 0308 	sub.w	r3, r0, r8
 8005886:	fa09 f303 	lsl.w	r3, r9, r3
 800588a:	4313      	orrs	r3, r2
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	46a2      	mov	sl, r4
 8005890:	e7d2      	b.n	8005838 <_svfiprintf_r+0xa0>
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	1d19      	adds	r1, r3, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	9103      	str	r1, [sp, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	bfbb      	ittet	lt
 800589e:	425b      	neglt	r3, r3
 80058a0:	f042 0202 	orrlt.w	r2, r2, #2
 80058a4:	9307      	strge	r3, [sp, #28]
 80058a6:	9307      	strlt	r3, [sp, #28]
 80058a8:	bfb8      	it	lt
 80058aa:	9204      	strlt	r2, [sp, #16]
 80058ac:	7823      	ldrb	r3, [r4, #0]
 80058ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80058b0:	d10a      	bne.n	80058c8 <_svfiprintf_r+0x130>
 80058b2:	7863      	ldrb	r3, [r4, #1]
 80058b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80058b6:	d132      	bne.n	800591e <_svfiprintf_r+0x186>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	9203      	str	r2, [sp, #12]
 80058c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058c4:	3402      	adds	r4, #2
 80058c6:	9305      	str	r3, [sp, #20]
 80058c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800598c <_svfiprintf_r+0x1f4>
 80058cc:	7821      	ldrb	r1, [r4, #0]
 80058ce:	2203      	movs	r2, #3
 80058d0:	4650      	mov	r0, sl
 80058d2:	f7fa fca5 	bl	8000220 <memchr>
 80058d6:	b138      	cbz	r0, 80058e8 <_svfiprintf_r+0x150>
 80058d8:	9b04      	ldr	r3, [sp, #16]
 80058da:	eba0 000a 	sub.w	r0, r0, sl
 80058de:	2240      	movs	r2, #64	@ 0x40
 80058e0:	4082      	lsls	r2, r0
 80058e2:	4313      	orrs	r3, r2
 80058e4:	3401      	adds	r4, #1
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ec:	4824      	ldr	r0, [pc, #144]	@ (8005980 <_svfiprintf_r+0x1e8>)
 80058ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058f2:	2206      	movs	r2, #6
 80058f4:	f7fa fc94 	bl	8000220 <memchr>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d036      	beq.n	800596a <_svfiprintf_r+0x1d2>
 80058fc:	4b21      	ldr	r3, [pc, #132]	@ (8005984 <_svfiprintf_r+0x1ec>)
 80058fe:	bb1b      	cbnz	r3, 8005948 <_svfiprintf_r+0x1b0>
 8005900:	9b03      	ldr	r3, [sp, #12]
 8005902:	3307      	adds	r3, #7
 8005904:	f023 0307 	bic.w	r3, r3, #7
 8005908:	3308      	adds	r3, #8
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800590e:	4433      	add	r3, r6
 8005910:	9309      	str	r3, [sp, #36]	@ 0x24
 8005912:	e76a      	b.n	80057ea <_svfiprintf_r+0x52>
 8005914:	fb0c 3202 	mla	r2, ip, r2, r3
 8005918:	460c      	mov	r4, r1
 800591a:	2001      	movs	r0, #1
 800591c:	e7a8      	b.n	8005870 <_svfiprintf_r+0xd8>
 800591e:	2300      	movs	r3, #0
 8005920:	3401      	adds	r4, #1
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	4619      	mov	r1, r3
 8005926:	f04f 0c0a 	mov.w	ip, #10
 800592a:	4620      	mov	r0, r4
 800592c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005930:	3a30      	subs	r2, #48	@ 0x30
 8005932:	2a09      	cmp	r2, #9
 8005934:	d903      	bls.n	800593e <_svfiprintf_r+0x1a6>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0c6      	beq.n	80058c8 <_svfiprintf_r+0x130>
 800593a:	9105      	str	r1, [sp, #20]
 800593c:	e7c4      	b.n	80058c8 <_svfiprintf_r+0x130>
 800593e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005942:	4604      	mov	r4, r0
 8005944:	2301      	movs	r3, #1
 8005946:	e7f0      	b.n	800592a <_svfiprintf_r+0x192>
 8005948:	ab03      	add	r3, sp, #12
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	462a      	mov	r2, r5
 800594e:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <_svfiprintf_r+0x1f0>)
 8005950:	a904      	add	r1, sp, #16
 8005952:	4638      	mov	r0, r7
 8005954:	f3af 8000 	nop.w
 8005958:	1c42      	adds	r2, r0, #1
 800595a:	4606      	mov	r6, r0
 800595c:	d1d6      	bne.n	800590c <_svfiprintf_r+0x174>
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	065b      	lsls	r3, r3, #25
 8005962:	f53f af2d 	bmi.w	80057c0 <_svfiprintf_r+0x28>
 8005966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005968:	e72c      	b.n	80057c4 <_svfiprintf_r+0x2c>
 800596a:	ab03      	add	r3, sp, #12
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	462a      	mov	r2, r5
 8005970:	4b05      	ldr	r3, [pc, #20]	@ (8005988 <_svfiprintf_r+0x1f0>)
 8005972:	a904      	add	r1, sp, #16
 8005974:	4638      	mov	r0, r7
 8005976:	f000 f879 	bl	8005a6c <_printf_i>
 800597a:	e7ed      	b.n	8005958 <_svfiprintf_r+0x1c0>
 800597c:	080062d1 	.word	0x080062d1
 8005980:	080062db 	.word	0x080062db
 8005984:	00000000 	.word	0x00000000
 8005988:	080056e1 	.word	0x080056e1
 800598c:	080062d7 	.word	0x080062d7

08005990 <_printf_common>:
 8005990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	4616      	mov	r6, r2
 8005996:	4698      	mov	r8, r3
 8005998:	688a      	ldr	r2, [r1, #8]
 800599a:	690b      	ldr	r3, [r1, #16]
 800599c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059a0:	4293      	cmp	r3, r2
 80059a2:	bfb8      	it	lt
 80059a4:	4613      	movlt	r3, r2
 80059a6:	6033      	str	r3, [r6, #0]
 80059a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059ac:	4607      	mov	r7, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	b10a      	cbz	r2, 80059b6 <_printf_common+0x26>
 80059b2:	3301      	adds	r3, #1
 80059b4:	6033      	str	r3, [r6, #0]
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	0699      	lsls	r1, r3, #26
 80059ba:	bf42      	ittt	mi
 80059bc:	6833      	ldrmi	r3, [r6, #0]
 80059be:	3302      	addmi	r3, #2
 80059c0:	6033      	strmi	r3, [r6, #0]
 80059c2:	6825      	ldr	r5, [r4, #0]
 80059c4:	f015 0506 	ands.w	r5, r5, #6
 80059c8:	d106      	bne.n	80059d8 <_printf_common+0x48>
 80059ca:	f104 0a19 	add.w	sl, r4, #25
 80059ce:	68e3      	ldr	r3, [r4, #12]
 80059d0:	6832      	ldr	r2, [r6, #0]
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	42ab      	cmp	r3, r5
 80059d6:	dc26      	bgt.n	8005a26 <_printf_common+0x96>
 80059d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	3b00      	subs	r3, #0
 80059e0:	bf18      	it	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	0692      	lsls	r2, r2, #26
 80059e6:	d42b      	bmi.n	8005a40 <_printf_common+0xb0>
 80059e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059ec:	4641      	mov	r1, r8
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c8      	blx	r9
 80059f2:	3001      	adds	r0, #1
 80059f4:	d01e      	beq.n	8005a34 <_printf_common+0xa4>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	6922      	ldr	r2, [r4, #16]
 80059fa:	f003 0306 	and.w	r3, r3, #6
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	bf02      	ittt	eq
 8005a02:	68e5      	ldreq	r5, [r4, #12]
 8005a04:	6833      	ldreq	r3, [r6, #0]
 8005a06:	1aed      	subeq	r5, r5, r3
 8005a08:	68a3      	ldr	r3, [r4, #8]
 8005a0a:	bf0c      	ite	eq
 8005a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a10:	2500      	movne	r5, #0
 8005a12:	4293      	cmp	r3, r2
 8005a14:	bfc4      	itt	gt
 8005a16:	1a9b      	subgt	r3, r3, r2
 8005a18:	18ed      	addgt	r5, r5, r3
 8005a1a:	2600      	movs	r6, #0
 8005a1c:	341a      	adds	r4, #26
 8005a1e:	42b5      	cmp	r5, r6
 8005a20:	d11a      	bne.n	8005a58 <_printf_common+0xc8>
 8005a22:	2000      	movs	r0, #0
 8005a24:	e008      	b.n	8005a38 <_printf_common+0xa8>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4652      	mov	r2, sl
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	47c8      	blx	r9
 8005a30:	3001      	adds	r0, #1
 8005a32:	d103      	bne.n	8005a3c <_printf_common+0xac>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3c:	3501      	adds	r5, #1
 8005a3e:	e7c6      	b.n	80059ce <_printf_common+0x3e>
 8005a40:	18e1      	adds	r1, r4, r3
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	2030      	movs	r0, #48	@ 0x30
 8005a46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a4a:	4422      	add	r2, r4
 8005a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a54:	3302      	adds	r3, #2
 8005a56:	e7c7      	b.n	80059e8 <_printf_common+0x58>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	4638      	mov	r0, r7
 8005a60:	47c8      	blx	r9
 8005a62:	3001      	adds	r0, #1
 8005a64:	d0e6      	beq.n	8005a34 <_printf_common+0xa4>
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7d9      	b.n	8005a1e <_printf_common+0x8e>
	...

08005a6c <_printf_i>:
 8005a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	7e0f      	ldrb	r7, [r1, #24]
 8005a72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a74:	2f78      	cmp	r7, #120	@ 0x78
 8005a76:	4691      	mov	r9, r2
 8005a78:	4680      	mov	r8, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	469a      	mov	sl, r3
 8005a7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a82:	d807      	bhi.n	8005a94 <_printf_i+0x28>
 8005a84:	2f62      	cmp	r7, #98	@ 0x62
 8005a86:	d80a      	bhi.n	8005a9e <_printf_i+0x32>
 8005a88:	2f00      	cmp	r7, #0
 8005a8a:	f000 80d2 	beq.w	8005c32 <_printf_i+0x1c6>
 8005a8e:	2f58      	cmp	r7, #88	@ 0x58
 8005a90:	f000 80b9 	beq.w	8005c06 <_printf_i+0x19a>
 8005a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a9c:	e03a      	b.n	8005b14 <_printf_i+0xa8>
 8005a9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005aa2:	2b15      	cmp	r3, #21
 8005aa4:	d8f6      	bhi.n	8005a94 <_printf_i+0x28>
 8005aa6:	a101      	add	r1, pc, #4	@ (adr r1, 8005aac <_printf_i+0x40>)
 8005aa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005aac:	08005b05 	.word	0x08005b05
 8005ab0:	08005b19 	.word	0x08005b19
 8005ab4:	08005a95 	.word	0x08005a95
 8005ab8:	08005a95 	.word	0x08005a95
 8005abc:	08005a95 	.word	0x08005a95
 8005ac0:	08005a95 	.word	0x08005a95
 8005ac4:	08005b19 	.word	0x08005b19
 8005ac8:	08005a95 	.word	0x08005a95
 8005acc:	08005a95 	.word	0x08005a95
 8005ad0:	08005a95 	.word	0x08005a95
 8005ad4:	08005a95 	.word	0x08005a95
 8005ad8:	08005c19 	.word	0x08005c19
 8005adc:	08005b43 	.word	0x08005b43
 8005ae0:	08005bd3 	.word	0x08005bd3
 8005ae4:	08005a95 	.word	0x08005a95
 8005ae8:	08005a95 	.word	0x08005a95
 8005aec:	08005c3b 	.word	0x08005c3b
 8005af0:	08005a95 	.word	0x08005a95
 8005af4:	08005b43 	.word	0x08005b43
 8005af8:	08005a95 	.word	0x08005a95
 8005afc:	08005a95 	.word	0x08005a95
 8005b00:	08005bdb 	.word	0x08005bdb
 8005b04:	6833      	ldr	r3, [r6, #0]
 8005b06:	1d1a      	adds	r2, r3, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6032      	str	r2, [r6, #0]
 8005b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b14:	2301      	movs	r3, #1
 8005b16:	e09d      	b.n	8005c54 <_printf_i+0x1e8>
 8005b18:	6833      	ldr	r3, [r6, #0]
 8005b1a:	6820      	ldr	r0, [r4, #0]
 8005b1c:	1d19      	adds	r1, r3, #4
 8005b1e:	6031      	str	r1, [r6, #0]
 8005b20:	0606      	lsls	r6, r0, #24
 8005b22:	d501      	bpl.n	8005b28 <_printf_i+0xbc>
 8005b24:	681d      	ldr	r5, [r3, #0]
 8005b26:	e003      	b.n	8005b30 <_printf_i+0xc4>
 8005b28:	0645      	lsls	r5, r0, #25
 8005b2a:	d5fb      	bpl.n	8005b24 <_printf_i+0xb8>
 8005b2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	da03      	bge.n	8005b3c <_printf_i+0xd0>
 8005b34:	232d      	movs	r3, #45	@ 0x2d
 8005b36:	426d      	negs	r5, r5
 8005b38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b3c:	4859      	ldr	r0, [pc, #356]	@ (8005ca4 <_printf_i+0x238>)
 8005b3e:	230a      	movs	r3, #10
 8005b40:	e011      	b.n	8005b66 <_printf_i+0xfa>
 8005b42:	6821      	ldr	r1, [r4, #0]
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	0608      	lsls	r0, r1, #24
 8005b48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b4c:	d402      	bmi.n	8005b54 <_printf_i+0xe8>
 8005b4e:	0649      	lsls	r1, r1, #25
 8005b50:	bf48      	it	mi
 8005b52:	b2ad      	uxthmi	r5, r5
 8005b54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b56:	4853      	ldr	r0, [pc, #332]	@ (8005ca4 <_printf_i+0x238>)
 8005b58:	6033      	str	r3, [r6, #0]
 8005b5a:	bf14      	ite	ne
 8005b5c:	230a      	movne	r3, #10
 8005b5e:	2308      	moveq	r3, #8
 8005b60:	2100      	movs	r1, #0
 8005b62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b66:	6866      	ldr	r6, [r4, #4]
 8005b68:	60a6      	str	r6, [r4, #8]
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	bfa2      	ittt	ge
 8005b6e:	6821      	ldrge	r1, [r4, #0]
 8005b70:	f021 0104 	bicge.w	r1, r1, #4
 8005b74:	6021      	strge	r1, [r4, #0]
 8005b76:	b90d      	cbnz	r5, 8005b7c <_printf_i+0x110>
 8005b78:	2e00      	cmp	r6, #0
 8005b7a:	d04b      	beq.n	8005c14 <_printf_i+0x1a8>
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b82:	fb03 5711 	mls	r7, r3, r1, r5
 8005b86:	5dc7      	ldrb	r7, [r0, r7]
 8005b88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b8c:	462f      	mov	r7, r5
 8005b8e:	42bb      	cmp	r3, r7
 8005b90:	460d      	mov	r5, r1
 8005b92:	d9f4      	bls.n	8005b7e <_printf_i+0x112>
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d10b      	bne.n	8005bb0 <_printf_i+0x144>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07df      	lsls	r7, r3, #31
 8005b9c:	d508      	bpl.n	8005bb0 <_printf_i+0x144>
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	6861      	ldr	r1, [r4, #4]
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	bfde      	ittt	le
 8005ba6:	2330      	movle	r3, #48	@ 0x30
 8005ba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bb0:	1b92      	subs	r2, r2, r6
 8005bb2:	6122      	str	r2, [r4, #16]
 8005bb4:	f8cd a000 	str.w	sl, [sp]
 8005bb8:	464b      	mov	r3, r9
 8005bba:	aa03      	add	r2, sp, #12
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f7ff fee6 	bl	8005990 <_printf_common>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d14a      	bne.n	8005c5e <_printf_i+0x1f2>
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bcc:	b004      	add	sp, #16
 8005bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	f043 0320 	orr.w	r3, r3, #32
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	4833      	ldr	r0, [pc, #204]	@ (8005ca8 <_printf_i+0x23c>)
 8005bdc:	2778      	movs	r7, #120	@ 0x78
 8005bde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	6831      	ldr	r1, [r6, #0]
 8005be6:	061f      	lsls	r7, r3, #24
 8005be8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bec:	d402      	bmi.n	8005bf4 <_printf_i+0x188>
 8005bee:	065f      	lsls	r7, r3, #25
 8005bf0:	bf48      	it	mi
 8005bf2:	b2ad      	uxthmi	r5, r5
 8005bf4:	6031      	str	r1, [r6, #0]
 8005bf6:	07d9      	lsls	r1, r3, #31
 8005bf8:	bf44      	itt	mi
 8005bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8005bfe:	6023      	strmi	r3, [r4, #0]
 8005c00:	b11d      	cbz	r5, 8005c0a <_printf_i+0x19e>
 8005c02:	2310      	movs	r3, #16
 8005c04:	e7ac      	b.n	8005b60 <_printf_i+0xf4>
 8005c06:	4827      	ldr	r0, [pc, #156]	@ (8005ca4 <_printf_i+0x238>)
 8005c08:	e7e9      	b.n	8005bde <_printf_i+0x172>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	f023 0320 	bic.w	r3, r3, #32
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	e7f6      	b.n	8005c02 <_printf_i+0x196>
 8005c14:	4616      	mov	r6, r2
 8005c16:	e7bd      	b.n	8005b94 <_printf_i+0x128>
 8005c18:	6833      	ldr	r3, [r6, #0]
 8005c1a:	6825      	ldr	r5, [r4, #0]
 8005c1c:	6961      	ldr	r1, [r4, #20]
 8005c1e:	1d18      	adds	r0, r3, #4
 8005c20:	6030      	str	r0, [r6, #0]
 8005c22:	062e      	lsls	r6, r5, #24
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0x1c0>
 8005c28:	6019      	str	r1, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <_printf_i+0x1c6>
 8005c2c:	0668      	lsls	r0, r5, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0x1bc>
 8005c30:	8019      	strh	r1, [r3, #0]
 8005c32:	2300      	movs	r3, #0
 8005c34:	6123      	str	r3, [r4, #16]
 8005c36:	4616      	mov	r6, r2
 8005c38:	e7bc      	b.n	8005bb4 <_printf_i+0x148>
 8005c3a:	6833      	ldr	r3, [r6, #0]
 8005c3c:	1d1a      	adds	r2, r3, #4
 8005c3e:	6032      	str	r2, [r6, #0]
 8005c40:	681e      	ldr	r6, [r3, #0]
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	2100      	movs	r1, #0
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7fa faea 	bl	8000220 <memchr>
 8005c4c:	b108      	cbz	r0, 8005c52 <_printf_i+0x1e6>
 8005c4e:	1b80      	subs	r0, r0, r6
 8005c50:	6060      	str	r0, [r4, #4]
 8005c52:	6863      	ldr	r3, [r4, #4]
 8005c54:	6123      	str	r3, [r4, #16]
 8005c56:	2300      	movs	r3, #0
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c5c:	e7aa      	b.n	8005bb4 <_printf_i+0x148>
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	4632      	mov	r2, r6
 8005c62:	4649      	mov	r1, r9
 8005c64:	4640      	mov	r0, r8
 8005c66:	47d0      	blx	sl
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d0ad      	beq.n	8005bc8 <_printf_i+0x15c>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	079b      	lsls	r3, r3, #30
 8005c70:	d413      	bmi.n	8005c9a <_printf_i+0x22e>
 8005c72:	68e0      	ldr	r0, [r4, #12]
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	4298      	cmp	r0, r3
 8005c78:	bfb8      	it	lt
 8005c7a:	4618      	movlt	r0, r3
 8005c7c:	e7a6      	b.n	8005bcc <_printf_i+0x160>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4632      	mov	r2, r6
 8005c82:	4649      	mov	r1, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	47d0      	blx	sl
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d09d      	beq.n	8005bc8 <_printf_i+0x15c>
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	68e3      	ldr	r3, [r4, #12]
 8005c90:	9903      	ldr	r1, [sp, #12]
 8005c92:	1a5b      	subs	r3, r3, r1
 8005c94:	42ab      	cmp	r3, r5
 8005c96:	dcf2      	bgt.n	8005c7e <_printf_i+0x212>
 8005c98:	e7eb      	b.n	8005c72 <_printf_i+0x206>
 8005c9a:	2500      	movs	r5, #0
 8005c9c:	f104 0619 	add.w	r6, r4, #25
 8005ca0:	e7f5      	b.n	8005c8e <_printf_i+0x222>
 8005ca2:	bf00      	nop
 8005ca4:	080062e2 	.word	0x080062e2
 8005ca8:	080062f3 	.word	0x080062f3

08005cac <memmove>:
 8005cac:	4288      	cmp	r0, r1
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	eb01 0402 	add.w	r4, r1, r2
 8005cb4:	d902      	bls.n	8005cbc <memmove+0x10>
 8005cb6:	4284      	cmp	r4, r0
 8005cb8:	4623      	mov	r3, r4
 8005cba:	d807      	bhi.n	8005ccc <memmove+0x20>
 8005cbc:	1e43      	subs	r3, r0, #1
 8005cbe:	42a1      	cmp	r1, r4
 8005cc0:	d008      	beq.n	8005cd4 <memmove+0x28>
 8005cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cca:	e7f8      	b.n	8005cbe <memmove+0x12>
 8005ccc:	4402      	add	r2, r0
 8005cce:	4601      	mov	r1, r0
 8005cd0:	428a      	cmp	r2, r1
 8005cd2:	d100      	bne.n	8005cd6 <memmove+0x2a>
 8005cd4:	bd10      	pop	{r4, pc}
 8005cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cde:	e7f7      	b.n	8005cd0 <memmove+0x24>

08005ce0 <_sbrk_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d06      	ldr	r5, [pc, #24]	@ (8005cfc <_sbrk_r+0x1c>)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	f7fb fe78 	bl	80019e0 <_sbrk>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_sbrk_r+0x1a>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_sbrk_r+0x1a>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000298 	.word	0x20000298

08005d00 <memcpy>:
 8005d00:	440a      	add	r2, r1
 8005d02:	4291      	cmp	r1, r2
 8005d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d08:	d100      	bne.n	8005d0c <memcpy+0xc>
 8005d0a:	4770      	bx	lr
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d16:	4291      	cmp	r1, r2
 8005d18:	d1f9      	bne.n	8005d0e <memcpy+0xe>
 8005d1a:	bd10      	pop	{r4, pc}

08005d1c <_realloc_r>:
 8005d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d20:	4680      	mov	r8, r0
 8005d22:	4615      	mov	r5, r2
 8005d24:	460c      	mov	r4, r1
 8005d26:	b921      	cbnz	r1, 8005d32 <_realloc_r+0x16>
 8005d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	f7ff bc4b 	b.w	80055c8 <_malloc_r>
 8005d32:	b92a      	cbnz	r2, 8005d40 <_realloc_r+0x24>
 8005d34:	f7ff fbdc 	bl	80054f0 <_free_r>
 8005d38:	2400      	movs	r4, #0
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d40:	f000 f81a 	bl	8005d78 <_malloc_usable_size_r>
 8005d44:	4285      	cmp	r5, r0
 8005d46:	4606      	mov	r6, r0
 8005d48:	d802      	bhi.n	8005d50 <_realloc_r+0x34>
 8005d4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d4e:	d8f4      	bhi.n	8005d3a <_realloc_r+0x1e>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4640      	mov	r0, r8
 8005d54:	f7ff fc38 	bl	80055c8 <_malloc_r>
 8005d58:	4607      	mov	r7, r0
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0ec      	beq.n	8005d38 <_realloc_r+0x1c>
 8005d5e:	42b5      	cmp	r5, r6
 8005d60:	462a      	mov	r2, r5
 8005d62:	4621      	mov	r1, r4
 8005d64:	bf28      	it	cs
 8005d66:	4632      	movcs	r2, r6
 8005d68:	f7ff ffca 	bl	8005d00 <memcpy>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4640      	mov	r0, r8
 8005d70:	f7ff fbbe 	bl	80054f0 <_free_r>
 8005d74:	463c      	mov	r4, r7
 8005d76:	e7e0      	b.n	8005d3a <_realloc_r+0x1e>

08005d78 <_malloc_usable_size_r>:
 8005d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d7c:	1f18      	subs	r0, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfbc      	itt	lt
 8005d82:	580b      	ldrlt	r3, [r1, r0]
 8005d84:	18c0      	addlt	r0, r0, r3
 8005d86:	4770      	bx	lr

08005d88 <_init>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	bf00      	nop
 8005d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8e:	bc08      	pop	{r3}
 8005d90:	469e      	mov	lr, r3
 8005d92:	4770      	bx	lr

08005d94 <_fini>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr


PD57_2_1260_CANOPEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005908  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08005ad8  08005ad8  00006ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080060e8  080060e8  000070e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f0  080060f0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060f4  080060f4  000070f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080060f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08006154  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08006154  000082a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cad7  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d86  00000000  00000000  00014b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  000168f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075f  00000000  00000000  00017298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260f1  00000000  00000000  000179f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca8b  00000000  00000000  0003dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb932  00000000  00000000  0004a573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca0  00000000  00000000  00135ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00138b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ac0 	.word	0x08005ac0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005ac0 	.word	0x08005ac0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b0aa      	sub	sp, #168	@ 0xa8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 f920 	bl	80017fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 fb07 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fbc9 	bl	8000d54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c2:	f000 fb97 	bl	8000cf4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80005c6:	f000 fb5f 	bl	8000c88 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */


  // Start UART receive interrupt
  HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	496f      	ldr	r1, [pc, #444]	@ (800078c <main+0x1dc>)
 80005ce:	4870      	ldr	r0, [pc, #448]	@ (8000790 <main+0x1e0>)
 80005d0:	f003 fb11 	bl	8003bf6 <HAL_UART_Receive_IT>
  // Prompt user for input
  char prompt[] = "Enter an integer: \r\n";
 80005d4:	4b6f      	ldr	r3, [pc, #444]	@ (8000794 <main+0x1e4>)
 80005d6:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e4:	6020      	str	r0, [r4, #0]
 80005e6:	3404      	adds	r4, #4
 80005e8:	7021      	strb	r1, [r4, #0]


  HAL_UART_Transmit(&huart3, (uint8_t*)prompt, strlen(prompt), HAL_MAX_DELAY);
 80005ea:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe0e 	bl	8000210 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	4863      	ldr	r0, [pc, #396]	@ (8000790 <main+0x1e0>)
 8000602:	f003 fa6f 	bl	8003ae4 <HAL_UART_Transmit>




  // Start CAN with error reporting
  Debug_Print("Starting CAN\r\n");
 8000606:	4864      	ldr	r0, [pc, #400]	@ (8000798 <main+0x1e8>)
 8000608:	f000 feda 	bl	80013c0 <Debug_Print>
  HAL_StatusTypeDef can_status = HAL_CAN_Start(&hcan1);
 800060c:	4863      	ldr	r0, [pc, #396]	@ (800079c <main+0x1ec>)
 800060e:	f001 fb4f 	bl	8001cb0 <HAL_CAN_Start>
 8000612:	4603      	mov	r3, r0
 8000614:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  if (can_status != HAL_OK) {
 8000618:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00e      	beq.n	800063e <main+0x8e>
    char buf[48];
    snprintf(buf, sizeof(buf), "CAN Start Failed: Error Code 0x%08lX\r\n", HAL_CAN_GetError(&hcan1));
 8000620:	485e      	ldr	r0, [pc, #376]	@ (800079c <main+0x1ec>)
 8000622:	f001 fd9f 	bl	8002164 <HAL_CAN_GetError>
 8000626:	4603      	mov	r3, r0
 8000628:	4638      	mov	r0, r7
 800062a:	4a5d      	ldr	r2, [pc, #372]	@ (80007a0 <main+0x1f0>)
 800062c:	2130      	movs	r1, #48	@ 0x30
 800062e:	f004 fd93 	bl	8005158 <sniprintf>
    Debug_Print(buf);
 8000632:	463b      	mov	r3, r7
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fec3 	bl	80013c0 <Debug_Print>
    Error_Handler();
 800063a:	f000 ff41 	bl	80014c0 <Error_Handler>
  }
  Delay_ms(200);
 800063e:	20c8      	movs	r0, #200	@ 0xc8
 8000640:	f000 feb2 	bl	80013a8 <Delay_ms>


  Debug_Print("Starting CANopen Motor Control\r\n");
 8000644:	4857      	ldr	r0, [pc, #348]	@ (80007a4 <main+0x1f4>)
 8000646:	f000 febb 	bl	80013c0 <Debug_Print>

  // CAN filter: Accept all IDs
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	677b      	str	r3, [r7, #116]	@ 0x74
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800064e:	2300      	movs	r3, #0
 8000650:	67bb      	str	r3, [r7, #120]	@ 0x78
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000652:	2301      	movs	r3, #1
 8000654:	67fb      	str	r3, [r7, #124]	@ 0x7c
  sFilterConfig.FilterIdHigh = 0x0000;
 8000656:	2300      	movs	r3, #0
 8000658:	663b      	str	r3, [r7, #96]	@ 0x60
  sFilterConfig.FilterIdLow = 0x0000;
 800065a:	2300      	movs	r3, #0
 800065c:	667b      	str	r3, [r7, #100]	@ 0x64
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800065e:	2300      	movs	r3, #0
 8000660:	66bb      	str	r3, [r7, #104]	@ 0x68
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000662:	2300      	movs	r3, #0
 8000664:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000666:	2300      	movs	r3, #0
 8000668:	673b      	str	r3, [r7, #112]	@ 0x70
  sFilterConfig.FilterActivation = ENABLE;
 800066a:	2301      	movs	r3, #1
 800066c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000670:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000674:	4619      	mov	r1, r3
 8000676:	4849      	ldr	r0, [pc, #292]	@ (800079c <main+0x1ec>)
 8000678:	f001 fa3c 	bl	8001af4 <HAL_CAN_ConfigFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <main+0xdc>
    Debug_Print("CAN Filter Config Failed\r\n");
 8000682:	4849      	ldr	r0, [pc, #292]	@ (80007a8 <main+0x1f8>)
 8000684:	f000 fe9c 	bl	80013c0 <Debug_Print>
    Error_Handler();
 8000688:	f000 ff1a 	bl	80014c0 <Error_Handler>
  }
  Delay_ms(200);
 800068c:	20c8      	movs	r0, #200	@ 0xc8
 800068e:	f000 fe8b 	bl	80013a8 <Delay_ms>


      // Start NMT
        Debug_Print("Sending NMT Start\r\n");
 8000692:	4846      	ldr	r0, [pc, #280]	@ (80007ac <main+0x1fc>)
 8000694:	f000 fe94 	bl	80013c0 <Debug_Print>
        CANopen_NMT_Start(CANOPEN_NODE_ID);
 8000698:	2001      	movs	r0, #1
 800069a:	f000 fd05 	bl	80010a8 <CANopen_NMT_Start>
        Delay_ms(200);
 800069e:	20c8      	movs	r0, #200	@ 0xc8
 80006a0:	f000 fe82 	bl	80013a8 <Delay_ms>

        // Check statusword
        uint16_t status = CANopen_SDO_Read16(&hcan1, OD_STATUSWORD, 0x00);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f246 0141 	movw	r1, #24641	@ 0x6041
 80006aa:	483c      	ldr	r0, [pc, #240]	@ (800079c <main+0x1ec>)
 80006ac:	f000 fda4 	bl	80011f8 <CANopen_SDO_Read16>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        char buf[48];
        snprintf(buf, sizeof(buf), "Initial Statusword: 0x%04X\r\n", status);
 80006b6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80006ba:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80006be:	4a3c      	ldr	r2, [pc, #240]	@ (80007b0 <main+0x200>)
 80006c0:	2130      	movs	r1, #48	@ 0x30
 80006c2:	f004 fd49 	bl	8005158 <sniprintf>
        Debug_Print(buf);
 80006c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fe78 	bl	80013c0 <Debug_Print>
        if (status == 0xFFFF) {
 80006d0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80006d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006d8:	4293      	cmp	r3, r2
 80006da:	d104      	bne.n	80006e6 <main+0x136>
          Debug_Print("SDO Read Failed: No response\r\n");
 80006dc:	4835      	ldr	r0, [pc, #212]	@ (80007b4 <main+0x204>)
 80006de:	f000 fe6f 	bl	80013c0 <Debug_Print>
          Error_Handler();
 80006e2:	f000 feed 	bl	80014c0 <Error_Handler>
        }
        Delay_ms(200);
 80006e6:	20c8      	movs	r0, #200	@ 0xc8
 80006e8:	f000 fe5e 	bl	80013a8 <Delay_ms>
*/



          // Reset state machine
            if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x0000) != HAL_OK) {  // Disable Voltage
 80006ec:	2300      	movs	r3, #0
 80006ee:	2200      	movs	r2, #0
 80006f0:	f246 0140 	movw	r1, #24640	@ 0x6040
 80006f4:	4829      	ldr	r0, [pc, #164]	@ (800079c <main+0x1ec>)
 80006f6:	f000 fd1b 	bl	8001130 <CANopen_SDO_Write16>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d004      	beq.n	800070a <main+0x15a>
              Debug_Print("Disable Voltage Failed\r\n");
 8000700:	482d      	ldr	r0, [pc, #180]	@ (80007b8 <main+0x208>)
 8000702:	f000 fe5d 	bl	80013c0 <Debug_Print>
              Error_Handler();
 8000706:	f000 fedb 	bl	80014c0 <Error_Handler>
            }
            Delay_ms(200);
 800070a:	20c8      	movs	r0, #200	@ 0xc8
 800070c:	f000 fe4c 	bl	80013a8 <Delay_ms>
            status = CANopen_SDO_Read16(&hcan1, OD_STATUSWORD, 0x00);
 8000710:	2200      	movs	r2, #0
 8000712:	f246 0141 	movw	r1, #24641	@ 0x6041
 8000716:	4821      	ldr	r0, [pc, #132]	@ (800079c <main+0x1ec>)
 8000718:	f000 fd6e 	bl	80011f8 <CANopen_SDO_Read16>
 800071c:	4603      	mov	r3, r0
 800071e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
            snprintf(buf, sizeof(buf), "Status after Disable: 0x%04X\r\n", status);
 8000722:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000726:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800072a:	4a24      	ldr	r2, [pc, #144]	@ (80007bc <main+0x20c>)
 800072c:	2130      	movs	r1, #48	@ 0x30
 800072e:	f004 fd13 	bl	8005158 <sniprintf>
            Debug_Print(buf);
 8000732:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fe42 	bl	80013c0 <Debug_Print>
*/



                // Check homing completion by position (method 35 sets position to 0)
                int32_t current_pos = (int32_t)CANopen_SDO_Read32(&hcan1, OD_ACTUAL_POSITION, 0x00);
 800073c:	2200      	movs	r2, #0
 800073e:	f246 0164 	movw	r1, #24676	@ 0x6064
 8000742:	4816      	ldr	r0, [pc, #88]	@ (800079c <main+0x1ec>)
 8000744:	f000 fdc2 	bl	80012cc <CANopen_SDO_Read32>
 8000748:	4603      	mov	r3, r0
 800074a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                  snprintf(buf, sizeof(buf), "Position after homing: %ld steps\r\n", current_pos);
 800074e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000756:	4a1a      	ldr	r2, [pc, #104]	@ (80007c0 <main+0x210>)
 8000758:	2130      	movs	r1, #48	@ 0x30
 800075a:	f004 fcfd 	bl	8005158 <sniprintf>
                  Debug_Print(buf);
 800075e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fe2c 	bl	80013c0 <Debug_Print>
                  if (current_pos == 0xFFFFFFFF) {
 8000768:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800076c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000770:	d104      	bne.n	800077c <main+0x1cc>
                    Debug_Print("Read Position Failed\r\n");
 8000772:	4814      	ldr	r0, [pc, #80]	@ (80007c4 <main+0x214>)
 8000774:	f000 fe24 	bl	80013c0 <Debug_Print>
                    Error_Handler();
 8000778:	f000 fea2 	bl	80014c0 <Error_Handler>
                  }
                  if (current_pos != 0) {
 800077c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d023      	beq.n	80007cc <main+0x21c>
                    Debug_Print("Homing Failed: Position not zero\r\n");
 8000784:	4810      	ldr	r0, [pc, #64]	@ (80007c8 <main+0x218>)
 8000786:	f000 fe1b 	bl	80013c0 <Debug_Print>
 800078a:	e022      	b.n	80007d2 <main+0x222>
 800078c:	20000128 	.word	0x20000128
 8000790:	200000a0 	.word	0x200000a0
 8000794:	08005f10 	.word	0x08005f10
 8000798:	08005ad8 	.word	0x08005ad8
 800079c:	20000078 	.word	0x20000078
 80007a0:	08005ae8 	.word	0x08005ae8
 80007a4:	08005b10 	.word	0x08005b10
 80007a8:	08005b34 	.word	0x08005b34
 80007ac:	08005b50 	.word	0x08005b50
 80007b0:	08005b64 	.word	0x08005b64
 80007b4:	08005b84 	.word	0x08005b84
 80007b8:	08005ba4 	.word	0x08005ba4
 80007bc:	08005bc0 	.word	0x08005bc0
 80007c0:	08005be0 	.word	0x08005be0
 80007c4:	08005c04 	.word	0x08005c04
 80007c8:	08005c1c 	.word	0x08005c1c
                    // Proceed anyway, as motion works
                      } else {
                        Debug_Print("Homing Successful\r\n");
 80007cc:	48d7      	ldr	r0, [pc, #860]	@ (8000b2c <main+0x57c>)
 80007ce:	f000 fdf7 	bl	80013c0 <Debug_Print>
                      }
                      status = CANopen_SDO_Read16(&hcan1, OD_STATUSWORD, 0x00);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f246 0141 	movw	r1, #24641	@ 0x6041
 80007d8:	48d5      	ldr	r0, [pc, #852]	@ (8000b30 <main+0x580>)
 80007da:	f000 fd0d 	bl	80011f8 <CANopen_SDO_Read16>
 80007de:	4603      	mov	r3, r0
 80007e0:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
                      snprintf(buf, sizeof(buf), "Final Homing Statusword: 0x%04X\r\n", status);
 80007e4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80007e8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80007ec:	4ad1      	ldr	r2, [pc, #836]	@ (8000b34 <main+0x584>)
 80007ee:	2130      	movs	r1, #48	@ 0x30
 80007f0:	f004 fcb2 	bl	8005158 <sniprintf>
                      Debug_Print(buf);
 80007f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fde1 	bl	80013c0 <Debug_Print>


                      // Configure velocity and acceleration
                        if (CANopen_SDO_Write32(&hcan1, OD_PROFILE_VELOCITY, 0x00, 5000) != HAL_OK) {  // 5000 inc/s
 80007fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000802:	2200      	movs	r2, #0
 8000804:	f246 0181 	movw	r1, #24705	@ 0x6081
 8000808:	48c9      	ldr	r0, [pc, #804]	@ (8000b30 <main+0x580>)
 800080a:	f000 fcc3 	bl	8001194 <CANopen_SDO_Write32>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <main+0x26e>
                          Debug_Print("Set Velocity Failed\r\n");
 8000814:	48c8      	ldr	r0, [pc, #800]	@ (8000b38 <main+0x588>)
 8000816:	f000 fdd3 	bl	80013c0 <Debug_Print>
                          Error_Handler();
 800081a:	f000 fe51 	bl	80014c0 <Error_Handler>
                        }
                        if (CANopen_SDO_Write32(&hcan1, OD_PROFILE_ACCEL, 0x00, 500) != HAL_OK) {
 800081e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000822:	2200      	movs	r2, #0
 8000824:	f246 0183 	movw	r1, #24707	@ 0x6083
 8000828:	48c1      	ldr	r0, [pc, #772]	@ (8000b30 <main+0x580>)
 800082a:	f000 fcb3 	bl	8001194 <CANopen_SDO_Write32>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d004      	beq.n	800083e <main+0x28e>
                          Debug_Print("Set Acceleration Failed\r\n");
 8000834:	48c1      	ldr	r0, [pc, #772]	@ (8000b3c <main+0x58c>)
 8000836:	f000 fdc3 	bl	80013c0 <Debug_Print>
                          Error_Handler();
 800083a:	f000 fe41 	bl	80014c0 <Error_Handler>
                        }
                        if (CANopen_SDO_Write32(&hcan1, OD_PROFILE_DECEL, 0x00, 500) != HAL_OK) {
 800083e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000842:	2200      	movs	r2, #0
 8000844:	f246 0184 	movw	r1, #24708	@ 0x6084
 8000848:	48b9      	ldr	r0, [pc, #740]	@ (8000b30 <main+0x580>)
 800084a:	f000 fca3 	bl	8001194 <CANopen_SDO_Write32>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d004      	beq.n	800085e <main+0x2ae>
                          Debug_Print("Set Deceleration Failed\r\n");
 8000854:	48ba      	ldr	r0, [pc, #744]	@ (8000b40 <main+0x590>)
 8000856:	f000 fdb3 	bl	80013c0 <Debug_Print>
                          Error_Handler();
 800085a:	f000 fe31 	bl	80014c0 <Error_Handler>
                        }
                        Delay_ms(50);
 800085e:	2032      	movs	r0, #50	@ 0x32
 8000860:	f000 fda2 	bl	80013a8 <Delay_ms>




                        status = CANopen_SDO_Read16(&hcan1, 0x2707, 0x00);
 8000864:	2200      	movs	r2, #0
 8000866:	f242 7107 	movw	r1, #9991	@ 0x2707
 800086a:	48b1      	ldr	r0, [pc, #708]	@ (8000b30 <main+0x580>)
 800086c:	f000 fcc4 	bl	80011f8 <CANopen_SDO_Read16>
 8000870:	4603      	mov	r3, r0
 8000872:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
                        snprintf(buf, sizeof(buf), "CAN bit rate: 0x%04X\r\n", status);
 8000876:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800087a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800087e:	4ab1      	ldr	r2, [pc, #708]	@ (8000b44 <main+0x594>)
 8000880:	2130      	movs	r1, #48	@ 0x30
 8000882:	f004 fc69 	bl	8005158 <sniprintf>
                        Debug_Print(buf);
 8000886:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fd98 	bl	80013c0 <Debug_Print>
                        Delay_ms(50);
 8000890:	2032      	movs	r0, #50	@ 0x32
 8000892:	f000 fd89 	bl	80013a8 <Delay_ms>
                        status = CANopen_SDO_Read16(&hcan1, 0x2708, 0x00);
 8000896:	2200      	movs	r2, #0
 8000898:	f242 7108 	movw	r1, #9992	@ 0x2708
 800089c:	48a4      	ldr	r0, [pc, #656]	@ (8000b30 <main+0x580>)
 800089e:	f000 fcab 	bl	80011f8 <CANopen_SDO_Read16>
 80008a2:	4603      	mov	r3, r0
 80008a4:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
                        snprintf(buf, sizeof(buf), "node ID: 0x%04X\r\n", status);
 80008a8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80008ac:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80008b0:	4aa5      	ldr	r2, [pc, #660]	@ (8000b48 <main+0x598>)
 80008b2:	2130      	movs	r1, #48	@ 0x30
 80008b4:	f004 fc50 	bl	8005158 <sniprintf>
                        Debug_Print(buf);
 80008b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fd7f 	bl	80013c0 <Debug_Print>
                        Delay_ms(50);
 80008c2:	2032      	movs	r0, #50	@ 0x32
 80008c4:	f000 fd70 	bl	80013a8 <Delay_ms>


                         // CiA 402 state machine

                        // Disable limit switches
                        if (CANopen_SDO_Write32(&hcan1, OD_LIMIT_SWITCHES, 0x00, 0x00000003) != HAL_OK) {
 80008c8:	2303      	movs	r3, #3
 80008ca:	2200      	movs	r2, #0
 80008cc:	f242 0105 	movw	r1, #8197	@ 0x2005
 80008d0:	4897      	ldr	r0, [pc, #604]	@ (8000b30 <main+0x580>)
 80008d2:	f000 fc5f 	bl	8001194 <CANopen_SDO_Write32>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d004      	beq.n	80008e6 <main+0x336>
                          Debug_Print("Set Limit Switches Failed\r\n");
 80008dc:	489b      	ldr	r0, [pc, #620]	@ (8000b4c <main+0x59c>)
 80008de:	f000 fd6f 	bl	80013c0 <Debug_Print>
                          Error_Handler();
 80008e2:	f000 fded 	bl	80014c0 <Error_Handler>
                        }
                        Delay_ms(100);
 80008e6:	2064      	movs	r0, #100	@ 0x64
 80008e8:	f000 fd5e 	bl	80013a8 <Delay_ms>


                           Debug_Print("Starting CiA 402 Transition\r\n");
 80008ec:	4898      	ldr	r0, [pc, #608]	@ (8000b50 <main+0x5a0>)
 80008ee:	f000 fd67 	bl	80013c0 <Debug_Print>
                           if (CANopen_SDO_Write8(&hcan1, OD_MODE_OPERATION, 0x00, 0x01) != HAL_OK) {
 80008f2:	2301      	movs	r3, #1
 80008f4:	2200      	movs	r2, #0
 80008f6:	f246 0160 	movw	r1, #24672	@ 0x6060
 80008fa:	488d      	ldr	r0, [pc, #564]	@ (8000b30 <main+0x580>)
 80008fc:	f000 fbea 	bl	80010d4 <CANopen_SDO_Write8>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d004      	beq.n	8000910 <main+0x360>
                           Debug_Print("Switch On Failed\r\n");
 8000906:	4893      	ldr	r0, [pc, #588]	@ (8000b54 <main+0x5a4>)
 8000908:	f000 fd5a 	bl	80013c0 <Debug_Print>
                           Error_Handler();
 800090c:	f000 fdd8 	bl	80014c0 <Error_Handler>
                           }
                           Delay_ms(100);
 8000910:	2064      	movs	r0, #100	@ 0x64
 8000912:	f000 fd49 	bl	80013a8 <Delay_ms>

                           if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x0006) != HAL_OK) {
 8000916:	2306      	movs	r3, #6
 8000918:	2200      	movs	r2, #0
 800091a:	f246 0140 	movw	r1, #24640	@ 0x6040
 800091e:	4884      	ldr	r0, [pc, #528]	@ (8000b30 <main+0x580>)
 8000920:	f000 fc06 	bl	8001130 <CANopen_SDO_Write16>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <main+0x384>
                             Debug_Print("Switch On Failed\r\n");
 800092a:	488a      	ldr	r0, [pc, #552]	@ (8000b54 <main+0x5a4>)
 800092c:	f000 fd48 	bl	80013c0 <Debug_Print>
                             Error_Handler();
 8000930:	f000 fdc6 	bl	80014c0 <Error_Handler>
                           }
                           Delay_ms(100);
 8000934:	2064      	movs	r0, #100	@ 0x64
 8000936:	f000 fd37 	bl	80013a8 <Delay_ms>
                           status = CANopen_SDO_Read16(&hcan1, OD_STATUSWORD, 0x00);
 800093a:	2200      	movs	r2, #0
 800093c:	f246 0141 	movw	r1, #24641	@ 0x6041
 8000940:	487b      	ldr	r0, [pc, #492]	@ (8000b30 <main+0x580>)
 8000942:	f000 fc59 	bl	80011f8 <CANopen_SDO_Read16>
 8000946:	4603      	mov	r3, r0
 8000948:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
                           snprintf(buf, sizeof(buf), "Status after Switch On: 0x%04X\r\n", status);
 800094c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000950:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000954:	4a80      	ldr	r2, [pc, #512]	@ (8000b58 <main+0x5a8>)
 8000956:	2130      	movs	r1, #48	@ 0x30
 8000958:	f004 fbfe 	bl	8005158 <sniprintf>
                           Debug_Print(buf);
 800095c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fd2d 	bl	80013c0 <Debug_Print>

                           if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x0007) != HAL_OK) {
 8000966:	2307      	movs	r3, #7
 8000968:	2200      	movs	r2, #0
 800096a:	f246 0140 	movw	r1, #24640	@ 0x6040
 800096e:	4870      	ldr	r0, [pc, #448]	@ (8000b30 <main+0x580>)
 8000970:	f000 fbde 	bl	8001130 <CANopen_SDO_Write16>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <main+0x3d4>
                             Debug_Print("Switched On Failed\r\n");
 800097a:	4878      	ldr	r0, [pc, #480]	@ (8000b5c <main+0x5ac>)
 800097c:	f000 fd20 	bl	80013c0 <Debug_Print>
                             Error_Handler();
 8000980:	f000 fd9e 	bl	80014c0 <Error_Handler>
                           }
                           Delay_ms(100);
 8000984:	2064      	movs	r0, #100	@ 0x64
 8000986:	f000 fd0f 	bl	80013a8 <Delay_ms>
                           status = CANopen_SDO_Read16(&hcan1, OD_STATUSWORD, 0x00);
 800098a:	2200      	movs	r2, #0
 800098c:	f246 0141 	movw	r1, #24641	@ 0x6041
 8000990:	4867      	ldr	r0, [pc, #412]	@ (8000b30 <main+0x580>)
 8000992:	f000 fc31 	bl	80011f8 <CANopen_SDO_Read16>
 8000996:	4603      	mov	r3, r0
 8000998:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
                           snprintf(buf, sizeof(buf), "Status after Switched On: 0x%04X\r\n", status);
 800099c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80009a0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80009a4:	4a6e      	ldr	r2, [pc, #440]	@ (8000b60 <main+0x5b0>)
 80009a6:	2130      	movs	r1, #48	@ 0x30
 80009a8:	f004 fbd6 	bl	8005158 <sniprintf>
                           Debug_Print(buf);
 80009ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fd05 	bl	80013c0 <Debug_Print>

                           if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x000F) != HAL_OK) {
 80009b6:	230f      	movs	r3, #15
 80009b8:	2200      	movs	r2, #0
 80009ba:	f246 0140 	movw	r1, #24640	@ 0x6040
 80009be:	485c      	ldr	r0, [pc, #368]	@ (8000b30 <main+0x580>)
 80009c0:	f000 fbb6 	bl	8001130 <CANopen_SDO_Write16>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d004      	beq.n	80009d4 <main+0x424>
                             Debug_Print("Enable Operation Failed\r\n");
 80009ca:	4866      	ldr	r0, [pc, #408]	@ (8000b64 <main+0x5b4>)
 80009cc:	f000 fcf8 	bl	80013c0 <Debug_Print>
                             Error_Handler();
 80009d0:	f000 fd76 	bl	80014c0 <Error_Handler>
                           }

                           // Set target position
                           if (CANopen_SDO_Write32(&hcan1, OD_TARGET_POSITION, 0x00, TARGET_POSITION) != HAL_OK) {
 80009d4:	f44f 5348 	mov.w	r3, #12800	@ 0x3200
 80009d8:	2200      	movs	r2, #0
 80009da:	f246 017a 	movw	r1, #24698	@ 0x607a
 80009de:	4854      	ldr	r0, [pc, #336]	@ (8000b30 <main+0x580>)
 80009e0:	f000 fbd8 	bl	8001194 <CANopen_SDO_Write32>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d004      	beq.n	80009f4 <main+0x444>
                             Debug_Print("Set Position Failed\r\n");
 80009ea:	485f      	ldr	r0, [pc, #380]	@ (8000b68 <main+0x5b8>)
 80009ec:	f000 fce8 	bl	80013c0 <Debug_Print>
                             Error_Handler();
 80009f0:	f000 fd66 	bl	80014c0 <Error_Handler>
                           }


                           Delay_ms(100);
 80009f4:	2064      	movs	r0, #100	@ 0x64
 80009f6:	f000 fcd7 	bl	80013a8 <Delay_ms>
                           status = CANopen_SDO_Read16(&hcan1, OD_STATUSWORD, 0x00);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f246 0141 	movw	r1, #24641	@ 0x6041
 8000a00:	484b      	ldr	r0, [pc, #300]	@ (8000b30 <main+0x580>)
 8000a02:	f000 fbf9 	bl	80011f8 <CANopen_SDO_Read16>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
                           snprintf(buf, sizeof(buf), "Status after Enable Op: 0x%04X\r\n", status);
 8000a0c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000a10:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000a14:	4a55      	ldr	r2, [pc, #340]	@ (8000b6c <main+0x5bc>)
 8000a16:	2130      	movs	r1, #48	@ 0x30
 8000a18:	f004 fb9e 	bl	8005158 <sniprintf>
                           Debug_Print(buf);
 8000a1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fccd 	bl	80013c0 <Debug_Print>

                           if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x001F) != HAL_OK) {
 8000a26:	231f      	movs	r3, #31
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f246 0140 	movw	r1, #24640	@ 0x6040
 8000a2e:	4840      	ldr	r0, [pc, #256]	@ (8000b30 <main+0x580>)
 8000a30:	f000 fb7e 	bl	8001130 <CANopen_SDO_Write16>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d004      	beq.n	8000a44 <main+0x494>
                             Debug_Print("Mark the new target position as active Failed\r\n");
 8000a3a:	484d      	ldr	r0, [pc, #308]	@ (8000b70 <main+0x5c0>)
 8000a3c:	f000 fcc0 	bl	80013c0 <Debug_Print>
                             Error_Handler();
 8000a40:	f000 fd3e 	bl	80014c0 <Error_Handler>
                           }
                           Delay_ms(100);
 8000a44:	2064      	movs	r0, #100	@ 0x64
 8000a46:	f000 fcaf 	bl	80013a8 <Delay_ms>
                           Debug_Print("Mark the new target position as active Sent\r\n");
 8000a4a:	484a      	ldr	r0, [pc, #296]	@ (8000b74 <main+0x5c4>)
 8000a4c:	f000 fcb8 	bl	80013c0 <Debug_Print>


                           if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x000F) != HAL_OK) {
 8000a50:	230f      	movs	r3, #15
 8000a52:	2200      	movs	r2, #0
 8000a54:	f246 0140 	movw	r1, #24640	@ 0x6040
 8000a58:	4835      	ldr	r0, [pc, #212]	@ (8000b30 <main+0x580>)
 8000a5a:	f000 fb69 	bl	8001130 <CANopen_SDO_Write16>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d004      	beq.n	8000a6e <main+0x4be>
                              Debug_Print("Reset the activationn Failed\r\n");
 8000a64:	4844      	ldr	r0, [pc, #272]	@ (8000b78 <main+0x5c8>)
 8000a66:	f000 fcab 	bl	80013c0 <Debug_Print>
                              Error_Handler();
 8000a6a:	f000 fd29 	bl	80014c0 <Error_Handler>
                           }
                           Delay_ms(100);
 8000a6e:	2064      	movs	r0, #100	@ 0x64
 8000a70:	f000 fc9a 	bl	80013a8 <Delay_ms>


                           // Poll statusword for target reached
                             do {
                               status = CANopen_SDO_Read16(&hcan1, OD_STATUSWORD, 0x00);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f246 0141 	movw	r1, #24641	@ 0x6041
 8000a7a:	482d      	ldr	r0, [pc, #180]	@ (8000b30 <main+0x580>)
 8000a7c:	f000 fbbc 	bl	80011f8 <CANopen_SDO_Read16>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
                               snprintf(buf, sizeof(buf), "Statusword: 0x%04X\r\n", status);
 8000a86:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000a8a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8000b7c <main+0x5cc>)
 8000a90:	2130      	movs	r1, #48	@ 0x30
 8000a92:	f004 fb61 	bl	8005158 <sniprintf>
                               Debug_Print(buf);
 8000a96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fc90 	bl	80013c0 <Debug_Print>
                               if (status == 0xFFFF) {
 8000aa0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d104      	bne.n	8000ab6 <main+0x506>
                                 Debug_Print("SDO Read Failed\r\n");
 8000aac:	4834      	ldr	r0, [pc, #208]	@ (8000b80 <main+0x5d0>)
 8000aae:	f000 fc87 	bl	80013c0 <Debug_Print>
                                 Error_Handler();
 8000ab2:	f000 fd05 	bl	80014c0 <Error_Handler>
                               }
                               current_pos = (int32_t)CANopen_SDO_Read32(&hcan1, OD_ACTUAL_POSITION, 0x00);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f246 0164 	movw	r1, #24676	@ 0x6064
 8000abc:	481c      	ldr	r0, [pc, #112]	@ (8000b30 <main+0x580>)
 8000abe:	f000 fc05 	bl	80012cc <CANopen_SDO_Read32>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                               snprintf(buf, sizeof(buf), "Current Position: %ld steps\r\n", current_pos);
 8000ac8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000acc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8000b84 <main+0x5d4>)
 8000ad2:	2130      	movs	r1, #48	@ 0x30
 8000ad4:	f004 fb40 	bl	8005158 <sniprintf>
                               Debug_Print(buf);
 8000ad8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fc6f 	bl	80013c0 <Debug_Print>
                               Delay_ms(100);
 8000ae2:	2064      	movs	r0, #100	@ 0x64
 8000ae4:	f000 fc60 	bl	80013a8 <Delay_ms>
                             } while (!(status & 0x0400));  // Bit 10: Target reached
 8000ae8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0bf      	beq.n	8000a74 <main+0x4c4>

                             // Stop
                             if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x0002) != HAL_OK) {  // Quick Stop
 8000af4:	2302      	movs	r3, #2
 8000af6:	2200      	movs	r2, #0
 8000af8:	f246 0140 	movw	r1, #24640	@ 0x6040
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <main+0x580>)
 8000afe:	f000 fb17 	bl	8001130 <CANopen_SDO_Write16>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <main+0x55e>
                               Debug_Print("Quick Stop Failed\r\n");
 8000b08:	481f      	ldr	r0, [pc, #124]	@ (8000b88 <main+0x5d8>)
 8000b0a:	f000 fc59 	bl	80013c0 <Debug_Print>
                             }
                             Delay_ms(200);
 8000b0e:	20c8      	movs	r0, #200	@ 0xc8
 8000b10:	f000 fc4a 	bl	80013a8 <Delay_ms>
                             if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x0000) != HAL_OK) {  // Disable Voltage
 8000b14:	2300      	movs	r3, #0
 8000b16:	2200      	movs	r2, #0
 8000b18:	f246 0140 	movw	r1, #24640	@ 0x6040
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <main+0x580>)
 8000b1e:	f000 fb07 	bl	8001130 <CANopen_SDO_Write16>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d034      	beq.n	8000b92 <main+0x5e2>
 8000b28:	e030      	b.n	8000b8c <main+0x5dc>
 8000b2a:	bf00      	nop
 8000b2c:	08005c40 	.word	0x08005c40
 8000b30:	20000078 	.word	0x20000078
 8000b34:	08005c54 	.word	0x08005c54
 8000b38:	08005c78 	.word	0x08005c78
 8000b3c:	08005c90 	.word	0x08005c90
 8000b40:	08005cac 	.word	0x08005cac
 8000b44:	08005cc8 	.word	0x08005cc8
 8000b48:	08005ce0 	.word	0x08005ce0
 8000b4c:	08005cf4 	.word	0x08005cf4
 8000b50:	08005d10 	.word	0x08005d10
 8000b54:	08005d30 	.word	0x08005d30
 8000b58:	08005d44 	.word	0x08005d44
 8000b5c:	08005d68 	.word	0x08005d68
 8000b60:	08005d80 	.word	0x08005d80
 8000b64:	08005da4 	.word	0x08005da4
 8000b68:	08005dc0 	.word	0x08005dc0
 8000b6c:	08005dd8 	.word	0x08005dd8
 8000b70:	08005dfc 	.word	0x08005dfc
 8000b74:	08005e2c 	.word	0x08005e2c
 8000b78:	08005e5c 	.word	0x08005e5c
 8000b7c:	08005e7c 	.word	0x08005e7c
 8000b80:	08005e94 	.word	0x08005e94
 8000b84:	08005ea8 	.word	0x08005ea8
 8000b88:	08005ec8 	.word	0x08005ec8
                               Debug_Print("Disable Voltage Failed\r\n");
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <main+0x60c>)
 8000b8e:	f000 fc17 	bl	80013c0 <Debug_Print>
                             }
                             Debug_Print("Motion Complete\r\n");
 8000b92:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <main+0x610>)
 8000b94:	f000 fc14 	bl	80013c0 <Debug_Print>



                             // Reset for next motion
                             if (CANopen_SDO_Write16(&hcan1, OD_CONTROLWORD, 0x00, 0x0006) != HAL_OK) {
 8000b98:	2306      	movs	r3, #6
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f246 0140 	movw	r1, #24640	@ 0x6040
 8000ba0:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <main+0x614>)
 8000ba2:	f000 fac5 	bl	8001130 <CANopen_SDO_Write16>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <main+0x602>
                               Debug_Print("reset for next motion Failed\r\n");
 8000bac:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <main+0x618>)
 8000bae:	f000 fc07 	bl	80013c0 <Debug_Print>
                             }
                             Debug_Print("Motion Complete\r\n");
 8000bb2:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <main+0x610>)
 8000bb4:	f000 fc04 	bl	80013c0 <Debug_Print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <main+0x608>
 8000bbc:	08005ba4 	.word	0x08005ba4
 8000bc0:	08005edc 	.word	0x08005edc
 8000bc4:	20000078 	.word	0x20000078
 8000bc8:	08005ef0 	.word	0x08005ef0

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b094      	sub	sp, #80	@ 0x50
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0320 	add.w	r3, r7, #32
 8000bd6:	2230      	movs	r2, #48	@ 0x30
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 faf0 	bl	80051c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bf0:	f001 fe60 	bl	80028b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <SystemClock_Config+0xb4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <SystemClock_Config+0xb4>)
 8000bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c00:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <SystemClock_Config+0xb4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <SystemClock_Config+0xb8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c14:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <SystemClock_Config+0xb8>)
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <SystemClock_Config+0xb8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c30:	2310      	movs	r3, #16
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fe49 	bl	80028d4 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c48:	f000 fc3a 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f8d8 	bl	8002e1c <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c72:	f000 fc25 	bl	80014c0 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	@ 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <MX_CAN1_Init+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000ca6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000caa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_CAN1_Init+0x64>)
 8000cd8:	f000 fe10 	bl	80018fc <HAL_CAN_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000ce2:	f000 fbed 	bl	80014c0 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000078 	.word	0x20000078
 8000cf0:	40006400 	.word	0x40006400

08000cf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000cfa:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <MX_USART3_UART_Init+0x5c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_USART3_UART_Init+0x58>)
 8000d38:	f002 fe86 	bl	8003a48 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d42:	f000 fbbd 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000a0 	.word	0x200000a0
 8000d50:	40004800 	.word	0x40004800

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	@ 0x30
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4ba4      	ldr	r3, [pc, #656]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4aa3      	ldr	r2, [pc, #652]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4ba1      	ldr	r3, [pc, #644]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d82:	4b9e      	ldr	r3, [pc, #632]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a9d      	ldr	r2, [pc, #628]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b9b      	ldr	r3, [pc, #620]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b98      	ldr	r3, [pc, #608]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a97      	ldr	r2, [pc, #604]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b95      	ldr	r3, [pc, #596]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b92      	ldr	r3, [pc, #584]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a91      	ldr	r2, [pc, #580]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b8f      	ldr	r3, [pc, #572]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	4b8c      	ldr	r3, [pc, #560]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a8b      	ldr	r2, [pc, #556]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b89      	ldr	r3, [pc, #548]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de2:	4b86      	ldr	r3, [pc, #536]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a85      	ldr	r2, [pc, #532]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b83      	ldr	r3, [pc, #524]	@ (8000ffc <MX_GPIO_Init+0x2a8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e00:	487f      	ldr	r0, [pc, #508]	@ (8001000 <MX_GPIO_Init+0x2ac>)
 8000e02:	f001 fd0b 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	487e      	ldr	r0, [pc, #504]	@ (8001004 <MX_GPIO_Init+0x2b0>)
 8000e0c:	f001 fd06 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4878      	ldr	r0, [pc, #480]	@ (8001008 <MX_GPIO_Init+0x2b4>)
 8000e28:	f001 fb4c 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e2c:	2332      	movs	r3, #50	@ 0x32
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	4870      	ldr	r0, [pc, #448]	@ (8001008 <MX_GPIO_Init+0x2b4>)
 8000e48:	f001 fb3c 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000e4c:	2382      	movs	r3, #130	@ 0x82
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4869      	ldr	r0, [pc, #420]	@ (800100c <MX_GPIO_Init+0x2b8>)
 8000e68:	f001 fb2c 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4861      	ldr	r0, [pc, #388]	@ (800100c <MX_GPIO_Init+0x2b8>)
 8000e88:	f001 fb1c 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e8c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4856      	ldr	r0, [pc, #344]	@ (8001000 <MX_GPIO_Init+0x2ac>)
 8000ea6:	f001 fb0d 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ebc:	230b      	movs	r3, #11
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	484e      	ldr	r0, [pc, #312]	@ (8001000 <MX_GPIO_Init+0x2ac>)
 8000ec8:	f001 fafc 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ecc:	2340      	movs	r3, #64	@ 0x40
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4848      	ldr	r0, [pc, #288]	@ (8001004 <MX_GPIO_Init+0x2b0>)
 8000ee4:	f001 faee 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4842      	ldr	r0, [pc, #264]	@ (8001004 <MX_GPIO_Init+0x2b0>)
 8000efc:	f001 fae2 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483a      	ldr	r0, [pc, #232]	@ (8001008 <MX_GPIO_Init+0x2b4>)
 8000f1e:	f001 fad1 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f22:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f34:	230a      	movs	r3, #10
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4833      	ldr	r0, [pc, #204]	@ (800100c <MX_GPIO_Init+0x2b8>)
 8000f40:	f001 fac0 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	482c      	ldr	r0, [pc, #176]	@ (800100c <MX_GPIO_Init+0x2b8>)
 8000f5a:	f001 fab3 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4824      	ldr	r0, [pc, #144]	@ (800100c <MX_GPIO_Init+0x2b8>)
 8000f7c:	f001 faa2 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f92:	230b      	movs	r3, #11
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4819      	ldr	r0, [pc, #100]	@ (8001004 <MX_GPIO_Init+0x2b0>)
 8000f9e:	f001 fa91 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	@ (8001000 <MX_GPIO_Init+0x2ac>)
 8000fbe:	f001 fa81 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc8:	2312      	movs	r3, #18
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4808      	ldr	r0, [pc, #32]	@ (8001000 <MX_GPIO_Init+0x2ac>)
 8000fe0:	f001 fa70 	bl	80024c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f001 f9a2 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fee:	2028      	movs	r0, #40	@ 0x28
 8000ff0:	f001 f9bb 	bl	800236a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	@ 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020400 	.word	0x40020400
 8001004:	40021800 	.word	0x40021800
 8001008:	40020800 	.word	0x40020800
 800100c:	40020000 	.word	0x40020000

08001010 <CANopen_SendFrame>:

/* USER CODE BEGIN 4 */


/* Function definitions (unchanged) */
HAL_StatusTypeDef CANopen_SendFrame(CAN_HandleTypeDef *hcan, uint32_t id, uint8_t *data, uint8_t len) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b09a      	sub	sp, #104	@ 0x68
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	70fb      	strb	r3, [r7, #3]
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  TxHeader.StdId = id;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxHeader.ExtId = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TxHeader.IDE = CAN_ID_STD;
 8001026:	2300      	movs	r3, #0
 8001028:	653b      	str	r3, [r7, #80]	@ 0x50
  TxHeader.RTR = CAN_RTR_DATA;
 800102a:	2300      	movs	r3, #0
 800102c:	657b      	str	r3, [r7, #84]	@ 0x54
  TxHeader.DLC = len;
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	65bb      	str	r3, [r7, #88]	@ 0x58

  HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
 8001032:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001036:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fe7b 	bl	8001d38 <HAL_CAN_AddTxMessage>
 8001042:	4603      	mov	r3, r0
 8001044:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if (ret != HAL_OK) {
 8001048:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800104c:	2b00      	cmp	r3, #0
 800104e:	d011      	beq.n	8001074 <CANopen_SendFrame+0x64>
    char buf[48];
    snprintf(buf, sizeof(buf), "CAN Tx Error: %lu\r\n", HAL_CAN_GetError(hcan));
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f001 f887 	bl	8002164 <HAL_CAN_GetError>
 8001056:	4603      	mov	r3, r0
 8001058:	f107 0014 	add.w	r0, r7, #20
 800105c:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <CANopen_SendFrame+0x94>)
 800105e:	2130      	movs	r1, #48	@ 0x30
 8001060:	f004 f87a 	bl	8005158 <sniprintf>
    Debug_Print(buf);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f9a9 	bl	80013c0 <Debug_Print>
    return ret;
 800106e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001072:	e013      	b.n	800109c <CANopen_SendFrame+0x8c>
  }

  uint32_t tickstart = HAL_GetTick();
 8001074:	f000 fc12 	bl	800189c <HAL_GetTick>
 8001078:	6638      	str	r0, [r7, #96]	@ 0x60
  while (HAL_CAN_IsTxMessagePending(hcan, TxMailbox) && (HAL_GetTick() - tickstart < 100)) {}
 800107a:	bf00      	nop
 800107c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800107e:	4619      	mov	r1, r3
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 ff29 	bl	8001ed8 <HAL_CAN_IsTxMessagePending>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <CANopen_SendFrame+0x8a>
 800108c:	f000 fc06 	bl	800189c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b63      	cmp	r3, #99	@ 0x63
 8001098:	d9f0      	bls.n	800107c <CANopen_SendFrame+0x6c>
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3768      	adds	r7, #104	@ 0x68
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	08005f28 	.word	0x08005f28

080010a8 <CANopen_NMT_Start>:

void CANopen_NMT_Start(uint8_t nodeId) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  uint8_t nmt[2] = {0x01, nodeId};
 80010b2:	2301      	movs	r3, #1
 80010b4:	733b      	strb	r3, [r7, #12]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	737b      	strb	r3, [r7, #13]
  CANopen_SendFrame(&hcan1, COB_ID_NMT, nmt, 2);
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	2302      	movs	r3, #2
 80010c0:	2100      	movs	r1, #0
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <CANopen_NMT_Start+0x28>)
 80010c4:	f7ff ffa4 	bl	8001010 <CANopen_SendFrame>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000078 	.word	0x20000078

080010d4 <CANopen_SDO_Write8>:

HAL_StatusTypeDef CANopen_SDO_Write8(CAN_HandleTypeDef *hcan, uint16_t index, uint8_t subidx, int8_t value) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	4608      	mov	r0, r1
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	807b      	strh	r3, [r7, #2]
 80010e6:	460b      	mov	r3, r1
 80010e8:	707b      	strb	r3, [r7, #1]
 80010ea:	4613      	mov	r3, r2
 80010ec:	703b      	strb	r3, [r7, #0]
  uint8_t sdo[8] = {0x2F, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx, (uint8_t)value, 0x00, 0x00, 0x00};
 80010ee:	232f      	movs	r3, #47	@ 0x2f
 80010f0:	723b      	strb	r3, [r7, #8]
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	727b      	strb	r3, [r7, #9]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	72bb      	strb	r3, [r7, #10]
 8001102:	787b      	ldrb	r3, [r7, #1]
 8001104:	72fb      	strb	r3, [r7, #11]
 8001106:	783b      	ldrb	r3, [r7, #0]
 8001108:	733b      	strb	r3, [r7, #12]
 800110a:	2300      	movs	r3, #0
 800110c:	737b      	strb	r3, [r7, #13]
 800110e:	2300      	movs	r3, #0
 8001110:	73bb      	strb	r3, [r7, #14]
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
  return CANopen_SendFrame(hcan, SDO_CLIENT_TX, sdo, 8);
 8001116:	f107 0208 	add.w	r2, r7, #8
 800111a:	2308      	movs	r3, #8
 800111c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff75 	bl	8001010 <CANopen_SendFrame>
 8001126:	4603      	mov	r3, r0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <CANopen_SDO_Write16>:

HAL_StatusTypeDef CANopen_SDO_Write16(CAN_HandleTypeDef *hcan, uint16_t index, uint8_t subidx, uint16_t value) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4603      	mov	r3, r0
 8001140:	817b      	strh	r3, [r7, #10]
 8001142:	460b      	mov	r3, r1
 8001144:	727b      	strb	r3, [r7, #9]
 8001146:	4613      	mov	r3, r2
 8001148:	80fb      	strh	r3, [r7, #6]
  uint8_t sdo[8] = {0x2B, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 800114a:	232b      	movs	r3, #43	@ 0x2b
 800114c:	743b      	strb	r3, [r7, #16]
 800114e:	897b      	ldrh	r3, [r7, #10]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	747b      	strb	r3, [r7, #17]
 8001154:	897b      	ldrh	r3, [r7, #10]
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b29b      	uxth	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	74bb      	strb	r3, [r7, #18]
 800115e:	7a7b      	ldrb	r3, [r7, #9]
 8001160:	74fb      	strb	r3, [r7, #19]
                    (uint8_t)(value & 0xFF), (uint8_t)(value >> 8), 0x00, 0x00};
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x2B, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8001166:	753b      	strb	r3, [r7, #20]
                    (uint8_t)(value & 0xFF), (uint8_t)(value >> 8), 0x00, 0x00};
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b29b      	uxth	r3, r3
 800116e:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x2B, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 8001170:	757b      	strb	r3, [r7, #21]
 8001172:	2300      	movs	r3, #0
 8001174:	75bb      	strb	r3, [r7, #22]
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]
  return CANopen_SendFrame(hcan, SDO_CLIENT_TX, sdo, 8);
 800117a:	f107 0210 	add.w	r2, r7, #16
 800117e:	2308      	movs	r3, #8
 8001180:	f240 6101 	movw	r1, #1537	@ 0x601
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff ff43 	bl	8001010 <CANopen_SendFrame>
 800118a:	4603      	mov	r3, r0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <CANopen_SDO_Write32>:

HAL_StatusTypeDef CANopen_SDO_Write32(CAN_HandleTypeDef *hcan, uint16_t index, uint8_t subidx, uint32_t value) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	817b      	strh	r3, [r7, #10]
 80011a2:	4613      	mov	r3, r2
 80011a4:	727b      	strb	r3, [r7, #9]
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 80011a6:	2323      	movs	r3, #35	@ 0x23
 80011a8:	743b      	strb	r3, [r7, #16]
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	747b      	strb	r3, [r7, #17]
 80011b0:	897b      	ldrh	r3, [r7, #10]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	74bb      	strb	r3, [r7, #18]
 80011ba:	7a7b      	ldrb	r3, [r7, #9]
 80011bc:	74fb      	strb	r3, [r7, #19]
                    (uint8_t)(value & 0xFF), (uint8_t)((value >> 8) & 0xFF),
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 80011c2:	753b      	strb	r3, [r7, #20]
                    (uint8_t)(value & 0xFF), (uint8_t)((value >> 8) & 0xFF),
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 80011ca:	757b      	strb	r3, [r7, #21]
                    (uint8_t)((value >> 16) & 0xFF), (uint8_t)(value >> 24)};
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0c1b      	lsrs	r3, r3, #16
 80011d0:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 80011d2:	75bb      	strb	r3, [r7, #22]
                    (uint8_t)((value >> 16) & 0xFF), (uint8_t)(value >> 24)};
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0e1b      	lsrs	r3, r3, #24
 80011d8:	b2db      	uxtb	r3, r3
  uint8_t sdo[8] = {0x23, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx,
 80011da:	75fb      	strb	r3, [r7, #23]
  return CANopen_SendFrame(hcan, SDO_CLIENT_TX, sdo, 8);
 80011dc:	f107 0210 	add.w	r2, r7, #16
 80011e0:	2308      	movs	r3, #8
 80011e2:	f240 6101 	movw	r1, #1537	@ 0x601
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff ff12 	bl	8001010 <CANopen_SendFrame>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <CANopen_SDO_Read16>:

uint16_t CANopen_SDO_Read16(CAN_HandleTypeDef *hcan, uint16_t index, uint8_t subidx) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	@ 0x38
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  uint8_t req[8] = {0x40, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx, 0x00, 0x00, 0x00, 0x00};
 8001208:	2340      	movs	r3, #64	@ 0x40
 800120a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	b29b      	uxth	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001222:	787b      	ldrb	r3, [r7, #1]
 8001224:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001234:	2300      	movs	r3, #0
 8001236:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800123a:	2300      	movs	r3, #0
 800123c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (CANopen_SendFrame(hcan, SDO_CLIENT_TX, req, 8) != HAL_OK) {
 8001240:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001244:	2308      	movs	r3, #8
 8001246:	f240 6101 	movw	r1, #1537	@ 0x601
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fee0 	bl	8001010 <CANopen_SendFrame>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <CANopen_SDO_Read16+0x6a>
    Debug_Print("SDO Read Send Failed\r\n");
 8001256:	481b      	ldr	r0, [pc, #108]	@ (80012c4 <CANopen_SDO_Read16+0xcc>)
 8001258:	f000 f8b2 	bl	80013c0 <Debug_Print>
    return 0xFFFF;
 800125c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001260:	e02c      	b.n	80012bc <CANopen_SDO_Read16+0xc4>
  }

  CAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[8];
  uint32_t tickstart = HAL_GetTick();
 8001262:	f000 fb1b 	bl	800189c <HAL_GetTick>
 8001266:	6378      	str	r0, [r7, #52]	@ 0x34
  while ((HAL_GetTick() - tickstart < 500)) {
 8001268:	e01b      	b.n	80012a2 <CANopen_SDO_Read16+0xaa>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	f107 0210 	add.w	r2, r7, #16
 8001272:	2100      	movs	r1, #0
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fe53 	bl	8001f20 <HAL_CAN_GetRxMessage>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d110      	bne.n	80012a2 <CANopen_SDO_Read16+0xaa>
      if (RxHeader.StdId == SDO_SERVER_RX && RxData[0] == 0x4B) {
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	f240 5281 	movw	r2, #1409	@ 0x581
 8001286:	4293      	cmp	r3, r2
 8001288:	d10b      	bne.n	80012a2 <CANopen_SDO_Read16+0xaa>
 800128a:	7a3b      	ldrb	r3, [r7, #8]
 800128c:	2b4b      	cmp	r3, #75	@ 0x4b
 800128e:	d108      	bne.n	80012a2 <CANopen_SDO_Read16+0xaa>
        return (RxData[4] | (RxData[5] << 8));
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	b21a      	sxth	r2, r3
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	e00c      	b.n	80012bc <CANopen_SDO_Read16+0xc4>
  while ((HAL_GetTick() - tickstart < 500)) {
 80012a2:	f000 fafb 	bl	800189c <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012b0:	d3db      	bcc.n	800126a <CANopen_SDO_Read16+0x72>
      }
    }
  }
  Debug_Print("SDO Read Timeout\r\n");
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <CANopen_SDO_Read16+0xd0>)
 80012b4:	f000 f884 	bl	80013c0 <Debug_Print>
  return 0xFFFF;
 80012b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3738      	adds	r7, #56	@ 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08005f3c 	.word	0x08005f3c
 80012c8:	08005f54 	.word	0x08005f54

080012cc <CANopen_SDO_Read32>:

uint32_t CANopen_SDO_Read32(CAN_HandleTypeDef *hcan, uint16_t index, uint8_t subidx) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  uint8_t req[8] = {0x40, (uint8_t)(index & 0xFF), (uint8_t)(index >> 8), subidx, 0x00, 0x00, 0x00, 0x00};
 80012dc:	2340      	movs	r3, #64	@ 0x40
 80012de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80012f6:	787b      	ldrb	r3, [r7, #1]
 80012f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001302:	2300      	movs	r3, #0
 8001304:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (CANopen_SendFrame(hcan, SDO_CLIENT_TX, req, 8) != HAL_OK) {
 8001314:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001318:	2308      	movs	r3, #8
 800131a:	f240 6101 	movw	r1, #1537	@ 0x601
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fe76 	bl	8001010 <CANopen_SendFrame>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <CANopen_SDO_Read32+0x6a>
    Debug_Print("SDO Read32 Send Failed\r\n");
 800132a:	481d      	ldr	r0, [pc, #116]	@ (80013a0 <CANopen_SDO_Read32+0xd4>)
 800132c:	f000 f848 	bl	80013c0 <Debug_Print>
    return 0xFFFFFFFF;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	e02f      	b.n	8001396 <CANopen_SDO_Read32+0xca>
  }

  CAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[8];
  uint32_t tickstart = HAL_GetTick();
 8001336:	f000 fab1 	bl	800189c <HAL_GetTick>
 800133a:	6378      	str	r0, [r7, #52]	@ 0x34
  while ((HAL_GetTick() - tickstart < 500)) {
 800133c:	e01e      	b.n	800137c <CANopen_SDO_Read32+0xb0>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	f107 0210 	add.w	r2, r7, #16
 8001346:	2100      	movs	r1, #0
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fde9 	bl	8001f20 <HAL_CAN_GetRxMessage>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d113      	bne.n	800137c <CANopen_SDO_Read32+0xb0>
      if (RxHeader.StdId == SDO_SERVER_RX && RxData[0] == 0x43) {
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f240 5281 	movw	r2, #1409	@ 0x581
 800135a:	4293      	cmp	r3, r2
 800135c:	d10e      	bne.n	800137c <CANopen_SDO_Read32+0xb0>
 800135e:	7a3b      	ldrb	r3, [r7, #8]
 8001360:	2b43      	cmp	r3, #67	@ 0x43
 8001362:	d10b      	bne.n	800137c <CANopen_SDO_Read32+0xb0>
        return (RxData[4] | (RxData[5] << 8) | (RxData[6] << 16) | (RxData[7] << 24));
 8001364:	7b3b      	ldrb	r3, [r7, #12]
 8001366:	461a      	mov	r2, r3
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	431a      	orrs	r2, r3
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	041b      	lsls	r3, r3, #16
 8001372:	431a      	orrs	r2, r3
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	061b      	lsls	r3, r3, #24
 8001378:	4313      	orrs	r3, r2
 800137a:	e00c      	b.n	8001396 <CANopen_SDO_Read32+0xca>
  while ((HAL_GetTick() - tickstart < 500)) {
 800137c:	f000 fa8e 	bl	800189c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800138a:	d3d8      	bcc.n	800133e <CANopen_SDO_Read32+0x72>
      }
    }
  }
  Debug_Print("SDO Read32 Timeout\r\n");
 800138c:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <CANopen_SDO_Read32+0xd8>)
 800138e:	f000 f817 	bl	80013c0 <Debug_Print>
  return 0xFFFFFFFF;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001396:	4618      	mov	r0, r3
 8001398:	3738      	adds	r7, #56	@ 0x38
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08005f68 	.word	0x08005f68
 80013a4:	08005f84 	.word	0x08005f84

080013a8 <Delay_ms>:

void Delay_ms(uint32_t ms) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fa7f 	bl	80018b4 <HAL_Delay>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <Debug_Print>:

void Debug_Print(const char *msg) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7fe ff21 	bl	8000210 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	2364      	movs	r3, #100	@ 0x64
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <Debug_Print+0x24>)
 80013d8:	f002 fb84 	bl	8003ae4 <HAL_UART_Transmit>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000a0 	.word	0x200000a0

080013e8 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013f8:	d105      	bne.n	8001406 <HAL_GPIO_EXTI_Callback+0x1e>
	{
	case GPIO_PIN_13: // u cant make EXTI same pin on  other port so no need for port specification
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_SET); // on
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
 80013fa:	f244 0181 	movw	r1, #16513	@ 0x4081
 80013fe:	4804      	ldr	r0, [pc, #16]	@ (8001410 <HAL_GPIO_EXTI_Callback+0x28>)
 8001400:	f001 fa25 	bl	800284e <HAL_GPIO_TogglePin>
		break;
 8001404:	e000      	b.n	8001408 <HAL_GPIO_EXTI_Callback+0x20>
	default:
		break;
 8001406:	bf00      	nop
	}
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40020400 	.word	0x40020400

08001414 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <HAL_UART_RxCpltCallback+0x94>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d13c      	bne.n	80014a0 <HAL_UART_RxCpltCallback+0x8c>
    {
        if (rx_buffer[rx_index] == '\r' || rx_buffer[rx_index] == '\n')
 8001426:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <HAL_UART_RxCpltCallback+0x9c>)
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	2b0d      	cmp	r3, #13
 8001432:	d006      	beq.n	8001442 <HAL_UART_RxCpltCallback+0x2e>
 8001434:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_UART_RxCpltCallback+0x9c>)
 800143c:	5c9b      	ldrb	r3, [r3, r2]
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d117      	bne.n	8001472 <HAL_UART_RxCpltCallback+0x5e>
        {
            rx_buffer[rx_index] = '\0'; // Null-terminate
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_UART_RxCpltCallback+0x9c>)
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]
            // Parse the received string to an integer
            user_input = atoi((char*)rx_buffer);
 800144e:	4818      	ldr	r0, [pc, #96]	@ (80014b0 <HAL_UART_RxCpltCallback+0x9c>)
 8001450:	f003 fdfa 	bl	8005048 <atoi>
 8001454:	4603      	mov	r3, r0
 8001456:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <HAL_UART_RxCpltCallback+0xa0>)
 8001458:	6013      	str	r3, [r2, #0]
            rx_complete = 1;
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_UART_RxCpltCallback+0xa4>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8001466:	2220      	movs	r2, #32
 8001468:	2100      	movs	r1, #0
 800146a:	4811      	ldr	r0, [pc, #68]	@ (80014b0 <HAL_UART_RxCpltCallback+0x9c>)
 800146c:	f003 fea8 	bl	80051c0 <memset>
 8001470:	e00c      	b.n	800148c <HAL_UART_RxCpltCallback+0x78>
        }
        else
        {
            rx_index++;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 800147c:	701a      	strb	r2, [r3, #0]
            if (rx_index >= sizeof(rx_buffer)) rx_index = 0; // Prevent overflow
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b1f      	cmp	r3, #31
 8001484:	d902      	bls.n	800148c <HAL_UART_RxCpltCallback+0x78>
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
        }
        // Restart interrupt for next byte
        HAL_UART_Receive_IT(&huart3, rx_buffer + rx_index, 1);
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <HAL_UART_RxCpltCallback+0x98>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <HAL_UART_RxCpltCallback+0x9c>)
 8001494:	4413      	add	r3, r2
 8001496:	2201      	movs	r2, #1
 8001498:	4619      	mov	r1, r3
 800149a:	4808      	ldr	r0, [pc, #32]	@ (80014bc <HAL_UART_RxCpltCallback+0xa8>)
 800149c:	f002 fbab 	bl	8003bf6 <HAL_UART_Receive_IT>
    }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40004800 	.word	0x40004800
 80014ac:	20000148 	.word	0x20000148
 80014b0:	20000128 	.word	0x20000128
 80014b4:	2000014c 	.word	0x2000014c
 80014b8:	20000150 	.word	0x20000150
 80014bc:	200000a0 	.word	0x200000a0

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
 80014c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80014cc:	4808      	ldr	r0, [pc, #32]	@ (80014f0 <Error_Handler+0x30>)
 80014ce:	f001 f9be 	bl	800284e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80014d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014d6:	f000 f9ed 	bl	80018b4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
 80014da:	f244 0181 	movw	r1, #16513	@ 0x4081
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <Error_Handler+0x30>)
 80014e0:	f001 f9b5 	bl	800284e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80014e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014e8:	f000 f9e4 	bl	80018b4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14);
 80014ec:	bf00      	nop
 80014ee:	e7eb      	b.n	80014c8 <Error_Handler+0x8>
 80014f0:	40020400 	.word	0x40020400

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_MspInit+0x44>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	@ 0x40
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <HAL_MspInit+0x44>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_MspInit+0x44>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_MspInit+0x44>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_MspInit+0x44>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <HAL_CAN_MspInit+0x7c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d127      	bne.n	80015ae <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <HAL_CAN_MspInit+0x80>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a16      	ldr	r2, [pc, #88]	@ (80015bc <HAL_CAN_MspInit+0x80>)
 8001564:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <HAL_CAN_MspInit+0x80>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_CAN_MspInit+0x80>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a10      	ldr	r2, [pc, #64]	@ (80015bc <HAL_CAN_MspInit+0x80>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_CAN_MspInit+0x80>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800158e:	2303      	movs	r3, #3
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800159e:	2309      	movs	r3, #9
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <HAL_CAN_MspInit+0x84>)
 80015aa:	f000 ff8b 	bl	80024c4 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	@ 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40006400 	.word	0x40006400
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020c00 	.word	0x40020c00

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0aa      	sub	sp, #168	@ 0xa8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	2284      	movs	r2, #132	@ 0x84
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fdeb 	bl	80051c0 <memset>
  if(huart->Instance==USART3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <HAL_UART_MspInit+0xc4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d144      	bne.n	800167e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fe30 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800160e:	f7ff ff57 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_UART_MspInit+0xc8>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	4a1d      	ldr	r2, [pc, #116]	@ (800168c <HAL_UART_MspInit+0xc8>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800161c:	6413      	str	r3, [r2, #64]	@ 0x40
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_UART_MspInit+0xc8>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_UART_MspInit+0xc8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a17      	ldr	r2, [pc, #92]	@ (800168c <HAL_UART_MspInit+0xc8>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_UART_MspInit+0xc8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001642:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800165c:	2307      	movs	r3, #7
 800165e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001662:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001666:	4619      	mov	r1, r3
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <HAL_UART_MspInit+0xcc>)
 800166a:	f000 ff2b 	bl	80024c4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2027      	movs	r0, #39	@ 0x27
 8001674:	f000 fe5d 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001678:	2027      	movs	r0, #39	@ 0x27
 800167a:	f000 fe76 	bl	800236a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800167e:	bf00      	nop
 8001680:	37a8      	adds	r7, #168	@ 0xa8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40004800 	.word	0x40004800
 800168c:	40023800 	.word	0x40023800
 8001690:	40020c00 	.word	0x40020c00

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <NMI_Handler+0x4>

0800169c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <MemManage_Handler+0x4>

080016ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <UsageFault_Handler+0x4>

080016bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 f8c3 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <USART3_IRQHandler+0x10>)
 80016fa:	f002 fac1 	bl	8003c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000a0 	.word	0x200000a0

08001708 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800170c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001710:	f001 f8b8 	bl	8002884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	@ (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	@ (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	@ (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f003 fd42 	bl	80051d0 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20050000 	.word	0x20050000
 8001778:	00000400 	.word	0x00000400
 800177c:	20000154 	.word	0x20000154
 8001780:	200002a8 	.word	0x200002a8

08001784 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ac:	f7ff ffea 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b0:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b2:	490d      	ldr	r1, [pc, #52]	@ (80017e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b4:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c8:	4c0a      	ldr	r4, [pc, #40]	@ (80017f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80017d6:	f003 fd01 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7fe fee9 	bl	80005b0 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017ec:	080060f8 	.word	0x080060f8
  ldr r2, =_sbss
 80017f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017f4:	200002a4 	.word	0x200002a4

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>

080017fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fe:	2003      	movs	r0, #3
 8001800:	f000 fd8c 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f805 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180a:	f7ff fe73 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fda7 	bl	8002386 <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 fd6f 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	@ (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000000 	.word	0x20000000
 800186c:	20000008 	.word	0x20000008
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	20000158 	.word	0x20000158

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000158 	.word	0x20000158

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008

080018fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0ed      	b.n	8001aea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fe0e 	bl	800153c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001930:	f7ff ffb4 	bl	800189c <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001936:	e012      	b.n	800195e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001938:	f7ff ffb0 	bl	800189c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d90b      	bls.n	800195e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0c5      	b.n	8001aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0e5      	beq.n	8001938 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0202 	bic.w	r2, r2, #2
 800197a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800197c:	f7ff ff8e 	bl	800189c <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001982:	e012      	b.n	80019aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001984:	f7ff ff8a 	bl	800189c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d90b      	bls.n	80019aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2205      	movs	r2, #5
 80019a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e09f      	b.n	8001aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e5      	bne.n	8001984 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e1b      	ldrb	r3, [r3, #24]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e5b      	ldrb	r3, [r3, #25]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e9b      	ldrb	r3, [r3, #26]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0220 	orr.w	r2, r2, #32
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e007      	b.n	8001a36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0220 	bic.w	r2, r2, #32
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7edb      	ldrb	r3, [r3, #27]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0210 	bic.w	r2, r2, #16
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0210 	orr.w	r2, r2, #16
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0208 	orr.w	r2, r2, #8
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0208 	bic.w	r2, r2, #8
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7f5b      	ldrb	r3, [r3, #29]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0204 	orr.w	r2, r2, #4
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e007      	b.n	8001ab4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	ea42 0103 	orr.w	r1, r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b04:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d003      	beq.n	8001b14 <HAL_CAN_ConfigFilter+0x20>
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	f040 80be 	bne.w	8001c90 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b14:	4b65      	ldr	r3, [pc, #404]	@ (8001cac <HAL_CAN_ConfigFilter+0x1b8>)
 8001b16:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b2e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	431a      	orrs	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2201      	movs	r2, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d123      	bne.n	8001bbe <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	3248      	adds	r2, #72	@ 0x48
 8001b9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bb4:	6939      	ldr	r1, [r7, #16]
 8001bb6:	3348      	adds	r3, #72	@ 0x48
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d122      	bne.n	8001c0c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001be6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	3248      	adds	r2, #72	@ 0x48
 8001bec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c02:	6939      	ldr	r1, [r7, #16]
 8001c04:	3348      	adds	r3, #72	@ 0x48
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001c26:	e007      	b.n	8001c38 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c52:	e007      	b.n	8001c64 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d107      	bne.n	8001c7c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c82:	f023 0201 	bic.w	r2, r3, #1
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e006      	b.n	8001c9e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40006400 	.word	0x40006400

08001cb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d12e      	bne.n	8001d22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff fdde 	bl	800189c <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ce2:	e012      	b.n	8001d0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce4:	f7ff fdda 	bl	800189c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b0a      	cmp	r3, #10
 8001cf0:	d90b      	bls.n	8001d0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2205      	movs	r2, #5
 8001d02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e012      	b.n	8001d30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e5      	bne.n	8001ce4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e006      	b.n	8001d30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	@ 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d56:	7ffb      	ldrb	r3, [r7, #31]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d003      	beq.n	8001d64 <HAL_CAN_AddTxMessage+0x2c>
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	f040 80ad 	bne.w	8001ebe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10a      	bne.n	8001d84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8095 	beq.w	8001eae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	0e1b      	lsrs	r3, r3, #24
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10d      	bne.n	8001dbc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001daa:	68f9      	ldr	r1, [r7, #12]
 8001dac:	6809      	ldr	r1, [r1, #0]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3318      	adds	r3, #24
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	440b      	add	r3, r1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e00f      	b.n	8001ddc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dc6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dd0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	440b      	add	r3, r1
 8001dda:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3318      	adds	r3, #24
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	440b      	add	r3, r1
 8001dec:	3304      	adds	r3, #4
 8001dee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	7d1b      	ldrb	r3, [r3, #20]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d111      	bne.n	8001e1c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3318      	adds	r3, #24
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	6811      	ldr	r1, [r2, #0]
 8001e0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3318      	adds	r3, #24
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	440b      	add	r3, r1
 8001e18:	3304      	adds	r3, #4
 8001e1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3307      	adds	r3, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	061a      	lsls	r2, r3, #24
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3306      	adds	r3, #6
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3305      	adds	r3, #5
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	4313      	orrs	r3, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	3204      	adds	r2, #4
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	4610      	mov	r0, r2
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	6811      	ldr	r1, [r2, #0]
 8001e44:	ea43 0200 	orr.w	r2, r3, r0
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3303      	adds	r3, #3
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	061a      	lsls	r2, r3, #24
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3302      	adds	r3, #2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	4610      	mov	r0, r2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	6811      	ldr	r1, [r2, #0]
 8001e7a:	ea43 0200 	orr.w	r2, r3, r0
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3318      	adds	r3, #24
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4413      	add	r3, r2
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	6811      	ldr	r1, [r2, #0]
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	440b      	add	r3, r1
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e00e      	b.n	8001ecc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e006      	b.n	8001ecc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3724      	adds	r7, #36	@ 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eec:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d002      	beq.n	8001efa <HAL_CAN_IsTxMessagePending+0x22>
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d10b      	bne.n	8001f12 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	401a      	ands	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	069b      	lsls	r3, r3, #26
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d003      	beq.n	8001f44 <HAL_CAN_GetRxMessage+0x24>
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	f040 8103 	bne.w	800214a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10e      	bne.n	8001f68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d116      	bne.n	8001f86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0f7      	b.n	8002158 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0e8      	b.n	8002158 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	331b      	adds	r3, #27
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0204 	and.w	r2, r3, #4
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10c      	bne.n	8001fbe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	331b      	adds	r3, #27
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0d5b      	lsrs	r3, r3, #21
 8001fb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	331b      	adds	r3, #27
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	4413      	add	r3, r2
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	331b      	adds	r3, #27
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0202 	and.w	r2, r3, #2
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	331b      	adds	r3, #27
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2208      	movs	r2, #8
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	e00b      	b.n	8002024 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	331b      	adds	r3, #27
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	4413      	add	r3, r2
 8002018:	3304      	adds	r3, #4
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 020f 	and.w	r2, r3, #15
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	331b      	adds	r3, #27
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	b2da      	uxtb	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	331b      	adds	r3, #27
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	4413      	add	r3, r2
 8002048:	3304      	adds	r3, #4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	b29a      	uxth	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4413      	add	r3, r2
 8002074:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0a1a      	lsrs	r2, r3, #8
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	4413      	add	r3, r2
 800208e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0c1a      	lsrs	r2, r3, #16
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3302      	adds	r3, #2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e1a      	lsrs	r2, r3, #24
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3303      	adds	r3, #3
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	3304      	adds	r3, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	4413      	add	r3, r2
 80020da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0a1a      	lsrs	r2, r3, #8
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3305      	adds	r3, #5
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0c1a      	lsrs	r2, r3, #16
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3306      	adds	r3, #6
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4413      	add	r3, r2
 800210e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0e1a      	lsrs	r2, r3, #24
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3307      	adds	r3, #7
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0220 	orr.w	r2, r2, #32
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	e007      	b.n	8002146 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0220 	orr.w	r2, r2, #32
 8002144:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e006      	b.n	8002158 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00
 80021c0:	05fa0000 	.word	0x05fa0000

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	@ (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	@ (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	@ (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fa76 	bl	800189c <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d008      	beq.n	80023d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e052      	b.n	8002476 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0216 	bic.w	r2, r2, #22
 80023de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <HAL_DMA_Abort+0x62>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0208 	bic.w	r2, r2, #8
 800240e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002420:	e013      	b.n	800244a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002422:	f7ff fa3b 	bl	800189c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b05      	cmp	r3, #5
 800242e:	d90c      	bls.n	800244a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2203      	movs	r2, #3
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e015      	b.n	8002476 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e4      	bne.n	8002422 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	223f      	movs	r2, #63	@ 0x3f
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d004      	beq.n	800249c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2280      	movs	r2, #128	@ 0x80
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00c      	b.n	80024b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2205      	movs	r2, #5
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	@ 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e175      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8164 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_GPIO_Init+0x56>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80be 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b66      	ldr	r3, [pc, #408]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	4a65      	ldr	r2, [pc, #404]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002658:	6453      	str	r3, [r2, #68]	@ 0x44
 800265a:	4b63      	ldr	r3, [pc, #396]	@ (80027e8 <HAL_GPIO_Init+0x324>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002666:	4a61      	ldr	r2, [pc, #388]	@ (80027ec <HAL_GPIO_Init+0x328>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	@ (80027f0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a57      	ldr	r2, [pc, #348]	@ (80027f4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_GPIO_Init+0x334>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	@ (80027fc <HAL_GPIO_Init+0x338>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a54      	ldr	r2, [pc, #336]	@ (8002800 <HAL_GPIO_Init+0x33c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a53      	ldr	r2, [pc, #332]	@ (8002804 <HAL_GPIO_Init+0x340>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	@ (8002808 <HAL_GPIO_Init+0x344>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a51      	ldr	r2, [pc, #324]	@ (800280c <HAL_GPIO_Init+0x348>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a50      	ldr	r2, [pc, #320]	@ (8002810 <HAL_GPIO_Init+0x34c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002814 <HAL_GPIO_Init+0x350>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	@ (80027ec <HAL_GPIO_Init+0x328>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <HAL_GPIO_Init+0x354>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a34      	ldr	r2, [pc, #208]	@ (8002818 <HAL_GPIO_Init+0x354>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b32      	ldr	r3, [pc, #200]	@ (8002818 <HAL_GPIO_Init+0x354>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a29      	ldr	r2, [pc, #164]	@ (8002818 <HAL_GPIO_Init+0x354>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_GPIO_Init+0x354>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1f      	ldr	r2, [pc, #124]	@ (8002818 <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_GPIO_Init+0x354>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a14      	ldr	r2, [pc, #80]	@ (8002818 <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae86 	bls.w	80024e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	@ 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	041a      	lsls	r2, r3, #16
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43d9      	mvns	r1, r3
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	619a      	str	r2, [r3, #24]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800289a:	4a05      	ldr	r2, [pc, #20]	@ (80028b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fda0 	bl	80013e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40013c00 	.word	0x40013c00

080028b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40007000 	.word	0x40007000

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e291      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8087 	beq.w	8002a06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f8:	4b96      	ldr	r3, [pc, #600]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00c      	beq.n	800291e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002904:	4b93      	ldr	r3, [pc, #588]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d112      	bne.n	8002936 <HAL_RCC_OscConfig+0x62>
 8002910:	4b90      	ldr	r3, [pc, #576]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x130>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d168      	bne.n	8002a04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e26b      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x7a>
 8002940:	4b84      	ldr	r3, [pc, #528]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a83      	ldr	r2, [pc, #524]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e02e      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x9c>
 8002956:	4b7f      	ldr	r3, [pc, #508]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b7c      	ldr	r3, [pc, #496]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7b      	ldr	r2, [pc, #492]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xc0>
 800297a:	4b76      	ldr	r3, [pc, #472]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a75      	ldr	r2, [pc, #468]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b73      	ldr	r3, [pc, #460]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a72      	ldr	r2, [pc, #456]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xd8>
 8002994:	4b6f      	ldr	r3, [pc, #444]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6e      	ldr	r2, [pc, #440]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe ff72 	bl	800189c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe ff6e 	bl	800189c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	@ 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e21f      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b61      	ldr	r3, [pc, #388]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xe8>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe ff5e 	bl	800189c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe ff5a 	bl	800189c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	@ 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e20b      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b57      	ldr	r3, [pc, #348]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x110>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d069      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a12:	4b50      	ldr	r3, [pc, #320]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x190>
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	4b47      	ldr	r3, [pc, #284]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_RCC_OscConfig+0x17a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1df      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	493d      	ldr	r1, [pc, #244]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	e040      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d023      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a38      	ldr	r2, [pc, #224]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe ff10 	bl	800189c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fe ff0c 	bl	800189c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1bd      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4929      	ldr	r1, [pc, #164]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
 8002ab2:	e018      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab4:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a26      	ldr	r2, [pc, #152]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe feec 	bl	800189c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fee8 	bl	800189c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e199      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1e      	ldr	r3, [pc, #120]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d038      	beq.n	8002b64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d019      	beq.n	8002b2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b16      	ldr	r3, [pc, #88]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afe:	4a15      	ldr	r2, [pc, #84]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe fec9 	bl	800189c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fec5 	bl	800189c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e176      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x23a>
 8002b2c:	e01a      	b.n	8002b64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2e:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b32:	4a08      	ldr	r2, [pc, #32]	@ (8002b54 <HAL_RCC_OscConfig+0x280>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe feaf 	bl	800189c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b42:	f7fe feab 	bl	800189c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d903      	bls.n	8002b58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e15c      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
 8002b54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	4b91      	ldr	r3, [pc, #580]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ee      	bne.n	8002b42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a4 	beq.w	8002cba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b8b      	ldr	r3, [pc, #556]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10d      	bne.n	8002b9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b88      	ldr	r3, [pc, #544]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	4a87      	ldr	r2, [pc, #540]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8a:	4b85      	ldr	r3, [pc, #532]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b96:	2301      	movs	r3, #1
 8002b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	@ (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d118      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7e      	ldr	r2, [pc, #504]	@ (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fe73 	bl	800189c <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7fe fe6f 	bl	800189c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	@ 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e120      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	4b75      	ldr	r3, [pc, #468]	@ (8002da4 <HAL_RCC_OscConfig+0x4d0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x31a>
 8002be0:	4b6f      	ldr	r3, [pc, #444]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4a6e      	ldr	r2, [pc, #440]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bec:	e02d      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x33c>
 8002bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	4a69      	ldr	r2, [pc, #420]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c02:	4b67      	ldr	r3, [pc, #412]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c06:	4a66      	ldr	r2, [pc, #408]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0e:	e01c      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_OscConfig+0x35e>
 8002c18:	4b61      	ldr	r3, [pc, #388]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1c:	4a60      	ldr	r2, [pc, #384]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c24:	4b5e      	ldr	r3, [pc, #376]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c28:	4a5d      	ldr	r2, [pc, #372]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c30:	e00b      	b.n	8002c4a <HAL_RCC_OscConfig+0x376>
 8002c32:	4b5b      	ldr	r3, [pc, #364]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	4a5a      	ldr	r2, [pc, #360]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3e:	4b58      	ldr	r3, [pc, #352]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	4a57      	ldr	r2, [pc, #348]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d015      	beq.n	8002c7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7fe fe23 	bl	800189c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fe1f 	bl	800189c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0ce      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	4b4b      	ldr	r3, [pc, #300]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ee      	beq.n	8002c5a <HAL_RCC_OscConfig+0x386>
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7e:	f7fe fe0d 	bl	800189c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe fe09 	bl	800189c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	4b40      	ldr	r3, [pc, #256]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ee      	bne.n	8002c86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d105      	bne.n	8002cba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cae:	4b3c      	ldr	r3, [pc, #240]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	4a3b      	ldr	r2, [pc, #236]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80a4 	beq.w	8002e0c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc4:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d06b      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d149      	bne.n	8002d6c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b31      	ldr	r3, [pc, #196]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a30      	ldr	r2, [pc, #192]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fdda 	bl	800189c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe fdd6 	bl	800189c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e087      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d36:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d38:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fdaa 	bl	800189c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fda6 	bl	800189c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e057      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x478>
 8002d6a:	e04f      	b.n	8002e0c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0b      	ldr	r2, [pc, #44]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fd90 	bl	800189c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fd8c 	bl	800189c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e03d      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b03      	ldr	r3, [pc, #12]	@ (8002da0 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x4ac>
 8002d9e:	e035      	b.n	8002e0c <HAL_RCC_OscConfig+0x538>
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_RCC_OscConfig+0x544>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d028      	beq.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d121      	bne.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d11a      	bne.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dd8:	4013      	ands	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d111      	bne.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	3b01      	subs	r3, #1
 8002df2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0d0      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b67      	ldr	r3, [pc, #412]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 020f 	bic.w	r2, r3, #15
 8002e4a:	4965      	ldr	r1, [pc, #404]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b63      	ldr	r3, [pc, #396]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0b8      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e7c:	4b59      	ldr	r3, [pc, #356]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a58      	ldr	r2, [pc, #352]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e94:	4b53      	ldr	r3, [pc, #332]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a52      	ldr	r2, [pc, #328]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b50      	ldr	r3, [pc, #320]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	494d      	ldr	r1, [pc, #308]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d040      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b47      	ldr	r3, [pc, #284]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e07f      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e073      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b39      	ldr	r3, [pc, #228]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4936      	ldr	r1, [pc, #216]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe fcc4 	bl	800189c <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe fcc0 	bl	800189c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e053      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d210      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	4922      	ldr	r1, [pc, #136]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e032      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4916      	ldr	r1, [pc, #88]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	490e      	ldr	r1, [pc, #56]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fae:	f000 f821 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	490a      	ldr	r1, [pc, #40]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fc0:	5ccb      	ldrb	r3, [r1, r3]
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	4a09      	ldr	r2, [pc, #36]	@ (8002fec <HAL_RCC_ClockConfig+0x1d0>)
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fca:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1d4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fc20 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	08005f9c 	.word	0x08005f9c
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b094      	sub	sp, #80	@ 0x50
 8002ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003000:	2300      	movs	r3, #0
 8003002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003004:	2300      	movs	r3, #0
 8003006:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800300c:	4b79      	ldr	r3, [pc, #484]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d00d      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x40>
 8003018:	2b08      	cmp	r3, #8
 800301a:	f200 80e1 	bhi.w	80031e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x34>
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x3a>
 8003026:	e0db      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b73      	ldr	r3, [pc, #460]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800302a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800302c:	e0db      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302e:	4b73      	ldr	r3, [pc, #460]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003030:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003032:	e0d8      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003034:	4b6f      	ldr	r3, [pc, #444]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800303c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800303e:	4b6d      	ldr	r3, [pc, #436]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304a:	4b6a      	ldr	r3, [pc, #424]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	2200      	movs	r2, #0
 8003052:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003054:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
 8003062:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003066:	4622      	mov	r2, r4
 8003068:	462b      	mov	r3, r5
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	0159      	lsls	r1, r3, #5
 8003074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003078:	0150      	lsls	r0, r2, #5
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4621      	mov	r1, r4
 8003080:	1a51      	subs	r1, r2, r1
 8003082:	6139      	str	r1, [r7, #16]
 8003084:	4629      	mov	r1, r5
 8003086:	eb63 0301 	sbc.w	r3, r3, r1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003098:	4659      	mov	r1, fp
 800309a:	018b      	lsls	r3, r1, #6
 800309c:	4651      	mov	r1, sl
 800309e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a2:	4651      	mov	r1, sl
 80030a4:	018a      	lsls	r2, r1, #6
 80030a6:	4651      	mov	r1, sl
 80030a8:	ebb2 0801 	subs.w	r8, r2, r1
 80030ac:	4659      	mov	r1, fp
 80030ae:	eb63 0901 	sbc.w	r9, r3, r1
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030c6:	4690      	mov	r8, r2
 80030c8:	4699      	mov	r9, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	eb18 0303 	adds.w	r3, r8, r3
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	462b      	mov	r3, r5
 80030d4:	eb49 0303 	adc.w	r3, r9, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030e6:	4629      	mov	r1, r5
 80030e8:	024b      	lsls	r3, r1, #9
 80030ea:	4621      	mov	r1, r4
 80030ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030f0:	4621      	mov	r1, r4
 80030f2:	024a      	lsls	r2, r1, #9
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030fa:	2200      	movs	r2, #0
 80030fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003104:	f7fd f8dc 	bl	80002c0 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003110:	e058      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003112:	4b38      	ldr	r3, [pc, #224]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	2200      	movs	r2, #0
 800311a:	4618      	mov	r0, r3
 800311c:	4611      	mov	r1, r2
 800311e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
 8003128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	f04f 0000 	mov.w	r0, #0
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	0159      	lsls	r1, r3, #5
 800313a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800313e:	0150      	lsls	r0, r2, #5
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4641      	mov	r1, r8
 8003146:	ebb2 0a01 	subs.w	sl, r2, r1
 800314a:	4649      	mov	r1, r9
 800314c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800315c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003160:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003164:	ebb2 040a 	subs.w	r4, r2, sl
 8003168:	eb63 050b 	sbc.w	r5, r3, fp
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	00eb      	lsls	r3, r5, #3
 8003176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317a:	00e2      	lsls	r2, r4, #3
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4643      	mov	r3, r8
 8003182:	18e3      	adds	r3, r4, r3
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	464b      	mov	r3, r9
 8003188:	eb45 0303 	adc.w	r3, r5, r3
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800319a:	4629      	mov	r1, r5
 800319c:	028b      	lsls	r3, r1, #10
 800319e:	4621      	mov	r1, r4
 80031a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a4:	4621      	mov	r1, r4
 80031a6:	028a      	lsls	r2, r1, #10
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ae:	2200      	movs	r2, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	61fa      	str	r2, [r7, #28]
 80031b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b8:	f7fd f882 	bl	80002c0 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4613      	mov	r3, r2
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80031d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3750      	adds	r7, #80	@ 0x50
 80031ec:	46bd      	mov	sp, r7
 80031ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	007a1200 	.word	0x007a1200

08003200 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003204:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000000 	.word	0x20000000

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff0 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	08005fac 	.word	0x08005fac

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffdc 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	08005fac 	.word	0x08005fac

08003268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003290:	4b69      	ldr	r3, [pc, #420]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a68      	ldr	r2, [pc, #416]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800329a:	6093      	str	r3, [r2, #8]
 800329c:	4b66      	ldr	r3, [pc, #408]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a4:	4964      	ldr	r1, [pc, #400]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032b2:	2301      	movs	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d017      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	4959      	ldr	r1, [pc, #356]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032e0:	d101      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d017      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003304:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	494a      	ldr	r1, [pc, #296]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800331c:	d101      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 808b 	beq.w	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800334c:	4b3a      	ldr	r3, [pc, #232]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	4a39      	ldr	r2, [pc, #228]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003356:	6413      	str	r3, [r2, #64]	@ 0x40
 8003358:	4b37      	ldr	r3, [pc, #220]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003364:	4b35      	ldr	r3, [pc, #212]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a34      	ldr	r2, [pc, #208]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003370:	f7fe fa94 	bl	800189c <HAL_GetTick>
 8003374:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003378:	f7fe fa90 	bl	800189c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e357      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800338a:	4b2c      	ldr	r3, [pc, #176]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003396:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d035      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d02e      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033b4:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033be:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033d6:	4a18      	ldr	r2, [pc, #96]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033dc:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d114      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe fa58 	bl	800189c <HAL_GetTick>
 80033ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe fa54 	bl	800189c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e319      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0ee      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800341e:	d111      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003420:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800342c:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800342e:	400b      	ands	r3, r1
 8003430:	4901      	ldr	r1, [pc, #4]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
 8003436:	e00b      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	0ffffcff 	.word	0x0ffffcff
 8003444:	4baa      	ldr	r3, [pc, #680]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4aa9      	ldr	r2, [pc, #676]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800344e:	6093      	str	r3, [r2, #8]
 8003450:	4ba7      	ldr	r3, [pc, #668]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003452:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345c:	49a4      	ldr	r1, [pc, #656]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345e:	4313      	orrs	r3, r2
 8003460:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800346e:	4ba0      	ldr	r3, [pc, #640]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003474:	4a9e      	ldr	r2, [pc, #632]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800347a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800347e:	4b9c      	ldr	r3, [pc, #624]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003480:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	4999      	ldr	r1, [pc, #612]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349c:	4b94      	ldr	r3, [pc, #592]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034aa:	4991      	ldr	r1, [pc, #580]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034be:	4b8c      	ldr	r3, [pc, #560]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034cc:	4988      	ldr	r1, [pc, #544]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e0:	4b83      	ldr	r3, [pc, #524]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ee:	4980      	ldr	r1, [pc, #512]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003502:	4b7b      	ldr	r3, [pc, #492]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	4977      	ldr	r1, [pc, #476]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003524:	4b72      	ldr	r3, [pc, #456]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	496f      	ldr	r1, [pc, #444]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003546:	4b6a      	ldr	r3, [pc, #424]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f023 020c 	bic.w	r2, r3, #12
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003554:	4966      	ldr	r1, [pc, #408]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003568:	4b61      	ldr	r3, [pc, #388]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003576:	495e      	ldr	r1, [pc, #376]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800358a:	4b59      	ldr	r3, [pc, #356]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003590:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003598:	4955      	ldr	r1, [pc, #340]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ac:	4b50      	ldr	r3, [pc, #320]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	494d      	ldr	r1, [pc, #308]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035ce:	4b48      	ldr	r3, [pc, #288]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	4944      	ldr	r1, [pc, #272]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035f0:	4b3f      	ldr	r3, [pc, #252]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	493c      	ldr	r1, [pc, #240]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003612:	4b37      	ldr	r3, [pc, #220]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003618:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	4933      	ldr	r1, [pc, #204]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003634:	4b2e      	ldr	r3, [pc, #184]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003642:	492b      	ldr	r1, [pc, #172]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d011      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003656:	4b26      	ldr	r3, [pc, #152]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003664:	4922      	ldr	r1, [pc, #136]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003674:	d101      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003686:	2301      	movs	r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003696:	4b16      	ldr	r3, [pc, #88]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a4:	4912      	ldr	r1, [pc, #72]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036b8:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c8:	4909      	ldr	r1, [pc, #36]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d006      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80d9 	beq.w	8003896 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036e4:	4b02      	ldr	r3, [pc, #8]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a01      	ldr	r2, [pc, #4]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036ee:	e001      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80036f0:	40023800 	.word	0x40023800
 80036f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f6:	f7fe f8d1 	bl	800189c <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036fe:	f7fe f8cd 	bl	800189c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b64      	cmp	r3, #100	@ 0x64
 800370a:	d901      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e194      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003710:	4b6c      	ldr	r3, [pc, #432]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d021      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11d      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003730:	4b64      	ldr	r3, [pc, #400]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003736:	0c1b      	lsrs	r3, r3, #16
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800373e:	4b61      	ldr	r3, [pc, #388]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003744:	0e1b      	lsrs	r3, r3, #24
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	019a      	lsls	r2, r3, #6
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	061b      	lsls	r3, r3, #24
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	071b      	lsls	r3, r3, #28
 8003764:	4957      	ldr	r1, [pc, #348]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	d02e      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003796:	d129      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003798:	4b4a      	ldr	r3, [pc, #296]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037a6:	4b47      	ldr	r3, [pc, #284]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ac:	0f1b      	lsrs	r3, r3, #28
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	019a      	lsls	r2, r3, #6
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	071b      	lsls	r3, r3, #28
 80037cc:	493d      	ldr	r1, [pc, #244]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037d4:	4b3b      	ldr	r3, [pc, #236]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037da:	f023 021f 	bic.w	r2, r3, #31
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	3b01      	subs	r3, #1
 80037e4:	4937      	ldr	r1, [pc, #220]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01d      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037f8:	4b32      	ldr	r3, [pc, #200]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fe:	0e1b      	lsrs	r3, r3, #24
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003806:	4b2f      	ldr	r3, [pc, #188]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800380c:	0f1b      	lsrs	r3, r3, #28
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	019a      	lsls	r2, r3, #6
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	431a      	orrs	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	071b      	lsls	r3, r3, #28
 800382c:	4925      	ldr	r1, [pc, #148]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d011      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	019a      	lsls	r2, r3, #6
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	071b      	lsls	r3, r3, #28
 800385c:	4919      	ldr	r1, [pc, #100]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003864:	4b17      	ldr	r3, [pc, #92]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a16      	ldr	r2, [pc, #88]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800386e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003870:	f7fe f814 	bl	800189c <HAL_GetTick>
 8003874:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003878:	f7fe f810 	bl	800189c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	@ 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0d7      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800388a:	4b0e      	ldr	r3, [pc, #56]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 80cd 	bne.w	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800389e:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a08      	ldr	r2, [pc, #32]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038aa:	f7fd fff7 	bl	800189c <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038b2:	f7fd fff3 	bl	800189c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	@ 0x64
 80038be:	d903      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0ba      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d4:	d0ed      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d02e      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d12a      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038fe:	4b51      	ldr	r3, [pc, #324]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800390c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	0f1b      	lsrs	r3, r3, #28
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	019a      	lsls	r2, r3, #6
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	431a      	orrs	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	071b      	lsls	r3, r3, #28
 8003932:	4944      	ldr	r1, [pc, #272]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800393a:	4b42      	ldr	r3, [pc, #264]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003940:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	493d      	ldr	r1, [pc, #244]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d022      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003968:	d11d      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800396a:	4b36      	ldr	r3, [pc, #216]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	0e1b      	lsrs	r3, r3, #24
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003978:	4b32      	ldr	r3, [pc, #200]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397e:	0f1b      	lsrs	r3, r3, #28
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	019a      	lsls	r2, r3, #6
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	071b      	lsls	r3, r3, #28
 800399e:	4929      	ldr	r1, [pc, #164]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d028      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039b2:	4b24      	ldr	r3, [pc, #144]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b8:	0e1b      	lsrs	r3, r3, #24
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039c0:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c6:	0c1b      	lsrs	r3, r3, #16
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	019a      	lsls	r2, r3, #6
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	431a      	orrs	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	071b      	lsls	r3, r3, #28
 80039e6:	4917      	ldr	r1, [pc, #92]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039ee:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	4911      	ldr	r1, [pc, #68]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a04:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a0e      	ldr	r2, [pc, #56]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7fd ff44 	bl	800189c <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a18:	f7fd ff40 	bl	800189c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	@ 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e007      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a36:	d1ef      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e040      	b.n	8003adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd fdaa 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	@ 0x24
 8003a74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fe66 	bl	8004760 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fbff 	bl	8004298 <UART_SetConfig>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e01b      	b.n	8003adc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fee5 	bl	80048a4 <UART_CheckIdleState>
 8003ada:	4603      	mov	r3, r0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d177      	bne.n	8003bec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_UART_Transmit+0x24>
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e070      	b.n	8003bee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2221      	movs	r2, #33	@ 0x21
 8003b18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b1a:	f7fd febf 	bl	800189c <HAL_GetTick>
 8003b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b38:	d108      	bne.n	8003b4c <HAL_UART_Transmit+0x68>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	e003      	b.n	8003b54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b54:	e02f      	b.n	8003bb6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2180      	movs	r1, #128	@ 0x80
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fef6 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e03b      	b.n	8003bee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	3302      	adds	r3, #2
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e007      	b.n	8003ba4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1c9      	bne.n	8003b56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2140      	movs	r1, #64	@ 0x40
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fec0 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e005      	b.n	8003bee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b08a      	sub	sp, #40	@ 0x28
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d132      	bne.n	8003c74 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_UART_Receive_IT+0x24>
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e02b      	b.n	8003c76 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d018      	beq.n	8003c64 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	69f9      	ldr	r1, [r7, #28]
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fede 	bl	8004a2c <UART_Start_Receive_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3728      	adds	r7, #40	@ 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0ba      	sub	sp, #232	@ 0xe8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003caa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003cae:	4013      	ands	r3, r2
 8003cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d115      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00f      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 82b1 	beq.w	8004240 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
      }
      return;
 8003ce6:	e2ab      	b.n	8004240 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8117 	beq.w	8003f20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d02:	4b85      	ldr	r3, [pc, #532]	@ (8003f18 <HAL_UART_IRQHandler+0x298>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 810a 	beq.w	8003f20 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d011      	beq.n	8003d3c <HAL_UART_IRQHandler+0xbc>
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d011      	beq.n	8003d6c <HAL_UART_IRQHandler+0xec>
 8003d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d011      	beq.n	8003d9c <HAL_UART_IRQHandler+0x11c>
 8003d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d017      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003db8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dce:	f043 0208 	orr.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d012      	beq.n	8003e0a <HAL_UART_IRQHandler+0x18a>
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8217 	beq.w	8004244 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e52:	2b40      	cmp	r3, #64	@ 0x40
 8003e54:	d005      	beq.n	8003e62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d04f      	beq.n	8003f02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fea8 	bl	8004bb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d141      	bne.n	8003efa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1d9      	bne.n	8003e76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d013      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ece:	4a13      	ldr	r2, [pc, #76]	@ (8003f1c <HAL_UART_IRQHandler+0x29c>)
 8003ed0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fad1 	bl	800247e <HAL_DMA_Abort_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d017      	beq.n	8003f12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e00f      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9ba 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e00b      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f9b6 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e007      	b.n	8003f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f9b2 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003f10:	e198      	b.n	8004244 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f12:	bf00      	nop
    return;
 8003f14:	e196      	b.n	8004244 <HAL_UART_IRQHandler+0x5c4>
 8003f16:	bf00      	nop
 8003f18:	04000120 	.word	0x04000120
 8003f1c:	08004c81 	.word	0x08004c81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 8166 	bne.w	80041f6 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 815f 	beq.w	80041f6 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8158 	beq.w	80041f6 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b40      	cmp	r3, #64	@ 0x40
 8003f5a:	f040 80d0 	bne.w	80040fe <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80ab 	beq.w	80040ca <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	f080 80a3 	bcs.w	80040ca <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f98:	f000 8086 	beq.w	80040a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1da      	bne.n	8003f9c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3308      	adds	r3, #8
 8003fec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ff6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800400a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800400e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004012:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800401c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e1      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004046:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004048:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800404c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e3      	bne.n	8004022 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004078:	f023 0310 	bic.w	r3, r3, #16
 800407c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800408a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800408c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e4      	bne.n	8004068 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe f97b 	bl	800239e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8dc 	bl	8004280 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80040c8:	e0be      	b.n	8004248 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040d4:	429a      	cmp	r2, r3
 80040d6:	f040 80b7 	bne.w	8004248 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e4:	f040 80b0 	bne.w	8004248 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8c2 	bl	8004280 <HAL_UARTEx_RxEventCallback>
      return;
 80040fc:	e0a4      	b.n	8004248 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800410a:	b29b      	uxth	r3, r3
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8096 	beq.w	800424c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8004120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8091 	beq.w	800424c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800413e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800414c:	647b      	str	r3, [r7, #68]	@ 0x44
 800414e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800415a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e4      	bne.n	800412a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	623b      	str	r3, [r7, #32]
   return(result);
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3308      	adds	r3, #8
 8004180:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004184:	633a      	str	r2, [r7, #48]	@ 0x30
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800418a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e3      	bne.n	8004160 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	617b      	str	r3, [r7, #20]
   return(result);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e4      	bne.n	80041ac <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f846 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041f4:	e02a      	b.n	800424c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00e      	beq.n	8004220 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01c      	beq.n	8004250 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
    }
    return;
 800421e:	e017      	b.n	8004250 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d012      	beq.n	8004252 <HAL_UART_IRQHandler+0x5d2>
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00c      	beq.n	8004252 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fd33 	bl	8004ca4 <UART_EndTransmit_IT>
    return;
 800423e:	e008      	b.n	8004252 <HAL_UART_IRQHandler+0x5d2>
      return;
 8004240:	bf00      	nop
 8004242:	e006      	b.n	8004252 <HAL_UART_IRQHandler+0x5d2>
    return;
 8004244:	bf00      	nop
 8004246:	e004      	b.n	8004252 <HAL_UART_IRQHandler+0x5d2>
      return;
 8004248:	bf00      	nop
 800424a:	e002      	b.n	8004252 <HAL_UART_IRQHandler+0x5d2>
      return;
 800424c:	bf00      	nop
 800424e:	e000      	b.n	8004252 <HAL_UART_IRQHandler+0x5d2>
    return;
 8004250:	bf00      	nop
  }

}
 8004252:	37e8      	adds	r7, #232	@ 0xe8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4ba6      	ldr	r3, [pc, #664]	@ (800455c <UART_SetConfig+0x2c4>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	6979      	ldr	r1, [r7, #20]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a94      	ldr	r2, [pc, #592]	@ (8004560 <UART_SetConfig+0x2c8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d120      	bne.n	8004356 <UART_SetConfig+0xbe>
 8004314:	4b93      	ldr	r3, [pc, #588]	@ (8004564 <UART_SetConfig+0x2cc>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b03      	cmp	r3, #3
 8004320:	d816      	bhi.n	8004350 <UART_SetConfig+0xb8>
 8004322:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <UART_SetConfig+0x90>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	08004339 	.word	0x08004339
 800432c:	08004345 	.word	0x08004345
 8004330:	0800433f 	.word	0x0800433f
 8004334:	0800434b 	.word	0x0800434b
 8004338:	2301      	movs	r3, #1
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e150      	b.n	80045e0 <UART_SetConfig+0x348>
 800433e:	2302      	movs	r3, #2
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e14d      	b.n	80045e0 <UART_SetConfig+0x348>
 8004344:	2304      	movs	r3, #4
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e14a      	b.n	80045e0 <UART_SetConfig+0x348>
 800434a:	2308      	movs	r3, #8
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e147      	b.n	80045e0 <UART_SetConfig+0x348>
 8004350:	2310      	movs	r3, #16
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e144      	b.n	80045e0 <UART_SetConfig+0x348>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a83      	ldr	r2, [pc, #524]	@ (8004568 <UART_SetConfig+0x2d0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d132      	bne.n	80043c6 <UART_SetConfig+0x12e>
 8004360:	4b80      	ldr	r3, [pc, #512]	@ (8004564 <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d828      	bhi.n	80043c0 <UART_SetConfig+0x128>
 800436e:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <UART_SetConfig+0xdc>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080043c1 	.word	0x080043c1
 800437c:	080043c1 	.word	0x080043c1
 8004380:	080043c1 	.word	0x080043c1
 8004384:	080043b5 	.word	0x080043b5
 8004388:	080043c1 	.word	0x080043c1
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043c1 	.word	0x080043c1
 8004394:	080043af 	.word	0x080043af
 8004398:	080043c1 	.word	0x080043c1
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c1 	.word	0x080043c1
 80043a4:	080043bb 	.word	0x080043bb
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e118      	b.n	80045e0 <UART_SetConfig+0x348>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e115      	b.n	80045e0 <UART_SetConfig+0x348>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e112      	b.n	80045e0 <UART_SetConfig+0x348>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e10f      	b.n	80045e0 <UART_SetConfig+0x348>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e10c      	b.n	80045e0 <UART_SetConfig+0x348>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a68      	ldr	r2, [pc, #416]	@ (800456c <UART_SetConfig+0x2d4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d120      	bne.n	8004412 <UART_SetConfig+0x17a>
 80043d0:	4b64      	ldr	r3, [pc, #400]	@ (8004564 <UART_SetConfig+0x2cc>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043da:	2b30      	cmp	r3, #48	@ 0x30
 80043dc:	d013      	beq.n	8004406 <UART_SetConfig+0x16e>
 80043de:	2b30      	cmp	r3, #48	@ 0x30
 80043e0:	d814      	bhi.n	800440c <UART_SetConfig+0x174>
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d009      	beq.n	80043fa <UART_SetConfig+0x162>
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d810      	bhi.n	800440c <UART_SetConfig+0x174>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <UART_SetConfig+0x15c>
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d006      	beq.n	8004400 <UART_SetConfig+0x168>
 80043f2:	e00b      	b.n	800440c <UART_SetConfig+0x174>
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e0f2      	b.n	80045e0 <UART_SetConfig+0x348>
 80043fa:	2302      	movs	r3, #2
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e0ef      	b.n	80045e0 <UART_SetConfig+0x348>
 8004400:	2304      	movs	r3, #4
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e0ec      	b.n	80045e0 <UART_SetConfig+0x348>
 8004406:	2308      	movs	r3, #8
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e0e9      	b.n	80045e0 <UART_SetConfig+0x348>
 800440c:	2310      	movs	r3, #16
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e0e6      	b.n	80045e0 <UART_SetConfig+0x348>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a56      	ldr	r2, [pc, #344]	@ (8004570 <UART_SetConfig+0x2d8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d120      	bne.n	800445e <UART_SetConfig+0x1c6>
 800441c:	4b51      	ldr	r3, [pc, #324]	@ (8004564 <UART_SetConfig+0x2cc>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004426:	2bc0      	cmp	r3, #192	@ 0xc0
 8004428:	d013      	beq.n	8004452 <UART_SetConfig+0x1ba>
 800442a:	2bc0      	cmp	r3, #192	@ 0xc0
 800442c:	d814      	bhi.n	8004458 <UART_SetConfig+0x1c0>
 800442e:	2b80      	cmp	r3, #128	@ 0x80
 8004430:	d009      	beq.n	8004446 <UART_SetConfig+0x1ae>
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	d810      	bhi.n	8004458 <UART_SetConfig+0x1c0>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <UART_SetConfig+0x1a8>
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d006      	beq.n	800444c <UART_SetConfig+0x1b4>
 800443e:	e00b      	b.n	8004458 <UART_SetConfig+0x1c0>
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e0cc      	b.n	80045e0 <UART_SetConfig+0x348>
 8004446:	2302      	movs	r3, #2
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e0c9      	b.n	80045e0 <UART_SetConfig+0x348>
 800444c:	2304      	movs	r3, #4
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e0c6      	b.n	80045e0 <UART_SetConfig+0x348>
 8004452:	2308      	movs	r3, #8
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e0c3      	b.n	80045e0 <UART_SetConfig+0x348>
 8004458:	2310      	movs	r3, #16
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e0c0      	b.n	80045e0 <UART_SetConfig+0x348>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a44      	ldr	r2, [pc, #272]	@ (8004574 <UART_SetConfig+0x2dc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d125      	bne.n	80044b4 <UART_SetConfig+0x21c>
 8004468:	4b3e      	ldr	r3, [pc, #248]	@ (8004564 <UART_SetConfig+0x2cc>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004476:	d017      	beq.n	80044a8 <UART_SetConfig+0x210>
 8004478:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800447c:	d817      	bhi.n	80044ae <UART_SetConfig+0x216>
 800447e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004482:	d00b      	beq.n	800449c <UART_SetConfig+0x204>
 8004484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004488:	d811      	bhi.n	80044ae <UART_SetConfig+0x216>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <UART_SetConfig+0x1fe>
 800448e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004492:	d006      	beq.n	80044a2 <UART_SetConfig+0x20a>
 8004494:	e00b      	b.n	80044ae <UART_SetConfig+0x216>
 8004496:	2300      	movs	r3, #0
 8004498:	77fb      	strb	r3, [r7, #31]
 800449a:	e0a1      	b.n	80045e0 <UART_SetConfig+0x348>
 800449c:	2302      	movs	r3, #2
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e09e      	b.n	80045e0 <UART_SetConfig+0x348>
 80044a2:	2304      	movs	r3, #4
 80044a4:	77fb      	strb	r3, [r7, #31]
 80044a6:	e09b      	b.n	80045e0 <UART_SetConfig+0x348>
 80044a8:	2308      	movs	r3, #8
 80044aa:	77fb      	strb	r3, [r7, #31]
 80044ac:	e098      	b.n	80045e0 <UART_SetConfig+0x348>
 80044ae:	2310      	movs	r3, #16
 80044b0:	77fb      	strb	r3, [r7, #31]
 80044b2:	e095      	b.n	80045e0 <UART_SetConfig+0x348>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004578 <UART_SetConfig+0x2e0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d125      	bne.n	800450a <UART_SetConfig+0x272>
 80044be:	4b29      	ldr	r3, [pc, #164]	@ (8004564 <UART_SetConfig+0x2cc>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044cc:	d017      	beq.n	80044fe <UART_SetConfig+0x266>
 80044ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044d2:	d817      	bhi.n	8004504 <UART_SetConfig+0x26c>
 80044d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d8:	d00b      	beq.n	80044f2 <UART_SetConfig+0x25a>
 80044da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044de:	d811      	bhi.n	8004504 <UART_SetConfig+0x26c>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <UART_SetConfig+0x254>
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e8:	d006      	beq.n	80044f8 <UART_SetConfig+0x260>
 80044ea:	e00b      	b.n	8004504 <UART_SetConfig+0x26c>
 80044ec:	2301      	movs	r3, #1
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e076      	b.n	80045e0 <UART_SetConfig+0x348>
 80044f2:	2302      	movs	r3, #2
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e073      	b.n	80045e0 <UART_SetConfig+0x348>
 80044f8:	2304      	movs	r3, #4
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e070      	b.n	80045e0 <UART_SetConfig+0x348>
 80044fe:	2308      	movs	r3, #8
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e06d      	b.n	80045e0 <UART_SetConfig+0x348>
 8004504:	2310      	movs	r3, #16
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e06a      	b.n	80045e0 <UART_SetConfig+0x348>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <UART_SetConfig+0x2e4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d138      	bne.n	8004586 <UART_SetConfig+0x2ee>
 8004514:	4b13      	ldr	r3, [pc, #76]	@ (8004564 <UART_SetConfig+0x2cc>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800451e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004522:	d017      	beq.n	8004554 <UART_SetConfig+0x2bc>
 8004524:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004528:	d82a      	bhi.n	8004580 <UART_SetConfig+0x2e8>
 800452a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800452e:	d00b      	beq.n	8004548 <UART_SetConfig+0x2b0>
 8004530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004534:	d824      	bhi.n	8004580 <UART_SetConfig+0x2e8>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <UART_SetConfig+0x2aa>
 800453a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453e:	d006      	beq.n	800454e <UART_SetConfig+0x2b6>
 8004540:	e01e      	b.n	8004580 <UART_SetConfig+0x2e8>
 8004542:	2300      	movs	r3, #0
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e04b      	b.n	80045e0 <UART_SetConfig+0x348>
 8004548:	2302      	movs	r3, #2
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e048      	b.n	80045e0 <UART_SetConfig+0x348>
 800454e:	2304      	movs	r3, #4
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e045      	b.n	80045e0 <UART_SetConfig+0x348>
 8004554:	2308      	movs	r3, #8
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e042      	b.n	80045e0 <UART_SetConfig+0x348>
 800455a:	bf00      	nop
 800455c:	efff69f3 	.word	0xefff69f3
 8004560:	40011000 	.word	0x40011000
 8004564:	40023800 	.word	0x40023800
 8004568:	40004400 	.word	0x40004400
 800456c:	40004800 	.word	0x40004800
 8004570:	40004c00 	.word	0x40004c00
 8004574:	40005000 	.word	0x40005000
 8004578:	40011400 	.word	0x40011400
 800457c:	40007800 	.word	0x40007800
 8004580:	2310      	movs	r3, #16
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e02c      	b.n	80045e0 <UART_SetConfig+0x348>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a72      	ldr	r2, [pc, #456]	@ (8004754 <UART_SetConfig+0x4bc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d125      	bne.n	80045dc <UART_SetConfig+0x344>
 8004590:	4b71      	ldr	r3, [pc, #452]	@ (8004758 <UART_SetConfig+0x4c0>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800459a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800459e:	d017      	beq.n	80045d0 <UART_SetConfig+0x338>
 80045a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045a4:	d817      	bhi.n	80045d6 <UART_SetConfig+0x33e>
 80045a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045aa:	d00b      	beq.n	80045c4 <UART_SetConfig+0x32c>
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b0:	d811      	bhi.n	80045d6 <UART_SetConfig+0x33e>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <UART_SetConfig+0x326>
 80045b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ba:	d006      	beq.n	80045ca <UART_SetConfig+0x332>
 80045bc:	e00b      	b.n	80045d6 <UART_SetConfig+0x33e>
 80045be:	2300      	movs	r3, #0
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e00d      	b.n	80045e0 <UART_SetConfig+0x348>
 80045c4:	2302      	movs	r3, #2
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e00a      	b.n	80045e0 <UART_SetConfig+0x348>
 80045ca:	2304      	movs	r3, #4
 80045cc:	77fb      	strb	r3, [r7, #31]
 80045ce:	e007      	b.n	80045e0 <UART_SetConfig+0x348>
 80045d0:	2308      	movs	r3, #8
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e004      	b.n	80045e0 <UART_SetConfig+0x348>
 80045d6:	2310      	movs	r3, #16
 80045d8:	77fb      	strb	r3, [r7, #31]
 80045da:	e001      	b.n	80045e0 <UART_SetConfig+0x348>
 80045dc:	2310      	movs	r3, #16
 80045de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e8:	d15b      	bne.n	80046a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80045ea:	7ffb      	ldrb	r3, [r7, #31]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d828      	bhi.n	8004642 <UART_SetConfig+0x3aa>
 80045f0:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <UART_SetConfig+0x360>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	08004625 	.word	0x08004625
 8004600:	0800462d 	.word	0x0800462d
 8004604:	08004643 	.word	0x08004643
 8004608:	08004633 	.word	0x08004633
 800460c:	08004643 	.word	0x08004643
 8004610:	08004643 	.word	0x08004643
 8004614:	08004643 	.word	0x08004643
 8004618:	0800463b 	.word	0x0800463b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe fdfc 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004620:	61b8      	str	r0, [r7, #24]
        break;
 8004622:	e013      	b.n	800464c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe fe0c 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8004628:	61b8      	str	r0, [r7, #24]
        break;
 800462a:	e00f      	b.n	800464c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462c:	4b4b      	ldr	r3, [pc, #300]	@ (800475c <UART_SetConfig+0x4c4>)
 800462e:	61bb      	str	r3, [r7, #24]
        break;
 8004630:	e00c      	b.n	800464c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fe fcdf 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8004636:	61b8      	str	r0, [r7, #24]
        break;
 8004638:	e008      	b.n	800464c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800463e:	61bb      	str	r3, [r7, #24]
        break;
 8004640:	e004      	b.n	800464c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	77bb      	strb	r3, [r7, #30]
        break;
 800464a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d074      	beq.n	800473c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	005a      	lsls	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	441a      	add	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b0f      	cmp	r3, #15
 800466c:	d916      	bls.n	800469c <UART_SetConfig+0x404>
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004674:	d212      	bcs.n	800469c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f023 030f 	bic.w	r3, r3, #15
 800467e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	b29b      	uxth	r3, r3
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	b29a      	uxth	r2, r3
 800468c:	89fb      	ldrh	r3, [r7, #14]
 800468e:	4313      	orrs	r3, r2
 8004690:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	89fa      	ldrh	r2, [r7, #14]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	e04f      	b.n	800473c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	77bb      	strb	r3, [r7, #30]
 80046a0:	e04c      	b.n	800473c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046a2:	7ffb      	ldrb	r3, [r7, #31]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d828      	bhi.n	80046fa <UART_SetConfig+0x462>
 80046a8:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <UART_SetConfig+0x418>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046d5 	.word	0x080046d5
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046e5 	.word	0x080046e5
 80046bc:	080046fb 	.word	0x080046fb
 80046c0:	080046eb 	.word	0x080046eb
 80046c4:	080046fb 	.word	0x080046fb
 80046c8:	080046fb 	.word	0x080046fb
 80046cc:	080046fb 	.word	0x080046fb
 80046d0:	080046f3 	.word	0x080046f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d4:	f7fe fda0 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 80046d8:	61b8      	str	r0, [r7, #24]
        break;
 80046da:	e013      	b.n	8004704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046dc:	f7fe fdb0 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 80046e0:	61b8      	str	r0, [r7, #24]
        break;
 80046e2:	e00f      	b.n	8004704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e4:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <UART_SetConfig+0x4c4>)
 80046e6:	61bb      	str	r3, [r7, #24]
        break;
 80046e8:	e00c      	b.n	8004704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ea:	f7fe fc83 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 80046ee:	61b8      	str	r0, [r7, #24]
        break;
 80046f0:	e008      	b.n	8004704 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046f6:	61bb      	str	r3, [r7, #24]
        break;
 80046f8:	e004      	b.n	8004704 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	77bb      	strb	r3, [r7, #30]
        break;
 8004702:	bf00      	nop
    }

    if (pclk != 0U)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d018      	beq.n	800473c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	085a      	lsrs	r2, r3, #1
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	441a      	add	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b0f      	cmp	r3, #15
 8004722:	d909      	bls.n	8004738 <UART_SetConfig+0x4a0>
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472a:	d205      	bcs.n	8004738 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	e001      	b.n	800473c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004748:	7fbb      	ldrb	r3, [r7, #30]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40007c00 	.word	0x40007c00
 8004758:	40023800 	.word	0x40023800
 800475c:	00f42400 	.word	0x00f42400

08004760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01a      	beq.n	8004876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800485e:	d10a      	bne.n	8004876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	@ 0x30
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048b4:	f7fc fff2 	bl	800189c <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d12e      	bne.n	8004926 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	2200      	movs	r2, #0
 80048d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f83b 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d021      	beq.n	8004926 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f6:	623b      	str	r3, [r7, #32]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	69b9      	ldr	r1, [r7, #24]
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	617b      	str	r3, [r7, #20]
   return(result);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e6      	bne.n	80048e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e011      	b.n	800494a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3728      	adds	r7, #40	@ 0x28
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	4613      	mov	r3, r2
 8004960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004962:	e04f      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d04b      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496c:	f7fc ff96 	bl	800189c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	429a      	cmp	r2, r3
 800497a:	d302      	bcc.n	8004982 <UART_WaitOnFlagUntilTimeout+0x30>
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e04e      	b.n	8004a24 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d037      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b80      	cmp	r3, #128	@ 0x80
 8004998:	d034      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xb2>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b40      	cmp	r3, #64	@ 0x40
 800499e:	d031      	beq.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d110      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2208      	movs	r2, #8
 80049b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f8fe 	bl	8004bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2208      	movs	r2, #8
 80049c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e029      	b.n	8004a24 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049de:	d111      	bne.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f8e4 	bl	8004bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e00f      	b.n	8004a24 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d0a0      	beq.n	8004964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b097      	sub	sp, #92	@ 0x5c
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	88fa      	ldrh	r2, [r7, #6]
 8004a44:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	d10e      	bne.n	8004a7e <UART_Start_Receive_IT+0x52>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <UART_Start_Receive_IT+0x48>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a72:	e02d      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	22ff      	movs	r2, #255	@ 0xff
 8004a78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a7c:	e028      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10d      	bne.n	8004aa2 <UART_Start_Receive_IT+0x76>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d104      	bne.n	8004a98 <UART_Start_Receive_IT+0x6c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	22ff      	movs	r2, #255	@ 0xff
 8004a92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a96:	e01b      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	227f      	movs	r2, #127	@ 0x7f
 8004a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aa0:	e016      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aaa:	d10d      	bne.n	8004ac8 <UART_Start_Receive_IT+0x9c>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <UART_Start_Receive_IT+0x92>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	227f      	movs	r2, #127	@ 0x7f
 8004ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004abc:	e008      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	223f      	movs	r2, #63	@ 0x3f
 8004ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ac6:	e003      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2222      	movs	r2, #34	@ 0x22
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b00:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b02:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1c:	d107      	bne.n	8004b2e <UART_Start_Receive_IT+0x102>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a21      	ldr	r2, [pc, #132]	@ (8004bb0 <UART_Start_Receive_IT+0x184>)
 8004b2a:	669a      	str	r2, [r3, #104]	@ 0x68
 8004b2c:	e002      	b.n	8004b34 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a20      	ldr	r2, [pc, #128]	@ (8004bb4 <UART_Start_Receive_IT+0x188>)
 8004b32:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d019      	beq.n	8004b70 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e6      	bne.n	8004b3c <UART_Start_Receive_IT+0x110>
 8004b6e:	e018      	b.n	8004ba2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b8e:	623b      	str	r3, [r7, #32]
 8004b90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	69f9      	ldr	r1, [r7, #28]
 8004b94:	6a3a      	ldr	r2, [r7, #32]
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e6      	bne.n	8004b70 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	375c      	adds	r7, #92	@ 0x5c
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	08004ea1 	.word	0x08004ea1
 8004bb4:	08004cf9 	.word	0x08004cf9

08004bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b095      	sub	sp, #84	@ 0x54
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8004be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e6      	bne.n	8004bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e5      	bne.n	8004bf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d118      	bne.n	8004c60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6979      	ldr	r1, [r7, #20]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c74:	bf00      	nop
 8004c76:	3754      	adds	r7, #84	@ 0x54
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7ff fae8 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	6979      	ldr	r1, [r7, #20]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e6      	bne.n	8004cac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff fab4 	bl	8004258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf0:	bf00      	nop
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b09c      	sub	sp, #112	@ 0x70
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d10:	2b22      	cmp	r3, #34	@ 0x22
 8004d12:	f040 80b9 	bne.w	8004e88 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d24:	b2d9      	uxtb	r1, r3
 8004d26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d30:	400a      	ands	r2, r1
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 809c 	bne.w	8004e98 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e6      	bne.n	8004d60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3308      	adds	r3, #8
 8004d98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3308      	adds	r3, #8
 8004db0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004db2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004db4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e5      	bne.n	8004d92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d018      	beq.n	8004e1a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	623b      	str	r3, [r7, #32]
   return(result);
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e6      	bne.n	8004de8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d12e      	bne.n	8004e80 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f023 0310 	bic.w	r3, r3, #16
 8004e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	69b9      	ldr	r1, [r7, #24]
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	617b      	str	r3, [r7, #20]
   return(result);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e6      	bne.n	8004e28 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d103      	bne.n	8004e70 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2210      	movs	r2, #16
 8004e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fa01 	bl	8004280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e7e:	e00b      	b.n	8004e98 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fc fac7 	bl	8001414 <HAL_UART_RxCpltCallback>
}
 8004e86:	e007      	b.n	8004e98 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	619a      	str	r2, [r3, #24]
}
 8004e98:	bf00      	nop
 8004e9a:	3770      	adds	r7, #112	@ 0x70
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b09c      	sub	sp, #112	@ 0x70
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004eae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eb8:	2b22      	cmp	r3, #34	@ 0x22
 8004eba:	f040 80b9 	bne.w	8005030 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ece:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004ed2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004edc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee2:	1c9a      	adds	r2, r3, #2
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 809c 	bne.w	8005040 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f26:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f28:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d018      	beq.n	8004fc2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e6      	bne.n	8004f90 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d12e      	bne.n	8005028 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f023 0310 	bic.w	r3, r3, #16
 8004fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e6      	bne.n	8004fd0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b10      	cmp	r3, #16
 800500e:	d103      	bne.n	8005018 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2210      	movs	r2, #16
 8005016:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff f92d 	bl	8004280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005026:	e00b      	b.n	8005040 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fc f9f3 	bl	8001414 <HAL_UART_RxCpltCallback>
}
 800502e:	e007      	b.n	8005040 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	619a      	str	r2, [r3, #24]
}
 8005040:	bf00      	nop
 8005042:	3770      	adds	r7, #112	@ 0x70
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <atoi>:
 8005048:	220a      	movs	r2, #10
 800504a:	2100      	movs	r1, #0
 800504c:	f000 b87a 	b.w	8005144 <strtol>

08005050 <_strtol_l.constprop.0>:
 8005050:	2b24      	cmp	r3, #36	@ 0x24
 8005052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005056:	4686      	mov	lr, r0
 8005058:	4690      	mov	r8, r2
 800505a:	d801      	bhi.n	8005060 <_strtol_l.constprop.0+0x10>
 800505c:	2b01      	cmp	r3, #1
 800505e:	d106      	bne.n	800506e <_strtol_l.constprop.0+0x1e>
 8005060:	f000 f8b6 	bl	80051d0 <__errno>
 8005064:	2316      	movs	r3, #22
 8005066:	6003      	str	r3, [r0, #0]
 8005068:	2000      	movs	r0, #0
 800506a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506e:	4834      	ldr	r0, [pc, #208]	@ (8005140 <_strtol_l.constprop.0+0xf0>)
 8005070:	460d      	mov	r5, r1
 8005072:	462a      	mov	r2, r5
 8005074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005078:	5d06      	ldrb	r6, [r0, r4]
 800507a:	f016 0608 	ands.w	r6, r6, #8
 800507e:	d1f8      	bne.n	8005072 <_strtol_l.constprop.0+0x22>
 8005080:	2c2d      	cmp	r4, #45	@ 0x2d
 8005082:	d12d      	bne.n	80050e0 <_strtol_l.constprop.0+0x90>
 8005084:	782c      	ldrb	r4, [r5, #0]
 8005086:	2601      	movs	r6, #1
 8005088:	1c95      	adds	r5, r2, #2
 800508a:	f033 0210 	bics.w	r2, r3, #16
 800508e:	d109      	bne.n	80050a4 <_strtol_l.constprop.0+0x54>
 8005090:	2c30      	cmp	r4, #48	@ 0x30
 8005092:	d12a      	bne.n	80050ea <_strtol_l.constprop.0+0x9a>
 8005094:	782a      	ldrb	r2, [r5, #0]
 8005096:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800509a:	2a58      	cmp	r2, #88	@ 0x58
 800509c:	d125      	bne.n	80050ea <_strtol_l.constprop.0+0x9a>
 800509e:	786c      	ldrb	r4, [r5, #1]
 80050a0:	2310      	movs	r3, #16
 80050a2:	3502      	adds	r5, #2
 80050a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80050a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80050ac:	2200      	movs	r2, #0
 80050ae:	fbbc f9f3 	udiv	r9, ip, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80050b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80050bc:	2f09      	cmp	r7, #9
 80050be:	d81b      	bhi.n	80050f8 <_strtol_l.constprop.0+0xa8>
 80050c0:	463c      	mov	r4, r7
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	dd27      	ble.n	8005116 <_strtol_l.constprop.0+0xc6>
 80050c6:	1c57      	adds	r7, r2, #1
 80050c8:	d007      	beq.n	80050da <_strtol_l.constprop.0+0x8a>
 80050ca:	4581      	cmp	r9, r0
 80050cc:	d320      	bcc.n	8005110 <_strtol_l.constprop.0+0xc0>
 80050ce:	d101      	bne.n	80050d4 <_strtol_l.constprop.0+0x84>
 80050d0:	45a2      	cmp	sl, r4
 80050d2:	db1d      	blt.n	8005110 <_strtol_l.constprop.0+0xc0>
 80050d4:	fb00 4003 	mla	r0, r0, r3, r4
 80050d8:	2201      	movs	r2, #1
 80050da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050de:	e7eb      	b.n	80050b8 <_strtol_l.constprop.0+0x68>
 80050e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80050e2:	bf04      	itt	eq
 80050e4:	782c      	ldrbeq	r4, [r5, #0]
 80050e6:	1c95      	addeq	r5, r2, #2
 80050e8:	e7cf      	b.n	800508a <_strtol_l.constprop.0+0x3a>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1da      	bne.n	80050a4 <_strtol_l.constprop.0+0x54>
 80050ee:	2c30      	cmp	r4, #48	@ 0x30
 80050f0:	bf0c      	ite	eq
 80050f2:	2308      	moveq	r3, #8
 80050f4:	230a      	movne	r3, #10
 80050f6:	e7d5      	b.n	80050a4 <_strtol_l.constprop.0+0x54>
 80050f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80050fc:	2f19      	cmp	r7, #25
 80050fe:	d801      	bhi.n	8005104 <_strtol_l.constprop.0+0xb4>
 8005100:	3c37      	subs	r4, #55	@ 0x37
 8005102:	e7de      	b.n	80050c2 <_strtol_l.constprop.0+0x72>
 8005104:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005108:	2f19      	cmp	r7, #25
 800510a:	d804      	bhi.n	8005116 <_strtol_l.constprop.0+0xc6>
 800510c:	3c57      	subs	r4, #87	@ 0x57
 800510e:	e7d8      	b.n	80050c2 <_strtol_l.constprop.0+0x72>
 8005110:	f04f 32ff 	mov.w	r2, #4294967295
 8005114:	e7e1      	b.n	80050da <_strtol_l.constprop.0+0x8a>
 8005116:	1c53      	adds	r3, r2, #1
 8005118:	d108      	bne.n	800512c <_strtol_l.constprop.0+0xdc>
 800511a:	2322      	movs	r3, #34	@ 0x22
 800511c:	f8ce 3000 	str.w	r3, [lr]
 8005120:	4660      	mov	r0, ip
 8005122:	f1b8 0f00 	cmp.w	r8, #0
 8005126:	d0a0      	beq.n	800506a <_strtol_l.constprop.0+0x1a>
 8005128:	1e69      	subs	r1, r5, #1
 800512a:	e006      	b.n	800513a <_strtol_l.constprop.0+0xea>
 800512c:	b106      	cbz	r6, 8005130 <_strtol_l.constprop.0+0xe0>
 800512e:	4240      	negs	r0, r0
 8005130:	f1b8 0f00 	cmp.w	r8, #0
 8005134:	d099      	beq.n	800506a <_strtol_l.constprop.0+0x1a>
 8005136:	2a00      	cmp	r2, #0
 8005138:	d1f6      	bne.n	8005128 <_strtol_l.constprop.0+0xd8>
 800513a:	f8c8 1000 	str.w	r1, [r8]
 800513e:	e794      	b.n	800506a <_strtol_l.constprop.0+0x1a>
 8005140:	08005fb5 	.word	0x08005fb5

08005144 <strtol>:
 8005144:	4613      	mov	r3, r2
 8005146:	460a      	mov	r2, r1
 8005148:	4601      	mov	r1, r0
 800514a:	4802      	ldr	r0, [pc, #8]	@ (8005154 <strtol+0x10>)
 800514c:	6800      	ldr	r0, [r0, #0]
 800514e:	f7ff bf7f 	b.w	8005050 <_strtol_l.constprop.0>
 8005152:	bf00      	nop
 8005154:	2000000c 	.word	0x2000000c

08005158 <sniprintf>:
 8005158:	b40c      	push	{r2, r3}
 800515a:	b530      	push	{r4, r5, lr}
 800515c:	4b17      	ldr	r3, [pc, #92]	@ (80051bc <sniprintf+0x64>)
 800515e:	1e0c      	subs	r4, r1, #0
 8005160:	681d      	ldr	r5, [r3, #0]
 8005162:	b09d      	sub	sp, #116	@ 0x74
 8005164:	da08      	bge.n	8005178 <sniprintf+0x20>
 8005166:	238b      	movs	r3, #139	@ 0x8b
 8005168:	602b      	str	r3, [r5, #0]
 800516a:	f04f 30ff 	mov.w	r0, #4294967295
 800516e:	b01d      	add	sp, #116	@ 0x74
 8005170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005174:	b002      	add	sp, #8
 8005176:	4770      	bx	lr
 8005178:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800517c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005180:	bf14      	ite	ne
 8005182:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005186:	4623      	moveq	r3, r4
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	9307      	str	r3, [sp, #28]
 800518c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005190:	9002      	str	r0, [sp, #8]
 8005192:	9006      	str	r0, [sp, #24]
 8005194:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005198:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800519a:	ab21      	add	r3, sp, #132	@ 0x84
 800519c:	a902      	add	r1, sp, #8
 800519e:	4628      	mov	r0, r5
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	f000 f995 	bl	80054d0 <_svfiprintf_r>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	bfbc      	itt	lt
 80051aa:	238b      	movlt	r3, #139	@ 0x8b
 80051ac:	602b      	strlt	r3, [r5, #0]
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	d0dd      	beq.n	800516e <sniprintf+0x16>
 80051b2:	9b02      	ldr	r3, [sp, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e7d9      	b.n	800516e <sniprintf+0x16>
 80051ba:	bf00      	nop
 80051bc:	2000000c 	.word	0x2000000c

080051c0 <memset>:
 80051c0:	4402      	add	r2, r0
 80051c2:	4603      	mov	r3, r0
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d100      	bne.n	80051ca <memset+0xa>
 80051c8:	4770      	bx	lr
 80051ca:	f803 1b01 	strb.w	r1, [r3], #1
 80051ce:	e7f9      	b.n	80051c4 <memset+0x4>

080051d0 <__errno>:
 80051d0:	4b01      	ldr	r3, [pc, #4]	@ (80051d8 <__errno+0x8>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	2000000c 	.word	0x2000000c

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	@ (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	@ (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005220 <__libc_init_array+0x44>)
 80051f0:	f000 fc66 	bl	8005ac0 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	080060f0 	.word	0x080060f0
 8005218:	080060f0 	.word	0x080060f0
 800521c:	080060f0 	.word	0x080060f0
 8005220:	080060f4 	.word	0x080060f4

08005224 <__retarget_lock_acquire_recursive>:
 8005224:	4770      	bx	lr

08005226 <__retarget_lock_release_recursive>:
 8005226:	4770      	bx	lr

08005228 <_free_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4605      	mov	r5, r0
 800522c:	2900      	cmp	r1, #0
 800522e:	d041      	beq.n	80052b4 <_free_r+0x8c>
 8005230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005234:	1f0c      	subs	r4, r1, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	bfb8      	it	lt
 800523a:	18e4      	addlt	r4, r4, r3
 800523c:	f000 f8e0 	bl	8005400 <__malloc_lock>
 8005240:	4a1d      	ldr	r2, [pc, #116]	@ (80052b8 <_free_r+0x90>)
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	b933      	cbnz	r3, 8005254 <_free_r+0x2c>
 8005246:	6063      	str	r3, [r4, #4]
 8005248:	6014      	str	r4, [r2, #0]
 800524a:	4628      	mov	r0, r5
 800524c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005250:	f000 b8dc 	b.w	800540c <__malloc_unlock>
 8005254:	42a3      	cmp	r3, r4
 8005256:	d908      	bls.n	800526a <_free_r+0x42>
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	1821      	adds	r1, r4, r0
 800525c:	428b      	cmp	r3, r1
 800525e:	bf01      	itttt	eq
 8005260:	6819      	ldreq	r1, [r3, #0]
 8005262:	685b      	ldreq	r3, [r3, #4]
 8005264:	1809      	addeq	r1, r1, r0
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	e7ed      	b.n	8005246 <_free_r+0x1e>
 800526a:	461a      	mov	r2, r3
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b10b      	cbz	r3, 8005274 <_free_r+0x4c>
 8005270:	42a3      	cmp	r3, r4
 8005272:	d9fa      	bls.n	800526a <_free_r+0x42>
 8005274:	6811      	ldr	r1, [r2, #0]
 8005276:	1850      	adds	r0, r2, r1
 8005278:	42a0      	cmp	r0, r4
 800527a:	d10b      	bne.n	8005294 <_free_r+0x6c>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	4401      	add	r1, r0
 8005280:	1850      	adds	r0, r2, r1
 8005282:	4283      	cmp	r3, r0
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	d1e0      	bne.n	800524a <_free_r+0x22>
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	6053      	str	r3, [r2, #4]
 800528e:	4408      	add	r0, r1
 8005290:	6010      	str	r0, [r2, #0]
 8005292:	e7da      	b.n	800524a <_free_r+0x22>
 8005294:	d902      	bls.n	800529c <_free_r+0x74>
 8005296:	230c      	movs	r3, #12
 8005298:	602b      	str	r3, [r5, #0]
 800529a:	e7d6      	b.n	800524a <_free_r+0x22>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	1821      	adds	r1, r4, r0
 80052a0:	428b      	cmp	r3, r1
 80052a2:	bf04      	itt	eq
 80052a4:	6819      	ldreq	r1, [r3, #0]
 80052a6:	685b      	ldreq	r3, [r3, #4]
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	bf04      	itt	eq
 80052ac:	1809      	addeq	r1, r1, r0
 80052ae:	6021      	streq	r1, [r4, #0]
 80052b0:	6054      	str	r4, [r2, #4]
 80052b2:	e7ca      	b.n	800524a <_free_r+0x22>
 80052b4:	bd38      	pop	{r3, r4, r5, pc}
 80052b6:	bf00      	nop
 80052b8:	200002a0 	.word	0x200002a0

080052bc <sbrk_aligned>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4e0f      	ldr	r6, [pc, #60]	@ (80052fc <sbrk_aligned+0x40>)
 80052c0:	460c      	mov	r4, r1
 80052c2:	6831      	ldr	r1, [r6, #0]
 80052c4:	4605      	mov	r5, r0
 80052c6:	b911      	cbnz	r1, 80052ce <sbrk_aligned+0x12>
 80052c8:	f000 fba6 	bl	8005a18 <_sbrk_r>
 80052cc:	6030      	str	r0, [r6, #0]
 80052ce:	4621      	mov	r1, r4
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 fba1 	bl	8005a18 <_sbrk_r>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	d103      	bne.n	80052e2 <sbrk_aligned+0x26>
 80052da:	f04f 34ff 	mov.w	r4, #4294967295
 80052de:	4620      	mov	r0, r4
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
 80052e2:	1cc4      	adds	r4, r0, #3
 80052e4:	f024 0403 	bic.w	r4, r4, #3
 80052e8:	42a0      	cmp	r0, r4
 80052ea:	d0f8      	beq.n	80052de <sbrk_aligned+0x22>
 80052ec:	1a21      	subs	r1, r4, r0
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fb92 	bl	8005a18 <_sbrk_r>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d1f2      	bne.n	80052de <sbrk_aligned+0x22>
 80052f8:	e7ef      	b.n	80052da <sbrk_aligned+0x1e>
 80052fa:	bf00      	nop
 80052fc:	2000029c 	.word	0x2000029c

08005300 <_malloc_r>:
 8005300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005304:	1ccd      	adds	r5, r1, #3
 8005306:	f025 0503 	bic.w	r5, r5, #3
 800530a:	3508      	adds	r5, #8
 800530c:	2d0c      	cmp	r5, #12
 800530e:	bf38      	it	cc
 8005310:	250c      	movcc	r5, #12
 8005312:	2d00      	cmp	r5, #0
 8005314:	4606      	mov	r6, r0
 8005316:	db01      	blt.n	800531c <_malloc_r+0x1c>
 8005318:	42a9      	cmp	r1, r5
 800531a:	d904      	bls.n	8005326 <_malloc_r+0x26>
 800531c:	230c      	movs	r3, #12
 800531e:	6033      	str	r3, [r6, #0]
 8005320:	2000      	movs	r0, #0
 8005322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053fc <_malloc_r+0xfc>
 800532a:	f000 f869 	bl	8005400 <__malloc_lock>
 800532e:	f8d8 3000 	ldr.w	r3, [r8]
 8005332:	461c      	mov	r4, r3
 8005334:	bb44      	cbnz	r4, 8005388 <_malloc_r+0x88>
 8005336:	4629      	mov	r1, r5
 8005338:	4630      	mov	r0, r6
 800533a:	f7ff ffbf 	bl	80052bc <sbrk_aligned>
 800533e:	1c43      	adds	r3, r0, #1
 8005340:	4604      	mov	r4, r0
 8005342:	d158      	bne.n	80053f6 <_malloc_r+0xf6>
 8005344:	f8d8 4000 	ldr.w	r4, [r8]
 8005348:	4627      	mov	r7, r4
 800534a:	2f00      	cmp	r7, #0
 800534c:	d143      	bne.n	80053d6 <_malloc_r+0xd6>
 800534e:	2c00      	cmp	r4, #0
 8005350:	d04b      	beq.n	80053ea <_malloc_r+0xea>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	4639      	mov	r1, r7
 8005356:	4630      	mov	r0, r6
 8005358:	eb04 0903 	add.w	r9, r4, r3
 800535c:	f000 fb5c 	bl	8005a18 <_sbrk_r>
 8005360:	4581      	cmp	r9, r0
 8005362:	d142      	bne.n	80053ea <_malloc_r+0xea>
 8005364:	6821      	ldr	r1, [r4, #0]
 8005366:	1a6d      	subs	r5, r5, r1
 8005368:	4629      	mov	r1, r5
 800536a:	4630      	mov	r0, r6
 800536c:	f7ff ffa6 	bl	80052bc <sbrk_aligned>
 8005370:	3001      	adds	r0, #1
 8005372:	d03a      	beq.n	80053ea <_malloc_r+0xea>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	442b      	add	r3, r5
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	f8d8 3000 	ldr.w	r3, [r8]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	bb62      	cbnz	r2, 80053dc <_malloc_r+0xdc>
 8005382:	f8c8 7000 	str.w	r7, [r8]
 8005386:	e00f      	b.n	80053a8 <_malloc_r+0xa8>
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	1b52      	subs	r2, r2, r5
 800538c:	d420      	bmi.n	80053d0 <_malloc_r+0xd0>
 800538e:	2a0b      	cmp	r2, #11
 8005390:	d917      	bls.n	80053c2 <_malloc_r+0xc2>
 8005392:	1961      	adds	r1, r4, r5
 8005394:	42a3      	cmp	r3, r4
 8005396:	6025      	str	r5, [r4, #0]
 8005398:	bf18      	it	ne
 800539a:	6059      	strne	r1, [r3, #4]
 800539c:	6863      	ldr	r3, [r4, #4]
 800539e:	bf08      	it	eq
 80053a0:	f8c8 1000 	streq.w	r1, [r8]
 80053a4:	5162      	str	r2, [r4, r5]
 80053a6:	604b      	str	r3, [r1, #4]
 80053a8:	4630      	mov	r0, r6
 80053aa:	f000 f82f 	bl	800540c <__malloc_unlock>
 80053ae:	f104 000b 	add.w	r0, r4, #11
 80053b2:	1d23      	adds	r3, r4, #4
 80053b4:	f020 0007 	bic.w	r0, r0, #7
 80053b8:	1ac2      	subs	r2, r0, r3
 80053ba:	bf1c      	itt	ne
 80053bc:	1a1b      	subne	r3, r3, r0
 80053be:	50a3      	strne	r3, [r4, r2]
 80053c0:	e7af      	b.n	8005322 <_malloc_r+0x22>
 80053c2:	6862      	ldr	r2, [r4, #4]
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	bf0c      	ite	eq
 80053c8:	f8c8 2000 	streq.w	r2, [r8]
 80053cc:	605a      	strne	r2, [r3, #4]
 80053ce:	e7eb      	b.n	80053a8 <_malloc_r+0xa8>
 80053d0:	4623      	mov	r3, r4
 80053d2:	6864      	ldr	r4, [r4, #4]
 80053d4:	e7ae      	b.n	8005334 <_malloc_r+0x34>
 80053d6:	463c      	mov	r4, r7
 80053d8:	687f      	ldr	r7, [r7, #4]
 80053da:	e7b6      	b.n	800534a <_malloc_r+0x4a>
 80053dc:	461a      	mov	r2, r3
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d1fb      	bne.n	80053dc <_malloc_r+0xdc>
 80053e4:	2300      	movs	r3, #0
 80053e6:	6053      	str	r3, [r2, #4]
 80053e8:	e7de      	b.n	80053a8 <_malloc_r+0xa8>
 80053ea:	230c      	movs	r3, #12
 80053ec:	6033      	str	r3, [r6, #0]
 80053ee:	4630      	mov	r0, r6
 80053f0:	f000 f80c 	bl	800540c <__malloc_unlock>
 80053f4:	e794      	b.n	8005320 <_malloc_r+0x20>
 80053f6:	6005      	str	r5, [r0, #0]
 80053f8:	e7d6      	b.n	80053a8 <_malloc_r+0xa8>
 80053fa:	bf00      	nop
 80053fc:	200002a0 	.word	0x200002a0

08005400 <__malloc_lock>:
 8005400:	4801      	ldr	r0, [pc, #4]	@ (8005408 <__malloc_lock+0x8>)
 8005402:	f7ff bf0f 	b.w	8005224 <__retarget_lock_acquire_recursive>
 8005406:	bf00      	nop
 8005408:	20000298 	.word	0x20000298

0800540c <__malloc_unlock>:
 800540c:	4801      	ldr	r0, [pc, #4]	@ (8005414 <__malloc_unlock+0x8>)
 800540e:	f7ff bf0a 	b.w	8005226 <__retarget_lock_release_recursive>
 8005412:	bf00      	nop
 8005414:	20000298 	.word	0x20000298

08005418 <__ssputs_r>:
 8005418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	688e      	ldr	r6, [r1, #8]
 800541e:	461f      	mov	r7, r3
 8005420:	42be      	cmp	r6, r7
 8005422:	680b      	ldr	r3, [r1, #0]
 8005424:	4682      	mov	sl, r0
 8005426:	460c      	mov	r4, r1
 8005428:	4690      	mov	r8, r2
 800542a:	d82d      	bhi.n	8005488 <__ssputs_r+0x70>
 800542c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005430:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005434:	d026      	beq.n	8005484 <__ssputs_r+0x6c>
 8005436:	6965      	ldr	r5, [r4, #20]
 8005438:	6909      	ldr	r1, [r1, #16]
 800543a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800543e:	eba3 0901 	sub.w	r9, r3, r1
 8005442:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005446:	1c7b      	adds	r3, r7, #1
 8005448:	444b      	add	r3, r9
 800544a:	106d      	asrs	r5, r5, #1
 800544c:	429d      	cmp	r5, r3
 800544e:	bf38      	it	cc
 8005450:	461d      	movcc	r5, r3
 8005452:	0553      	lsls	r3, r2, #21
 8005454:	d527      	bpl.n	80054a6 <__ssputs_r+0x8e>
 8005456:	4629      	mov	r1, r5
 8005458:	f7ff ff52 	bl	8005300 <_malloc_r>
 800545c:	4606      	mov	r6, r0
 800545e:	b360      	cbz	r0, 80054ba <__ssputs_r+0xa2>
 8005460:	6921      	ldr	r1, [r4, #16]
 8005462:	464a      	mov	r2, r9
 8005464:	f000 fae8 	bl	8005a38 <memcpy>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800546e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	6126      	str	r6, [r4, #16]
 8005476:	6165      	str	r5, [r4, #20]
 8005478:	444e      	add	r6, r9
 800547a:	eba5 0509 	sub.w	r5, r5, r9
 800547e:	6026      	str	r6, [r4, #0]
 8005480:	60a5      	str	r5, [r4, #8]
 8005482:	463e      	mov	r6, r7
 8005484:	42be      	cmp	r6, r7
 8005486:	d900      	bls.n	800548a <__ssputs_r+0x72>
 8005488:	463e      	mov	r6, r7
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	4632      	mov	r2, r6
 800548e:	4641      	mov	r1, r8
 8005490:	f000 faa8 	bl	80059e4 <memmove>
 8005494:	68a3      	ldr	r3, [r4, #8]
 8005496:	1b9b      	subs	r3, r3, r6
 8005498:	60a3      	str	r3, [r4, #8]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	4433      	add	r3, r6
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	2000      	movs	r0, #0
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a6:	462a      	mov	r2, r5
 80054a8:	f000 fad4 	bl	8005a54 <_realloc_r>
 80054ac:	4606      	mov	r6, r0
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d1e0      	bne.n	8005474 <__ssputs_r+0x5c>
 80054b2:	6921      	ldr	r1, [r4, #16]
 80054b4:	4650      	mov	r0, sl
 80054b6:	f7ff feb7 	bl	8005228 <_free_r>
 80054ba:	230c      	movs	r3, #12
 80054bc:	f8ca 3000 	str.w	r3, [sl]
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054c6:	81a3      	strh	r3, [r4, #12]
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	e7e9      	b.n	80054a2 <__ssputs_r+0x8a>
	...

080054d0 <_svfiprintf_r>:
 80054d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	4698      	mov	r8, r3
 80054d6:	898b      	ldrh	r3, [r1, #12]
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	b09d      	sub	sp, #116	@ 0x74
 80054dc:	4607      	mov	r7, r0
 80054de:	460d      	mov	r5, r1
 80054e0:	4614      	mov	r4, r2
 80054e2:	d510      	bpl.n	8005506 <_svfiprintf_r+0x36>
 80054e4:	690b      	ldr	r3, [r1, #16]
 80054e6:	b973      	cbnz	r3, 8005506 <_svfiprintf_r+0x36>
 80054e8:	2140      	movs	r1, #64	@ 0x40
 80054ea:	f7ff ff09 	bl	8005300 <_malloc_r>
 80054ee:	6028      	str	r0, [r5, #0]
 80054f0:	6128      	str	r0, [r5, #16]
 80054f2:	b930      	cbnz	r0, 8005502 <_svfiprintf_r+0x32>
 80054f4:	230c      	movs	r3, #12
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	b01d      	add	sp, #116	@ 0x74
 80054fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005502:	2340      	movs	r3, #64	@ 0x40
 8005504:	616b      	str	r3, [r5, #20]
 8005506:	2300      	movs	r3, #0
 8005508:	9309      	str	r3, [sp, #36]	@ 0x24
 800550a:	2320      	movs	r3, #32
 800550c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005510:	f8cd 800c 	str.w	r8, [sp, #12]
 8005514:	2330      	movs	r3, #48	@ 0x30
 8005516:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056b4 <_svfiprintf_r+0x1e4>
 800551a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800551e:	f04f 0901 	mov.w	r9, #1
 8005522:	4623      	mov	r3, r4
 8005524:	469a      	mov	sl, r3
 8005526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800552a:	b10a      	cbz	r2, 8005530 <_svfiprintf_r+0x60>
 800552c:	2a25      	cmp	r2, #37	@ 0x25
 800552e:	d1f9      	bne.n	8005524 <_svfiprintf_r+0x54>
 8005530:	ebba 0b04 	subs.w	fp, sl, r4
 8005534:	d00b      	beq.n	800554e <_svfiprintf_r+0x7e>
 8005536:	465b      	mov	r3, fp
 8005538:	4622      	mov	r2, r4
 800553a:	4629      	mov	r1, r5
 800553c:	4638      	mov	r0, r7
 800553e:	f7ff ff6b 	bl	8005418 <__ssputs_r>
 8005542:	3001      	adds	r0, #1
 8005544:	f000 80a7 	beq.w	8005696 <_svfiprintf_r+0x1c6>
 8005548:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800554a:	445a      	add	r2, fp
 800554c:	9209      	str	r2, [sp, #36]	@ 0x24
 800554e:	f89a 3000 	ldrb.w	r3, [sl]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 809f 	beq.w	8005696 <_svfiprintf_r+0x1c6>
 8005558:	2300      	movs	r3, #0
 800555a:	f04f 32ff 	mov.w	r2, #4294967295
 800555e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005562:	f10a 0a01 	add.w	sl, sl, #1
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	9307      	str	r3, [sp, #28]
 800556a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800556e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005570:	4654      	mov	r4, sl
 8005572:	2205      	movs	r2, #5
 8005574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005578:	484e      	ldr	r0, [pc, #312]	@ (80056b4 <_svfiprintf_r+0x1e4>)
 800557a:	f7fa fe51 	bl	8000220 <memchr>
 800557e:	9a04      	ldr	r2, [sp, #16]
 8005580:	b9d8      	cbnz	r0, 80055ba <_svfiprintf_r+0xea>
 8005582:	06d0      	lsls	r0, r2, #27
 8005584:	bf44      	itt	mi
 8005586:	2320      	movmi	r3, #32
 8005588:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800558c:	0711      	lsls	r1, r2, #28
 800558e:	bf44      	itt	mi
 8005590:	232b      	movmi	r3, #43	@ 0x2b
 8005592:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005596:	f89a 3000 	ldrb.w	r3, [sl]
 800559a:	2b2a      	cmp	r3, #42	@ 0x2a
 800559c:	d015      	beq.n	80055ca <_svfiprintf_r+0xfa>
 800559e:	9a07      	ldr	r2, [sp, #28]
 80055a0:	4654      	mov	r4, sl
 80055a2:	2000      	movs	r0, #0
 80055a4:	f04f 0c0a 	mov.w	ip, #10
 80055a8:	4621      	mov	r1, r4
 80055aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055ae:	3b30      	subs	r3, #48	@ 0x30
 80055b0:	2b09      	cmp	r3, #9
 80055b2:	d94b      	bls.n	800564c <_svfiprintf_r+0x17c>
 80055b4:	b1b0      	cbz	r0, 80055e4 <_svfiprintf_r+0x114>
 80055b6:	9207      	str	r2, [sp, #28]
 80055b8:	e014      	b.n	80055e4 <_svfiprintf_r+0x114>
 80055ba:	eba0 0308 	sub.w	r3, r0, r8
 80055be:	fa09 f303 	lsl.w	r3, r9, r3
 80055c2:	4313      	orrs	r3, r2
 80055c4:	9304      	str	r3, [sp, #16]
 80055c6:	46a2      	mov	sl, r4
 80055c8:	e7d2      	b.n	8005570 <_svfiprintf_r+0xa0>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	1d19      	adds	r1, r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	9103      	str	r1, [sp, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfbb      	ittet	lt
 80055d6:	425b      	neglt	r3, r3
 80055d8:	f042 0202 	orrlt.w	r2, r2, #2
 80055dc:	9307      	strge	r3, [sp, #28]
 80055de:	9307      	strlt	r3, [sp, #28]
 80055e0:	bfb8      	it	lt
 80055e2:	9204      	strlt	r2, [sp, #16]
 80055e4:	7823      	ldrb	r3, [r4, #0]
 80055e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80055e8:	d10a      	bne.n	8005600 <_svfiprintf_r+0x130>
 80055ea:	7863      	ldrb	r3, [r4, #1]
 80055ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ee:	d132      	bne.n	8005656 <_svfiprintf_r+0x186>
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	9203      	str	r2, [sp, #12]
 80055f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055fc:	3402      	adds	r4, #2
 80055fe:	9305      	str	r3, [sp, #20]
 8005600:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056c4 <_svfiprintf_r+0x1f4>
 8005604:	7821      	ldrb	r1, [r4, #0]
 8005606:	2203      	movs	r2, #3
 8005608:	4650      	mov	r0, sl
 800560a:	f7fa fe09 	bl	8000220 <memchr>
 800560e:	b138      	cbz	r0, 8005620 <_svfiprintf_r+0x150>
 8005610:	9b04      	ldr	r3, [sp, #16]
 8005612:	eba0 000a 	sub.w	r0, r0, sl
 8005616:	2240      	movs	r2, #64	@ 0x40
 8005618:	4082      	lsls	r2, r0
 800561a:	4313      	orrs	r3, r2
 800561c:	3401      	adds	r4, #1
 800561e:	9304      	str	r3, [sp, #16]
 8005620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005624:	4824      	ldr	r0, [pc, #144]	@ (80056b8 <_svfiprintf_r+0x1e8>)
 8005626:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800562a:	2206      	movs	r2, #6
 800562c:	f7fa fdf8 	bl	8000220 <memchr>
 8005630:	2800      	cmp	r0, #0
 8005632:	d036      	beq.n	80056a2 <_svfiprintf_r+0x1d2>
 8005634:	4b21      	ldr	r3, [pc, #132]	@ (80056bc <_svfiprintf_r+0x1ec>)
 8005636:	bb1b      	cbnz	r3, 8005680 <_svfiprintf_r+0x1b0>
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	3307      	adds	r3, #7
 800563c:	f023 0307 	bic.w	r3, r3, #7
 8005640:	3308      	adds	r3, #8
 8005642:	9303      	str	r3, [sp, #12]
 8005644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005646:	4433      	add	r3, r6
 8005648:	9309      	str	r3, [sp, #36]	@ 0x24
 800564a:	e76a      	b.n	8005522 <_svfiprintf_r+0x52>
 800564c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005650:	460c      	mov	r4, r1
 8005652:	2001      	movs	r0, #1
 8005654:	e7a8      	b.n	80055a8 <_svfiprintf_r+0xd8>
 8005656:	2300      	movs	r3, #0
 8005658:	3401      	adds	r4, #1
 800565a:	9305      	str	r3, [sp, #20]
 800565c:	4619      	mov	r1, r3
 800565e:	f04f 0c0a 	mov.w	ip, #10
 8005662:	4620      	mov	r0, r4
 8005664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005668:	3a30      	subs	r2, #48	@ 0x30
 800566a:	2a09      	cmp	r2, #9
 800566c:	d903      	bls.n	8005676 <_svfiprintf_r+0x1a6>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0c6      	beq.n	8005600 <_svfiprintf_r+0x130>
 8005672:	9105      	str	r1, [sp, #20]
 8005674:	e7c4      	b.n	8005600 <_svfiprintf_r+0x130>
 8005676:	fb0c 2101 	mla	r1, ip, r1, r2
 800567a:	4604      	mov	r4, r0
 800567c:	2301      	movs	r3, #1
 800567e:	e7f0      	b.n	8005662 <_svfiprintf_r+0x192>
 8005680:	ab03      	add	r3, sp, #12
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	462a      	mov	r2, r5
 8005686:	4b0e      	ldr	r3, [pc, #56]	@ (80056c0 <_svfiprintf_r+0x1f0>)
 8005688:	a904      	add	r1, sp, #16
 800568a:	4638      	mov	r0, r7
 800568c:	f3af 8000 	nop.w
 8005690:	1c42      	adds	r2, r0, #1
 8005692:	4606      	mov	r6, r0
 8005694:	d1d6      	bne.n	8005644 <_svfiprintf_r+0x174>
 8005696:	89ab      	ldrh	r3, [r5, #12]
 8005698:	065b      	lsls	r3, r3, #25
 800569a:	f53f af2d 	bmi.w	80054f8 <_svfiprintf_r+0x28>
 800569e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056a0:	e72c      	b.n	80054fc <_svfiprintf_r+0x2c>
 80056a2:	ab03      	add	r3, sp, #12
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	462a      	mov	r2, r5
 80056a8:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <_svfiprintf_r+0x1f0>)
 80056aa:	a904      	add	r1, sp, #16
 80056ac:	4638      	mov	r0, r7
 80056ae:	f000 f879 	bl	80057a4 <_printf_i>
 80056b2:	e7ed      	b.n	8005690 <_svfiprintf_r+0x1c0>
 80056b4:	080060b5 	.word	0x080060b5
 80056b8:	080060bf 	.word	0x080060bf
 80056bc:	00000000 	.word	0x00000000
 80056c0:	08005419 	.word	0x08005419
 80056c4:	080060bb 	.word	0x080060bb

080056c8 <_printf_common>:
 80056c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	4616      	mov	r6, r2
 80056ce:	4698      	mov	r8, r3
 80056d0:	688a      	ldr	r2, [r1, #8]
 80056d2:	690b      	ldr	r3, [r1, #16]
 80056d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d8:	4293      	cmp	r3, r2
 80056da:	bfb8      	it	lt
 80056dc:	4613      	movlt	r3, r2
 80056de:	6033      	str	r3, [r6, #0]
 80056e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056e4:	4607      	mov	r7, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	b10a      	cbz	r2, 80056ee <_printf_common+0x26>
 80056ea:	3301      	adds	r3, #1
 80056ec:	6033      	str	r3, [r6, #0]
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	0699      	lsls	r1, r3, #26
 80056f2:	bf42      	ittt	mi
 80056f4:	6833      	ldrmi	r3, [r6, #0]
 80056f6:	3302      	addmi	r3, #2
 80056f8:	6033      	strmi	r3, [r6, #0]
 80056fa:	6825      	ldr	r5, [r4, #0]
 80056fc:	f015 0506 	ands.w	r5, r5, #6
 8005700:	d106      	bne.n	8005710 <_printf_common+0x48>
 8005702:	f104 0a19 	add.w	sl, r4, #25
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	6832      	ldr	r2, [r6, #0]
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	42ab      	cmp	r3, r5
 800570e:	dc26      	bgt.n	800575e <_printf_common+0x96>
 8005710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	3b00      	subs	r3, #0
 8005718:	bf18      	it	ne
 800571a:	2301      	movne	r3, #1
 800571c:	0692      	lsls	r2, r2, #26
 800571e:	d42b      	bmi.n	8005778 <_printf_common+0xb0>
 8005720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005724:	4641      	mov	r1, r8
 8005726:	4638      	mov	r0, r7
 8005728:	47c8      	blx	r9
 800572a:	3001      	adds	r0, #1
 800572c:	d01e      	beq.n	800576c <_printf_common+0xa4>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	6922      	ldr	r2, [r4, #16]
 8005732:	f003 0306 	and.w	r3, r3, #6
 8005736:	2b04      	cmp	r3, #4
 8005738:	bf02      	ittt	eq
 800573a:	68e5      	ldreq	r5, [r4, #12]
 800573c:	6833      	ldreq	r3, [r6, #0]
 800573e:	1aed      	subeq	r5, r5, r3
 8005740:	68a3      	ldr	r3, [r4, #8]
 8005742:	bf0c      	ite	eq
 8005744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005748:	2500      	movne	r5, #0
 800574a:	4293      	cmp	r3, r2
 800574c:	bfc4      	itt	gt
 800574e:	1a9b      	subgt	r3, r3, r2
 8005750:	18ed      	addgt	r5, r5, r3
 8005752:	2600      	movs	r6, #0
 8005754:	341a      	adds	r4, #26
 8005756:	42b5      	cmp	r5, r6
 8005758:	d11a      	bne.n	8005790 <_printf_common+0xc8>
 800575a:	2000      	movs	r0, #0
 800575c:	e008      	b.n	8005770 <_printf_common+0xa8>
 800575e:	2301      	movs	r3, #1
 8005760:	4652      	mov	r2, sl
 8005762:	4641      	mov	r1, r8
 8005764:	4638      	mov	r0, r7
 8005766:	47c8      	blx	r9
 8005768:	3001      	adds	r0, #1
 800576a:	d103      	bne.n	8005774 <_printf_common+0xac>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	3501      	adds	r5, #1
 8005776:	e7c6      	b.n	8005706 <_printf_common+0x3e>
 8005778:	18e1      	adds	r1, r4, r3
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	2030      	movs	r0, #48	@ 0x30
 800577e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005782:	4422      	add	r2, r4
 8005784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800578c:	3302      	adds	r3, #2
 800578e:	e7c7      	b.n	8005720 <_printf_common+0x58>
 8005790:	2301      	movs	r3, #1
 8005792:	4622      	mov	r2, r4
 8005794:	4641      	mov	r1, r8
 8005796:	4638      	mov	r0, r7
 8005798:	47c8      	blx	r9
 800579a:	3001      	adds	r0, #1
 800579c:	d0e6      	beq.n	800576c <_printf_common+0xa4>
 800579e:	3601      	adds	r6, #1
 80057a0:	e7d9      	b.n	8005756 <_printf_common+0x8e>
	...

080057a4 <_printf_i>:
 80057a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	7e0f      	ldrb	r7, [r1, #24]
 80057aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057ac:	2f78      	cmp	r7, #120	@ 0x78
 80057ae:	4691      	mov	r9, r2
 80057b0:	4680      	mov	r8, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	469a      	mov	sl, r3
 80057b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057ba:	d807      	bhi.n	80057cc <_printf_i+0x28>
 80057bc:	2f62      	cmp	r7, #98	@ 0x62
 80057be:	d80a      	bhi.n	80057d6 <_printf_i+0x32>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	f000 80d2 	beq.w	800596a <_printf_i+0x1c6>
 80057c6:	2f58      	cmp	r7, #88	@ 0x58
 80057c8:	f000 80b9 	beq.w	800593e <_printf_i+0x19a>
 80057cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057d4:	e03a      	b.n	800584c <_printf_i+0xa8>
 80057d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057da:	2b15      	cmp	r3, #21
 80057dc:	d8f6      	bhi.n	80057cc <_printf_i+0x28>
 80057de:	a101      	add	r1, pc, #4	@ (adr r1, 80057e4 <_printf_i+0x40>)
 80057e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	08005851 	.word	0x08005851
 80057ec:	080057cd 	.word	0x080057cd
 80057f0:	080057cd 	.word	0x080057cd
 80057f4:	080057cd 	.word	0x080057cd
 80057f8:	080057cd 	.word	0x080057cd
 80057fc:	08005851 	.word	0x08005851
 8005800:	080057cd 	.word	0x080057cd
 8005804:	080057cd 	.word	0x080057cd
 8005808:	080057cd 	.word	0x080057cd
 800580c:	080057cd 	.word	0x080057cd
 8005810:	08005951 	.word	0x08005951
 8005814:	0800587b 	.word	0x0800587b
 8005818:	0800590b 	.word	0x0800590b
 800581c:	080057cd 	.word	0x080057cd
 8005820:	080057cd 	.word	0x080057cd
 8005824:	08005973 	.word	0x08005973
 8005828:	080057cd 	.word	0x080057cd
 800582c:	0800587b 	.word	0x0800587b
 8005830:	080057cd 	.word	0x080057cd
 8005834:	080057cd 	.word	0x080057cd
 8005838:	08005913 	.word	0x08005913
 800583c:	6833      	ldr	r3, [r6, #0]
 800583e:	1d1a      	adds	r2, r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6032      	str	r2, [r6, #0]
 8005844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800584c:	2301      	movs	r3, #1
 800584e:	e09d      	b.n	800598c <_printf_i+0x1e8>
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	1d19      	adds	r1, r3, #4
 8005856:	6031      	str	r1, [r6, #0]
 8005858:	0606      	lsls	r6, r0, #24
 800585a:	d501      	bpl.n	8005860 <_printf_i+0xbc>
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	e003      	b.n	8005868 <_printf_i+0xc4>
 8005860:	0645      	lsls	r5, r0, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0xb8>
 8005864:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005868:	2d00      	cmp	r5, #0
 800586a:	da03      	bge.n	8005874 <_printf_i+0xd0>
 800586c:	232d      	movs	r3, #45	@ 0x2d
 800586e:	426d      	negs	r5, r5
 8005870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005874:	4859      	ldr	r0, [pc, #356]	@ (80059dc <_printf_i+0x238>)
 8005876:	230a      	movs	r3, #10
 8005878:	e011      	b.n	800589e <_printf_i+0xfa>
 800587a:	6821      	ldr	r1, [r4, #0]
 800587c:	6833      	ldr	r3, [r6, #0]
 800587e:	0608      	lsls	r0, r1, #24
 8005880:	f853 5b04 	ldr.w	r5, [r3], #4
 8005884:	d402      	bmi.n	800588c <_printf_i+0xe8>
 8005886:	0649      	lsls	r1, r1, #25
 8005888:	bf48      	it	mi
 800588a:	b2ad      	uxthmi	r5, r5
 800588c:	2f6f      	cmp	r7, #111	@ 0x6f
 800588e:	4853      	ldr	r0, [pc, #332]	@ (80059dc <_printf_i+0x238>)
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	bf14      	ite	ne
 8005894:	230a      	movne	r3, #10
 8005896:	2308      	moveq	r3, #8
 8005898:	2100      	movs	r1, #0
 800589a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800589e:	6866      	ldr	r6, [r4, #4]
 80058a0:	60a6      	str	r6, [r4, #8]
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	bfa2      	ittt	ge
 80058a6:	6821      	ldrge	r1, [r4, #0]
 80058a8:	f021 0104 	bicge.w	r1, r1, #4
 80058ac:	6021      	strge	r1, [r4, #0]
 80058ae:	b90d      	cbnz	r5, 80058b4 <_printf_i+0x110>
 80058b0:	2e00      	cmp	r6, #0
 80058b2:	d04b      	beq.n	800594c <_printf_i+0x1a8>
 80058b4:	4616      	mov	r6, r2
 80058b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80058ba:	fb03 5711 	mls	r7, r3, r1, r5
 80058be:	5dc7      	ldrb	r7, [r0, r7]
 80058c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058c4:	462f      	mov	r7, r5
 80058c6:	42bb      	cmp	r3, r7
 80058c8:	460d      	mov	r5, r1
 80058ca:	d9f4      	bls.n	80058b6 <_printf_i+0x112>
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d10b      	bne.n	80058e8 <_printf_i+0x144>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	07df      	lsls	r7, r3, #31
 80058d4:	d508      	bpl.n	80058e8 <_printf_i+0x144>
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	6861      	ldr	r1, [r4, #4]
 80058da:	4299      	cmp	r1, r3
 80058dc:	bfde      	ittt	le
 80058de:	2330      	movle	r3, #48	@ 0x30
 80058e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058e8:	1b92      	subs	r2, r2, r6
 80058ea:	6122      	str	r2, [r4, #16]
 80058ec:	f8cd a000 	str.w	sl, [sp]
 80058f0:	464b      	mov	r3, r9
 80058f2:	aa03      	add	r2, sp, #12
 80058f4:	4621      	mov	r1, r4
 80058f6:	4640      	mov	r0, r8
 80058f8:	f7ff fee6 	bl	80056c8 <_printf_common>
 80058fc:	3001      	adds	r0, #1
 80058fe:	d14a      	bne.n	8005996 <_printf_i+0x1f2>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	b004      	add	sp, #16
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	f043 0320 	orr.w	r3, r3, #32
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	4833      	ldr	r0, [pc, #204]	@ (80059e0 <_printf_i+0x23c>)
 8005914:	2778      	movs	r7, #120	@ 0x78
 8005916:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	6831      	ldr	r1, [r6, #0]
 800591e:	061f      	lsls	r7, r3, #24
 8005920:	f851 5b04 	ldr.w	r5, [r1], #4
 8005924:	d402      	bmi.n	800592c <_printf_i+0x188>
 8005926:	065f      	lsls	r7, r3, #25
 8005928:	bf48      	it	mi
 800592a:	b2ad      	uxthmi	r5, r5
 800592c:	6031      	str	r1, [r6, #0]
 800592e:	07d9      	lsls	r1, r3, #31
 8005930:	bf44      	itt	mi
 8005932:	f043 0320 	orrmi.w	r3, r3, #32
 8005936:	6023      	strmi	r3, [r4, #0]
 8005938:	b11d      	cbz	r5, 8005942 <_printf_i+0x19e>
 800593a:	2310      	movs	r3, #16
 800593c:	e7ac      	b.n	8005898 <_printf_i+0xf4>
 800593e:	4827      	ldr	r0, [pc, #156]	@ (80059dc <_printf_i+0x238>)
 8005940:	e7e9      	b.n	8005916 <_printf_i+0x172>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f023 0320 	bic.w	r3, r3, #32
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	e7f6      	b.n	800593a <_printf_i+0x196>
 800594c:	4616      	mov	r6, r2
 800594e:	e7bd      	b.n	80058cc <_printf_i+0x128>
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	6961      	ldr	r1, [r4, #20]
 8005956:	1d18      	adds	r0, r3, #4
 8005958:	6030      	str	r0, [r6, #0]
 800595a:	062e      	lsls	r6, r5, #24
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	d501      	bpl.n	8005964 <_printf_i+0x1c0>
 8005960:	6019      	str	r1, [r3, #0]
 8005962:	e002      	b.n	800596a <_printf_i+0x1c6>
 8005964:	0668      	lsls	r0, r5, #25
 8005966:	d5fb      	bpl.n	8005960 <_printf_i+0x1bc>
 8005968:	8019      	strh	r1, [r3, #0]
 800596a:	2300      	movs	r3, #0
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	4616      	mov	r6, r2
 8005970:	e7bc      	b.n	80058ec <_printf_i+0x148>
 8005972:	6833      	ldr	r3, [r6, #0]
 8005974:	1d1a      	adds	r2, r3, #4
 8005976:	6032      	str	r2, [r6, #0]
 8005978:	681e      	ldr	r6, [r3, #0]
 800597a:	6862      	ldr	r2, [r4, #4]
 800597c:	2100      	movs	r1, #0
 800597e:	4630      	mov	r0, r6
 8005980:	f7fa fc4e 	bl	8000220 <memchr>
 8005984:	b108      	cbz	r0, 800598a <_printf_i+0x1e6>
 8005986:	1b80      	subs	r0, r0, r6
 8005988:	6060      	str	r0, [r4, #4]
 800598a:	6863      	ldr	r3, [r4, #4]
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	2300      	movs	r3, #0
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005994:	e7aa      	b.n	80058ec <_printf_i+0x148>
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	4632      	mov	r2, r6
 800599a:	4649      	mov	r1, r9
 800599c:	4640      	mov	r0, r8
 800599e:	47d0      	blx	sl
 80059a0:	3001      	adds	r0, #1
 80059a2:	d0ad      	beq.n	8005900 <_printf_i+0x15c>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	079b      	lsls	r3, r3, #30
 80059a8:	d413      	bmi.n	80059d2 <_printf_i+0x22e>
 80059aa:	68e0      	ldr	r0, [r4, #12]
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	4298      	cmp	r0, r3
 80059b0:	bfb8      	it	lt
 80059b2:	4618      	movlt	r0, r3
 80059b4:	e7a6      	b.n	8005904 <_printf_i+0x160>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4632      	mov	r2, r6
 80059ba:	4649      	mov	r1, r9
 80059bc:	4640      	mov	r0, r8
 80059be:	47d0      	blx	sl
 80059c0:	3001      	adds	r0, #1
 80059c2:	d09d      	beq.n	8005900 <_printf_i+0x15c>
 80059c4:	3501      	adds	r5, #1
 80059c6:	68e3      	ldr	r3, [r4, #12]
 80059c8:	9903      	ldr	r1, [sp, #12]
 80059ca:	1a5b      	subs	r3, r3, r1
 80059cc:	42ab      	cmp	r3, r5
 80059ce:	dcf2      	bgt.n	80059b6 <_printf_i+0x212>
 80059d0:	e7eb      	b.n	80059aa <_printf_i+0x206>
 80059d2:	2500      	movs	r5, #0
 80059d4:	f104 0619 	add.w	r6, r4, #25
 80059d8:	e7f5      	b.n	80059c6 <_printf_i+0x222>
 80059da:	bf00      	nop
 80059dc:	080060c6 	.word	0x080060c6
 80059e0:	080060d7 	.word	0x080060d7

080059e4 <memmove>:
 80059e4:	4288      	cmp	r0, r1
 80059e6:	b510      	push	{r4, lr}
 80059e8:	eb01 0402 	add.w	r4, r1, r2
 80059ec:	d902      	bls.n	80059f4 <memmove+0x10>
 80059ee:	4284      	cmp	r4, r0
 80059f0:	4623      	mov	r3, r4
 80059f2:	d807      	bhi.n	8005a04 <memmove+0x20>
 80059f4:	1e43      	subs	r3, r0, #1
 80059f6:	42a1      	cmp	r1, r4
 80059f8:	d008      	beq.n	8005a0c <memmove+0x28>
 80059fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a02:	e7f8      	b.n	80059f6 <memmove+0x12>
 8005a04:	4402      	add	r2, r0
 8005a06:	4601      	mov	r1, r0
 8005a08:	428a      	cmp	r2, r1
 8005a0a:	d100      	bne.n	8005a0e <memmove+0x2a>
 8005a0c:	bd10      	pop	{r4, pc}
 8005a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a16:	e7f7      	b.n	8005a08 <memmove+0x24>

08005a18 <_sbrk_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d06      	ldr	r5, [pc, #24]	@ (8005a34 <_sbrk_r+0x1c>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	602b      	str	r3, [r5, #0]
 8005a24:	f7fb fe78 	bl	8001718 <_sbrk>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_sbrk_r+0x1a>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_sbrk_r+0x1a>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	20000294 	.word	0x20000294

08005a38 <memcpy>:
 8005a38:	440a      	add	r2, r1
 8005a3a:	4291      	cmp	r1, r2
 8005a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a40:	d100      	bne.n	8005a44 <memcpy+0xc>
 8005a42:	4770      	bx	lr
 8005a44:	b510      	push	{r4, lr}
 8005a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a4e:	4291      	cmp	r1, r2
 8005a50:	d1f9      	bne.n	8005a46 <memcpy+0xe>
 8005a52:	bd10      	pop	{r4, pc}

08005a54 <_realloc_r>:
 8005a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a58:	4680      	mov	r8, r0
 8005a5a:	4615      	mov	r5, r2
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	b921      	cbnz	r1, 8005a6a <_realloc_r+0x16>
 8005a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a64:	4611      	mov	r1, r2
 8005a66:	f7ff bc4b 	b.w	8005300 <_malloc_r>
 8005a6a:	b92a      	cbnz	r2, 8005a78 <_realloc_r+0x24>
 8005a6c:	f7ff fbdc 	bl	8005228 <_free_r>
 8005a70:	2400      	movs	r4, #0
 8005a72:	4620      	mov	r0, r4
 8005a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a78:	f000 f81a 	bl	8005ab0 <_malloc_usable_size_r>
 8005a7c:	4285      	cmp	r5, r0
 8005a7e:	4606      	mov	r6, r0
 8005a80:	d802      	bhi.n	8005a88 <_realloc_r+0x34>
 8005a82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a86:	d8f4      	bhi.n	8005a72 <_realloc_r+0x1e>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f7ff fc38 	bl	8005300 <_malloc_r>
 8005a90:	4607      	mov	r7, r0
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d0ec      	beq.n	8005a70 <_realloc_r+0x1c>
 8005a96:	42b5      	cmp	r5, r6
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	bf28      	it	cs
 8005a9e:	4632      	movcs	r2, r6
 8005aa0:	f7ff ffca 	bl	8005a38 <memcpy>
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f7ff fbbe 	bl	8005228 <_free_r>
 8005aac:	463c      	mov	r4, r7
 8005aae:	e7e0      	b.n	8005a72 <_realloc_r+0x1e>

08005ab0 <_malloc_usable_size_r>:
 8005ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab4:	1f18      	subs	r0, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bfbc      	itt	lt
 8005aba:	580b      	ldrlt	r3, [r1, r0]
 8005abc:	18c0      	addlt	r0, r0, r3
 8005abe:	4770      	bx	lr

08005ac0 <_init>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	bf00      	nop
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr

08005acc <_fini>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr
